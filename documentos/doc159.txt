IFAC PapersOnLine 55-10 (2022) 1619–1624
 ScienceDirect ScienceDirect
 Available online at www.sciencedirect.com
 2405-8963 Copyright © 2022 The Authors. This is an open access article under the CC BY-NC-ND license.
 Peer review under responsibility of International Federation of Automatic Control.
 10.1016/j.ifacol.2022.09.622
 Copyright © 2022 The Authors. This is an open access article under the CC BY-NC-ND license  
(https://creativecommons.org/licenses/by-nc-nd/4.0/)
 
 
Uncapacitated (Facility) Location Problem: A Hybrid Genetic-Tabu Search 
Approach 
Bahram Alidaee*. Haibo Wang.**  
*University of Mississippi, School of Business Administration, University, MS 38655, 
USA (Tel: 662-715-1614; e-mail: balidaee@bus.olemiss.edu). 
**Texas A&M International University, A.R. Sánchez Jr. School of Business, Laredo, TX 78041 
USA (Tel:956-326-2503; e-mail:hwang@tamiu.edu) 
Abstract: In this paper the uncapacitated location problem (ULP) with restriction on number of facilities 
is considered. The ULP generalizes the uncapacitated facility location problem and the p-Median problems. 
A hybrid genetic algorithm and tabu search (HGA-TS) is presented for solution of the problem. The genetic 
algorithm is based on random-key (RK) applied to sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves as a diversification generation within the 
CETS. Effectiveness of the heuristic is tested on benchmark problems available on the Internet and 
compared with a leading algorithm based on GRASP.   
Copyright © 2022 IFAC 
Keywords: Uncapacitated location problem,  p-Median; Tabu search; Genetic random-key; GRASP. 
1. INTRODUCTION 
In this paper we are concerned with the uncapacitated location 
problem (ULP). In that, there is a set of clients I={1,…,m}, to 
be served by a set of facilities J={1,…,n}. Let 𝑐𝑐𝑖𝑖𝑖𝑖 be the cost if 
client i is served by facility j, 𝑓𝑓𝑖𝑖 fixed cost of opening a facility 
j, and p the maximum number of sites that can be opened. Let 
�
�𝑥𝑖𝑖𝑖𝑖 be 1 if client i can be served by one and only one facility j, 
0 otherwise, and 𝑦𝑦𝑖𝑖 equal 1 if facility j is opened, 0 otherwise. 
An integer programming formulation of the ULP can be stated 
as follows (Galvão & Raggi, 1989).   
Min 𝑍𝑍=∑ ∑ 𝑥𝑥𝑖𝑖𝑖𝑖𝑐𝑐𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1
 𝑚𝑚
 𝑖𝑖=1 +∑ 𝑦𝑦𝑖𝑖𝑓𝑓𝑖𝑖 𝑛𝑛
 𝑖𝑖=1               (1) 
∑ 𝑥𝑥𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 =1, i=1,…,m,          (2) 
∑ 𝑦𝑦𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 ≤𝑝𝑝       (3) 
�
�𝑥𝑖𝑖𝑖𝑖≤𝑦𝑦𝑖𝑖, i=1,…m, j=1,…,n,     (4) 
�
�𝑥𝑖𝑖𝑖𝑖,𝑦𝑦𝑖𝑖∈{0,1}, i=1,…,m, j=1,…,n    (5) 
Constraints (2) ensure each client is served by one and only 
one  facility, constraint (3) ensures at most p facilities can be 
opened, and constraints (4) ensure a client can be served by a 
facility only if the facility is opened. Constraints (5) are binary 
variables. The objective function minimizes total costs of 
serving clients and opening facilities.   
If in constraint (3), p is an unknown variable, the problem 
known as uncapacitated facility location problem (UFLP), and 
when p is known and inequality is replaced with equality, it is 
the p-Median problem. The ULP was first introduced in 
(Galvão & Raggi, 1989) where the author gave an optimal 
solution procedure. The ULP is known to be NP-hard in the 
strong sense, (Garey & Johnson, 1979). 
The literature suggests that there are several authors who have 
developed meta-heuristics including tabu search, and genetic 
algorithm for UFLP and p-Median problems, however, none 
apply the meta-heuristic, so called ‘adaptive critical event tabu 
search’ (CETS) to these problems. Furthermore, except for 
(Wang & Alidaee, 2018), there is no heuristic available for the 
general ULP. Thus, there is a need for developing heuristics to 
solve large-scale ULP.   
Our main contribution in this paper is to develop a hybrid 
algorithm based on genetic random-key and tabu search, 
(HGA-TS) to solve very-large-scale ULP in short CPU time. 
The genetic algorithm is based on random-key (RK) applied to 
sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves 
as an effective diversification generation within the CETS. 
Embedding genetic RK within TS as a diversification 
procedure in this paper is also new. Our algorithm quickly 
solves several p-Median problems to reach solution of ULP. 
This is consistent with conclusion in (Galvão & Raggi, 1989) 
that the generalization, i.e., restriction on number of facilities, 
embedded in the formulation of p-Median does not 
significantly reduce the efficiency of the solution method. The 
procedure in this article can easily be applied to variety of 
discrete optimization problems. Effectiveness of the procedure 
is tested by applying the HGA-TS to the benchmark problems 
available on the Internet.  
2. HYBRID GA-TS HEURISTIC 
We first develop a tabu search (TS) based on critical event 
memory, known as critical event tabu search (CETS) with a 
strong diversification component based on GA random-key, 
(HGS-TS). The CETS was introduced in (Glover & 
Kochenberger, 1996; Glover et al., 1998) and has been applied 
with considerable success to various combinatorial problems.  
Two fundamentally important components of any meta
heuristic, in particular TS, is: (1) a diversification generator; 
and (2) a ‘simple’ improvement procedure.  The diversification 
component tries to surf into diverse solution space. In most 
meta-heuristics, such as TS, it is necessary to have some 
‘simple’ improvement procedure. For example, assume in 
ULP a set of facilities, V J  , is chosen to serve all clients. 
We can consider three possible simple improvement ‘moves’: 
(i) exchange position of two facilities, one from V and one 
from the set J\V; (ii) move one of the facilities from the set V 
to the set J\V; (iii) add one facility from J\V to the set V, if 
|V|+1 is less than or equal to p. 
 
 
Uncapacitated (Facility) Location Problem: A Hybrid Genetic-Tabu Search 
Approach 
Bahram Alidaee*. Haibo Wang.**  
*University of Mississippi, School of Business Administration, University, MS 38655, 
USA (Tel: 662-715-1614; e-mail: balidaee@bus.olemiss.edu). 
**Texas A&M International University, A.R. Sánchez Jr. School of Business, Laredo, TX 78041 
USA (Tel:956-326-2503; e-mail:hwang@tamiu.edu) 
Abstract: In this paper the uncapacitated location problem (ULP) with restriction on number of facilities 
is considered. The ULP generalizes the uncapacitated facility location problem and the p-Median problems. 
A hybrid genetic algorithm and tabu search (HGA-TS) is presented for solution of the problem. The genetic 
algorithm is based on random-key (RK) applied to sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves as a diversification generation within the 
CETS. Effectiveness of the heuristic is tested on benchmark problems available on the Internet and 
compared with a leading algorithm based on GRASP.   
Copyright © 2022 IFAC 
Keywords: Uncapacitated location problem,  p-Median; Tabu search; Genetic random-key; GRASP. 
1. INTRODUCTION 
In this paper we are concerned with the uncapacitated location 
problem (ULP). In that, there is a set of clients I={1,…,m}, to 
be served by a set of facilities J={1,…,n}. Let 𝑐𝑐𝑖𝑖𝑖𝑖 be the cost if 
client i is served by facility j, 𝑓𝑓𝑖𝑖 fixed cost of opening a facility 
j, and p the maximum number of sites that can be opened. Let 
�
�𝑥𝑖𝑖𝑖𝑖 be 1 if client i can be served by one and only one facility j, 
0 otherwise, and 𝑦𝑦𝑖𝑖 equal 1 if facility j is opened, 0 otherwise. 
An integer programming formulation of the ULP can be stated 
as follows (Galvão & Raggi, 1989).   
Min 𝑍𝑍=∑ ∑ 𝑥𝑥𝑖𝑖𝑖𝑖𝑐𝑐𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1
 𝑚𝑚
 𝑖𝑖=1 +∑ 𝑦𝑦𝑖𝑖𝑓𝑓𝑖𝑖 𝑛𝑛
 𝑖𝑖=1               (1) 
∑ 𝑥𝑥𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 =1, i=1,…,m,          (2) 
∑ 𝑦𝑦𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 ≤𝑝𝑝       (3) 
�
�𝑥𝑖𝑖𝑖𝑖≤𝑦𝑦𝑖𝑖, i=1,…m, j=1,…,n,     (4) 
�
�𝑥𝑖𝑖𝑖𝑖,𝑦𝑦𝑖𝑖∈{0,1}, i=1,…,m, j=1,…,n    (5) 
Constraints (2) ensure each client is served by one and only 
one  facility, constraint (3) ensures at most p facilities can be 
opened, and constraints (4) ensure a client can be served by a 
facility only if the facility is opened. Constraints (5) are binary 
variables. The objective function minimizes total costs of 
serving clients and opening facilities.   
If in constraint (3), p is an unknown variable, the problem 
known as uncapacitated facility location problem (UFLP), and 
when p is known and inequality is replaced with equality, it is 
the p-Median problem. The ULP was first introduced in 
(Galvão & Raggi, 1989) where the author gave an optimal 
solution procedure. The ULP is known to be NP-hard in the 
strong sense, (Garey & Johnson, 1979). 
The literature suggests that there are several authors who have 
developed meta-heuristics including tabu search, and genetic 
algorithm for UFLP and p-Median problems, however, none 
apply the meta-heuristic, so called ‘adaptive critical event tabu 
search’ (CETS) to these problems. Furthermore, except for 
(Wang & Alidaee, 2018), there is no heuristic available for the 
general ULP. Thus, there is a need for developing heuristics to 
solve large-scale ULP.   
Our main contribution in this paper is to develop a hybrid 
algorithm based on genetic random-key and tabu search, 
(HGA-TS) to solve very-large-scale ULP in short CPU time. 
The genetic algorithm is based on random-key (RK) applied to 
sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves 
as an effective diversification generation within the CETS. 
Embedding genetic RK within TS as a diversification 
procedure in this paper is also new. Our algorithm quickly 
solves several p-Median problems to reach solution of ULP. 
This is consistent with conclusion in (Galvão & Raggi, 1989) 
that the generalization, i.e., restriction on number of facilities, 
embedded in the formulation of p-Median does not 
significantly reduce the efficiency of the solution method. The 
procedure in this article can easily be applied to variety of 
discrete optimization problems. Effectiveness of the procedure 
is tested by applying the HGA-TS to the benchmark problems 
available on the Internet.  
2. HYBRID GA-TS HEURISTIC 
We first develop a tabu search (TS) based on critical event 
memory, known as critical event tabu search (CETS) with a 
strong diversification component based on GA random-key, 
(HGS-TS). The CETS was introduced in (Glover & 
Kochenberger, 1996; Glover et al., 1998) and has been applied 
with considerable success to various combinatorial problems.  
Two fundamentally important components of any meta
heuristic, in particular TS, is: (1) a diversification generator; 
and (2) a ‘simple’ improvement procedure.  The diversification 
component tries to surf into diverse solution space. In most 
meta-heuristics, such as TS, it is necessary to have some 
‘simple’ improvement procedure. For example, assume in 
ULP a set of facilities, V J  , is chosen to serve all clients. 
We can consider three possible simple improvement ‘moves’: 
(i) exchange position of two facilities, one from V and one 
from the set J\V; (ii) move one of the facilities from the set V 
to the set J\V; (iii) add one facility from J\V to the set V, if 
|V|+1 is less than or equal to p. 
 
Uncapacitated (Facility) Location Problem: A Hybrid Genetic-Tabu Search 
Approach 
Bahram Alidaee*. Haibo Wang.**  
*University of Mississippi, School of Business Administration, University, MS 38655, 
USA (Tel: 662-715-1614; e-mail: balidaee@bus.olemiss.edu). 
**Texas A&M International University, A.R. Sánchez Jr. School of Business, Laredo, TX 78041 
USA (Tel:956-326-2503; e-mail:hwang@tamiu.edu) 
Abstract: In this paper the uncapacitated location problem (ULP) with restriction on number of facilities 
is considered. The ULP generalizes the uncapacitated facility location problem and the p-Median problems. 
A hybrid genetic algorithm and tabu search (HGA-TS) is presented for solution of the problem. The genetic 
algorithm is based on random-key (RK) applied to sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves as a diversification generation within the 
CETS. Effectiveness of the heuristic is tested on benchmark problems available on the Internet and 
compared with a leading algorithm based on GRASP.   
Copyright © 2022 IFAC 
Keywords: Uncapacitated location problem,  p-Median; Tabu search; Genetic random-key; GRASP. 
1. INTRODUCTION 
In this paper we are concerned with the uncapacitated location 
problem (ULP). In that, there is a set of clients I={1,…,m}, to 
be served by a set of facilities J={1,…,n}. Let 𝑐𝑐𝑖𝑖𝑖𝑖 be the cost if 
client i is served by facility j, 𝑓𝑓𝑖𝑖 fixed cost of opening a facility 
j, and p the maximum number of sites that can be opened. Let 
�
�𝑥𝑖𝑖𝑖𝑖 be 1 if client i can be served by one and only one facility j, 
0 otherwise, and 𝑦𝑦𝑖𝑖 equal 1 if facility j is opened, 0 otherwise. 
An integer programming formulation of the ULP can be stated 
as follows (Galvão & Raggi, 1989).   
Min 𝑍𝑍=∑ ∑ 𝑥𝑥𝑖𝑖𝑖𝑖𝑐𝑐𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1
 𝑚𝑚
 𝑖𝑖=1 +∑ 𝑦𝑦𝑖𝑖𝑓𝑓𝑖𝑖 𝑛𝑛
 𝑖𝑖=1               (1) 
∑ 𝑥𝑥𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 =1, i=1,…,m,          (2) 
∑ 𝑦𝑦𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 ≤𝑝𝑝       (3) 
�
�𝑥𝑖𝑖𝑖𝑖≤𝑦𝑦𝑖𝑖, i=1,…m, j=1,…,n,     (4) 
�
�𝑥𝑖𝑖𝑖𝑖,𝑦𝑦𝑖𝑖∈{0,1}, i=1,…,m, j=1,…,n    (5) 
Constraints (2) ensure each client is served by one and only 
one  facility, constraint (3) ensures at most p facilities can be 
opened, and constraints (4) ensure a client can be served by a 
facility only if the facility is opened. Constraints (5) are binary 
variables. The objective function minimizes total costs of 
serving clients and opening facilities.   
If in constraint (3), p is an unknown variable, the problem 
known as uncapacitated facility location problem (UFLP), and 
when p is known and inequality is replaced with equality, it is 
the p-Median problem. The ULP was first introduced in 
(Galvão & Raggi, 1989) where the author gave an optimal 
solution procedure. The ULP is known to be NP-hard in the 
strong sense, (Garey & Johnson, 1979). 
The literature suggests that there are several authors who have 
developed meta-heuristics including tabu search, and genetic 
algorithm for UFLP and p-Median problems, however, none 
apply the meta-heuristic, so called ‘adaptive critical event tabu 
search’ (CETS) to these problems. Furthermore, except for 
(Wang & Alidaee, 2018), there is no heuristic available for the 
general ULP. Thus, there is a need for developing heuristics to 
solve large-scale ULP.   
Our main contribution in this paper is to develop a hybrid 
algorithm based on genetic random-key and tabu search, 
(HGA-TS) to solve very-large-scale ULP in short CPU time. 
The genetic algorithm is based on random-key (RK) applied to 
sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves 
as an effective diversification generation within the CETS. 
Embedding genetic RK within TS as a diversification 
procedure in this paper is also new. Our algorithm quickly 
solves several p-Median problems to reach solution of ULP. 
This is consistent with conclusion in (Galvão & Raggi, 1989) 
that the generalization, i.e., restriction on number of facilities, 
embedded in the formulation of p-Median does not 
significantly reduce the efficiency of the solution method. The 
procedure in this article can easily be applied to variety of 
discrete optimization problems. Effectiveness of the procedure 
is tested by applying the HGA-TS to the benchmark problems 
available on the Internet.  
2. HYBRID GA-TS HEURISTIC 
We first develop a tabu search (TS) based on critical event 
memory, known as critical event tabu search (CETS) with a 
strong diversification component based on GA random-key, 
(HGS-TS). The CETS was introduced in (Glover & 
Kochenberger, 1996; Glover et al., 1998) and has been applied 
with considerable success to various combinatorial problems.  
Two fundamentally important components of any meta
heuristic, in particular TS, is: (1) a diversification generator; 
and (2) a ‘simple’ improvement procedure.  The diversification 
component tries to surf into diverse solution space. In most 
meta-heuristics, such as TS, it is necessary to have some 
‘simple’ improvement procedure. For example, assume in 
ULP a set of facilities, V J  , is chosen to serve all clients. 
We can consider three possible simple improvement ‘moves’: 
(i) exchange position of two facilities, one from V and one 
from the set J\V; (ii) move one of the facilities from the set V 
to the set J\V; (iii) add one facility from J\V to the set V, if 
|V|+1 is less than or equal to p. 
 
Uncapacitated (Facility) Location Problem: A Hybrid Genetic-Tabu Search 
Approach 
Bahram Alidaee*. Haibo Wang.**  
*University of Mississippi, School of Business Administration, University, MS 38655, 
USA (Tel: 662-715-1614; e-mail: balidaee@bus.olemiss.edu). 
**Texas A&M International University, A.R. Sánchez Jr. School of Business, Laredo, TX 78041 
USA (Tel:956-326-2503; e-mail:hwang@tamiu.edu) 
Abstract: In this paper the uncapacitated location problem (ULP) with restriction on number of facilities 
is considered. The ULP generalizes the uncapacitated facility location problem and the p-Median problems. 
A hybrid genetic algorithm and tabu search (HGA-TS) is presented for solution of the problem. The genetic 
algorithm is based on random-key (RK) applied to sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves as a diversification generation within the 
CETS. Effectiveness of the heuristic is tested on benchmark problems available on the Internet and 
compared with a leading algorithm based on GRASP.   
Copyright © 2022 IFAC 
Keywords: Uncapacitated location problem,  p-Median; Tabu search; Genetic random-key; GRASP. 
1. INTRODUCTION 
In this paper we are concerned with the uncapacitated location 
problem (ULP). In that, there is a set of clients I={1,…,m}, to 
be served by a set of facilities J={1,…,n}. Let 𝑐𝑐𝑖𝑖𝑖𝑖 be the cost if 
client i is served by facility j, 𝑓𝑓𝑖𝑖 fixed cost of opening a facility 
j, and p the maximum number of sites that can be opened. Let 
�
�𝑥𝑖𝑖𝑖𝑖 be 1 if client i can be served by one and only one facility j, 
0 otherwise, and 𝑦𝑦𝑖𝑖 equal 1 if facility j is opened, 0 otherwise. 
An integer programming formulation of the ULP can be stated 
as follows (Galvão & Raggi, 1989).   
Min 𝑍𝑍=∑ ∑ 𝑥𝑥𝑖𝑖𝑖𝑖𝑐𝑐𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1
 𝑚𝑚
 𝑖𝑖=1 +∑ 𝑦𝑦𝑖𝑖𝑓𝑓𝑖𝑖 𝑛𝑛
 𝑖𝑖=1               (1) 
∑ 𝑥𝑥𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 =1, i=1,…,m,          (2) 
∑ 𝑦𝑦𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 ≤𝑝𝑝       (3) 
�
�𝑥𝑖𝑖𝑖𝑖≤𝑦𝑦𝑖𝑖, i=1,…m, j=1,…,n,     (4) 
�
�𝑥𝑖𝑖𝑖𝑖,𝑦𝑦𝑖𝑖∈{0,1}, i=1,…,m, j=1,…,n    (5) 
Constraints (2) ensure each client is served by one and only 
one  facility, constraint (3) ensures at most p facilities can be 
opened, and constraints (4) ensure a client can be served by a 
facility only if the facility is opened. Constraints (5) are binary 
variables. The objective function minimizes total costs of 
serving clients and opening facilities.   
If in constraint (3), p is an unknown variable, the problem 
known as uncapacitated facility location problem (UFLP), and 
when p is known and inequality is replaced with equality, it is 
the p-Median problem. The ULP was first introduced in 
(Galvão & Raggi, 1989) where the author gave an optimal 
solution procedure. The ULP is known to be NP-hard in the 
strong sense, (Garey & Johnson, 1979). 
The literature suggests that there are several authors who have 
developed meta-heuristics including tabu search, and genetic 
algorithm for UFLP and p-Median problems, however, none 
apply the meta-heuristic, so called ‘adaptive critical event tabu 
search’ (CETS) to these problems. Furthermore, except for 
(Wang & Alidaee, 2018), there is no heuristic available for the 
general ULP. Thus, there is a need for developing heuristics to 
solve large-scale ULP.   
Our main contribution in this paper is to develop a hybrid 
algorithm based on genetic random-key and tabu search, 
(HGA-TS) to solve very-large-scale ULP in short CPU time. 
The genetic algorithm is based on random-key (RK) applied to 
sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves 
as an effective diversification generation within the CETS. 
Embedding genetic RK within TS as a diversification 
procedure in this paper is also new. Our algorithm quickly 
solves several p-Median problems to reach solution of ULP. 
This is consistent with conclusion in (Galvão & Raggi, 1989) 
that the generalization, i.e., restriction on number of facilities, 
embedded in the formulation of p-Median does not 
significantly reduce the efficiency of the solution method. The 
procedure in this article can easily be applied to variety of 
discrete optimization problems. Effectiveness of the procedure 
is tested by applying the HGA-TS to the benchmark problems 
available on the Internet.  
2. HYBRID GA-TS HEURISTIC 
We first develop a tabu search (TS) based on critical event 
memory, known as critical event tabu search (CETS) with a 
strong diversification component based on GA random-key, 
(HGS-TS). The CETS was introduced in (Glover & 
Kochenberger, 1996; Glover et al., 1998) and has been applied 
with considerable success to various combinatorial problems.  
Two fundamentally important components of any meta
heuristic, in particular TS, is: (1) a diversification generator; 
and (2) a ‘simple’ improvement procedure.  The diversification 
component tries to surf into diverse solution space. In most 
meta-heuristics, such as TS, it is necessary to have some 
‘simple’ improvement procedure. For example, assume in 
ULP a set of facilities, V J  , is chosen to serve all clients. 
We can consider three possible simple improvement ‘moves’: 
(i) exchange position of two facilities, one from V and one 
from the set J\V; (ii) move one of the facilities from the set V 
to the set J\V; (iii) add one facility from J\V to the set V, if 
|V|+1 is less than or equal to p. 
 
 
Uncapacitated (Facility) Location Problem: A Hybrid Genetic-Tabu Search 
Approach 
Bahram Alidaee*. Haibo Wang.**  
*University of Mississippi, School of Business Administration, University, MS 38655, 
USA (Tel: 662-715-1614; e-mail: balidaee@bus.olemiss.edu). 
**Texas A&M International University, A.R. Sánchez Jr. School of Business, Laredo, TX 78041 
USA (Tel:956-326-2503; e-mail:hwang@tamiu.edu) 
Abstract: In this paper the uncapacitated location problem (ULP) with restriction on number of facilities 
is considered. The ULP generalizes the uncapacitated facility location problem and the p-Median problems. 
A hybrid genetic algorithm and tabu search (HGA-TS) is presented for solution of the problem. The genetic 
algorithm is based on random-key (RK) applied to sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves as a diversification generation within the 
CETS. Effectiveness of the heuristic is tested on benchmark problems available on the Internet and 
compared with a leading algorithm based on GRASP.   
Copyright © 2022 IFAC 
Keywords: Uncapacitated location problem,  p-Median; Tabu search; Genetic random-key; GRASP. 
1. INTRODUCTION 
In this paper we are concerned with the uncapacitated location 
problem (ULP). In that, there is a set of clients I={1,…,m}, to 
be served by a set of facilities J={1,…,n}. Let 𝑐𝑐𝑖𝑖𝑖𝑖 be the cost if 
client i is served by facility j, 𝑓𝑓𝑖𝑖 fixed cost of opening a facility 
j, and p the maximum number of sites that can be opened. Let 
�
�𝑥𝑖𝑖𝑖𝑖 be 1 if client i can be served by one and only one facility j, 
0 otherwise, and 𝑦𝑦𝑖𝑖 equal 1 if facility j is opened, 0 otherwise. 
An integer programming formulation of the ULP can be stated 
as follows (Galvão & Raggi, 1989).   
Min 𝑍𝑍=∑ ∑ 𝑥𝑥𝑖𝑖𝑖𝑖𝑐𝑐𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1
 𝑚𝑚
 𝑖𝑖=1 +∑ 𝑦𝑦𝑖𝑖𝑓𝑓𝑖𝑖 𝑛𝑛
 𝑖𝑖=1               (1) 
∑ 𝑥𝑥𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 =1, i=1,…,m,          (2) 
∑ 𝑦𝑦𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 ≤𝑝𝑝       (3) 
�
�𝑥𝑖𝑖𝑖𝑖≤𝑦𝑦𝑖𝑖, i=1,…m, j=1,…,n,     (4) 
�
�𝑥𝑖𝑖𝑖𝑖,𝑦𝑦𝑖𝑖∈{0,1}, i=1,…,m, j=1,…,n    (5) 
Constraints (2) ensure each client is served by one and only 
one  facility, constraint (3) ensures at most p facilities can be 
opened, and constraints (4) ensure a client can be served by a 
facility only if the facility is opened. Constraints (5) are binary 
variables. The objective function minimizes total costs of 
serving clients and opening facilities.   
If in constraint (3), p is an unknown variable, the problem 
known as uncapacitated facility location problem (UFLP), and 
when p is known and inequality is replaced with equality, it is 
the p-Median problem. The ULP was first introduced in 
(Galvão & Raggi, 1989) where the author gave an optimal 
solution procedure. The ULP is known to be NP-hard in the 
strong sense, (Garey & Johnson, 1979). 
The literature suggests that there are several authors who have 
developed meta-heuristics including tabu search, and genetic 
algorithm for UFLP and p-Median problems, however, none 
apply the meta-heuristic, so called ‘adaptive critical event tabu 
search’ (CETS) to these problems. Furthermore, except for 
(Wang & Alidaee, 2018), there is no heuristic available for the 
general ULP. Thus, there is a need for developing heuristics to 
solve large-scale ULP.   
Our main contribution in this paper is to develop a hybrid 
algorithm based on genetic random-key and tabu search, 
(HGA-TS) to solve very-large-scale ULP in short CPU time. 
The genetic algorithm is based on random-key (RK) applied to 
sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves 
as an effective diversification generation within the CETS. 
Embedding genetic RK within TS as a diversification 
procedure in this paper is also new. Our algorithm quickly 
solves several p-Median problems to reach solution of ULP. 
This is consistent with conclusion in (Galvão & Raggi, 1989) 
that the generalization, i.e., restriction on number of facilities, 
embedded in the formulation of p-Median does not 
significantly reduce the efficiency of the solution method. The 
procedure in this article can easily be applied to variety of 
discrete optimization problems. Effectiveness of the procedure 
is tested by applying the HGA-TS to the benchmark problems 
available on the Internet.  
2. HYBRID GA-TS HEURISTIC 
We first develop a tabu search (TS) based on critical event 
memory, known as critical event tabu search (CETS) with a 
strong diversification component based on GA random-key, 
(HGS-TS). The CETS was introduced in (Glover & 
Kochenberger, 1996; Glover et al., 1998) and has been applied 
with considerable success to various combinatorial problems.  
Two fundamentally important components of any meta
heuristic, in particular TS, is: (1) a diversification generator; 
and (2) a ‘simple’ improvement procedure.  The diversification 
component tries to surf into diverse solution space. In most 
meta-heuristics, such as TS, it is necessary to have some 
‘simple’ improvement procedure. For example, assume in 
ULP a set of facilities, V J  , is chosen to serve all clients. 
We can consider three possible simple improvement ‘moves’: 
(i) exchange position of two facilities, one from V and one 
from the set J\V; (ii) move one of the facilities from the set V 
to the set J\V; (iii) add one facility from J\V to the set V, if 
|V|+1 is less than or equal to p. 
 
 
Uncapacitated (Facility) Location Problem: A Hybrid Genetic-Tabu Search 
Approach 
Bahram Alidaee*. Haibo Wang.**  
*University of Mississippi, School of Business Administration, University, MS 38655, 
USA (Tel: 662-715-1614; e-mail: balidaee@bus.olemiss.edu). 
**Texas A&M International University, A.R. Sánchez Jr. School of Business, Laredo, TX 78041 
USA (Tel:956-326-2503; e-mail:hwang@tamiu.edu) 
Abstract: In this paper the uncapacitated location problem (ULP) with restriction on number of facilities 
is considered. The ULP generalizes the uncapacitated facility location problem and the p-Median problems. 
A hybrid genetic algorithm and tabu search (HGA-TS) is presented for solution of the problem. The genetic 
algorithm is based on random-key (RK) applied to sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves as a diversification generation within the 
CETS. Effectiveness of the heuristic is tested on benchmark problems available on the Internet and 
compared with a leading algorithm based on GRASP.   
Copyright © 2022 IFAC 
Keywords: Uncapacitated location problem,  p-Median; Tabu search; Genetic random-key; GRASP. 
1. INTRODUCTION 
In this paper we are concerned with the uncapacitated location 
problem (ULP). In that, there is a set of clients I={1,…,m}, to 
be served by a set of facilities J={1,…,n}. Let 𝑐𝑐𝑖𝑖𝑖𝑖 be the cost if 
client i is served by facility j, 𝑓𝑓𝑖𝑖 fixed cost of opening a facility 
j, and p the maximum number of sites that can be opened. Let 
�
�𝑥𝑖𝑖𝑖𝑖 be 1 if client i can be served by one and only one facility j, 
0 otherwise, and 𝑦𝑦𝑖𝑖 equal 1 if facility j is opened, 0 otherwise. 
An integer programming formulation of the ULP can be stated 
as follows (Galvão & Raggi, 1989).   
Min 𝑍𝑍=∑ ∑ 𝑥𝑥𝑖𝑖𝑖𝑖𝑐𝑐𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1
 𝑚𝑚
 𝑖𝑖=1 +∑ 𝑦𝑦𝑖𝑖𝑓𝑓𝑖𝑖 𝑛𝑛
 𝑖𝑖=1               (1) 
∑ 𝑥𝑥𝑖𝑖𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 =1, i=1,…,m,          (2) 
∑ 𝑦𝑦𝑖𝑖 𝑛𝑛
 𝑖𝑖=1 ≤𝑝𝑝       (3) 
�
�𝑥𝑖𝑖𝑖𝑖≤𝑦𝑦𝑖𝑖, i=1,…m, j=1,…,n,     (4) 
�
�𝑥𝑖𝑖𝑖𝑖,𝑦𝑦𝑖𝑖∈{0,1}, i=1,…,m, j=1,…,n    (5) 
Constraints (2) ensure each client is served by one and only 
one  facility, constraint (3) ensures at most p facilities can be 
opened, and constraints (4) ensure a client can be served by a 
facility only if the facility is opened. Constraints (5) are binary 
variables. The objective function minimizes total costs of 
serving clients and opening facilities.   
If in constraint (3), p is an unknown variable, the problem 
known as uncapacitated facility location problem (UFLP), and 
when p is known and inequality is replaced with equality, it is 
the p-Median problem. The ULP was first introduced in 
(Galvão & Raggi, 1989) where the author gave an optimal 
solution procedure. The ULP is known to be NP-hard in the 
strong sense, (Garey & Johnson, 1979). 
The literature suggests that there are several authors who have 
developed meta-heuristics including tabu search, and genetic 
algorithm for UFLP and p-Median problems, however, none 
apply the meta-heuristic, so called ‘adaptive critical event tabu 
search’ (CETS) to these problems. Furthermore, except for 
(Wang & Alidaee, 2018), there is no heuristic available for the 
general ULP. Thus, there is a need for developing heuristics to 
solve large-scale ULP.   
Our main contribution in this paper is to develop a hybrid 
algorithm based on genetic random-key and tabu search, 
(HGA-TS) to solve very-large-scale ULP in short CPU time. 
The genetic algorithm is based on random-key (RK) applied to 
sequencing problems. The tabu search (TS) is based on 
adaptive critical event TS (CETS). The RK component serves 
as an effective diversification generation within the CETS. 
Embedding genetic RK within TS as a diversification 
procedure in this paper is also new. Our algorithm quickly 
solves several p-Median problems to reach solution of ULP. 
This is consistent with conclusion in (Galvão & Raggi, 1989) 
that the generalization, i.e., restriction on number of facilities, 
embedded in the formulation of p-Median does not 
significantly reduce the efficiency of the solution method. The 
procedure in this article can easily be applied to variety of 
discrete optimization problems. Effectiveness of the procedure 
is tested by applying the HGA-TS to the benchmark problems 
available on the Internet.  
2. HYBRID GA-TS HEURISTIC 
We first develop a tabu search (TS) based on critical event 
memory, known as critical event tabu search (CETS) with a 
strong diversification component based on GA random-key, 
(HGS-TS). The CETS was introduced in (Glover & 
Kochenberger, 1996; Glover et al., 1998) and has been applied 
with considerable success to various combinatorial problems.  
Two fundamentally important components of any meta
heuristic, in particular TS, is: (1) a diversification generator; 
and (2) a ‘simple’ improvement procedure.  The diversification 
component tries to surf into diverse solution space. In most 
meta-heuristics, such as TS, it is necessary to have some 
‘simple’ improvement procedure. For example, assume in 
ULP a set of facilities, V J  , is chosen to serve all clients. 
We can consider three possible simple improvement ‘moves’: 
(i) exchange position of two facilities, one from V and one 
from the set J\V; (ii) move one of the facilities from the set V 
to the set J\V; (iii) add one facility from J\V to the set V, if 
|V|+1 is less than or equal to p. 
1620 
Bahram Alidaee  et al. / IFAC PapersOnLine 55-10 (2022) 1619–1624
 Except for diversification procedures introduced in (Alidaee et 
al., 2017; Alidaee & Wang, 2017; Wang & Alidaee, 2018), all 
published diversification procedures cleverly manipulate the 
solution at hand, (see, (Glover & Hao, 2019), for recent 
discussion). However, our diversification procedure in this 
paper is fundamentally different from those of manipulating 
solutions. Our diversification procedure in this paper works on 
the ‘sequence’ of steps taken to implement the moves 
explained in (i)-(iii). In general, in many meta-heuristics, often 
in TS, the steps taken for the next improvement is the next best 
improving move; and in many other cases, instead of the best 
improving move it is the first improving move considered. In 
latter case, it is necessary to have a sequence to check the next 
improving move. Except in (Alidaee et al., 2017; Alidaee & 
Wang, 2017; Wang & Alidaee, 2018), in all published research 
papers, the first improving move is implemented along a pre
specified sequence, usually along sequence of the natural 
numbers. However, in the mentioned articles, after each 
improvement step, the authors applied several n-Opt strategies 
to create new sequences to implement the next move. 
Here, we use a random-key procedure as a mechanism to 
choose the next sequence to take the next improving move. 
Random-key originally was introduced by (Bean, 1994), as a 
component of GA in order to solve sequencing problems. Here 
we adopt the idea for the 0-1 optimization problem. Note that, 
in a basic GA process, we need population, selection of 
parents, mutations and crossover operator. These issues will 
be explained later when we introduce our algorithms. We 
emphasize that, our implementation can be considered a new 
way of implementing the GA to any 0-1 programming.  
Our approach here is new for ULP and can be applied to 
variety of combinatorial optimization problems. Heuristic 1 
below shows steps of a pseudocode for a simple 2-exchange 
local improvement search for ULP that will be used within 
CETS. In that, we apply the genetic RK after each 
improvement step, in step 11. The following definitions are 
used in the Heuristic 1 and 2. Given a subset V J  with |V| 
at most equal to p, evaluate value of objective function when 
facilities in V serves all clients in I, and define H1-H3, and H 
as follows. We also define four matrices, MS, S, MG, and G. 
H1(g,h): Amount of change to the objective function if an 
element g in V is moved to J\V and an element h in J\V is 
moved to V. 
H2(g): Value of change to the objective function if an element 
g of V is moved to J\V. 
H3(h): Value of change to the objective function if an element 
h of J\V is moved to V and |V|+1 is at most equal to p. 
H=Min{H1(g,h),H2(g),H3(h)}. 
MS, a matrix with ks rows and |V| columns with all elements 
randomly picked from [0,1]. Each row is ordered from smallest 
to the largest. 
S, a matrix with ks rows and |V| columns. Each row of S is 
numbered by ‘active’ facilities who presently serve all clients, 
and ordered according to the corresponding order of rows in 
matrix MS. 
MG, a matrix with kg rows and |J\V| columns with elements 
randomly chosen from [0,1]. Each row is ordered from 
smallest to the largest. 
G, a matrix with kg rows and |J\V| columns. Each row of G is 
numbered by ‘non-active’ facilities in J\V, and ordered 
according to corresponding order of rows in matrix MG. 
 
(Heuristic 1) Simple 2-Exchange Local Search with 
Embedded Genetic Random-key: 
Initialize: I={1,…,m}, J={1,…,n}, p upper bound for number 
of facilities to be chosen, V a randomly chosen subset of J with 
number of elements at most equal to p, Z* value of objective 
function when facilities in V serves all clients in I, S a matrix 
with ks rows and |V| columns of sequences of elements in V, 
(S(l,j) is the j-th element in the row l), and G a matrix of with 
kg rows and |J\V| columns of sequences of elements in J\V 
(G(k,i) is the i-th element in the row k). 
1    Start 
2        Randomly choose l from {1,…,ks} 
3        For j=1,|V| 
4            g=S(l,j) 
5            Calculate H2(g) 
6            Randomly choose k from {1,…,kg} 
7            For i=1,|J\V| 
                  h=G(k,i) 
                  Calculate H1(g,h),H3(h), and 
 H=Min{H1(g,h),H2(g),H3(h)} 
                  If H<0 go to 11 
8            End For 
9        End For 
10      Stop (the process is complete) 
11      Update: V, J\V, Z*, and Call RandKey(.) 
12  Go to Start 
 
Here, if the problem to be solved is p-Median, we must have 
|V|=p. In Step 2 one sequence from active facilities, V, is 
chosen and in Step 6 one from non-active facilities, J\V. One 
of the operations (i)-(iii) is implemented in Steps 5 and 7.  If 
an exchange in operations (i)-(iii) is improving it is 
implemented in Step 11 where updates occur. The process 
stops in Step 10 when there are no improving exchange 
operations. Sequences S, G, MS, and MG are updated using 
genetic RK, by calling the subroutine RandKey(.). 
To explain the process of RandKey(.), we start with 
implementation of a basic GA process. In any basic GA, we 
need population, selection of parents, mutations, and 
crossover operator. In the GA language it is called selection 
of parents. Furthermore, mutation and crossover operators are 
implemented as follows. As the search progresses, once a 
while we randomly choose two rows of matrix MS, and 
exchange elements of the two rows with 50% chance. We then 
order each of the rows in ascending order and accordingly the 
two rows in matrix S, to create two new sequences of elements 
of V. Similar process is implemented on MG and G. As the 
search continuous this creates more diverse set of sequences, 
and potentially explores larger areas of solution space. This is 
the way RK in GA selects parents from solution space to mate 
the crossover operator when applied to sequencing problems. 
Note that in the general case for ULP the number of elements 
in V and J\V may change as search continuous thus accordingly 
columns and sizes of matrices MS, S, MG, and G need to be 
modified.  In this process, although we are dealing with 0-1 
Bahram Alidaee  et al. / IFAC PapersOnLine 55-10 (2022) 1619–1624 
1621
 in the sets V and J\V to explore the solution space. This can be 
considered an alternative implementation of GA for 0-1 
programs. Also note that the population sizes, i.e., sizes of ks 
and kg can affect the quality of final solution, illustrated later 
in the computational experiments.  Heuristic 1 is used as an 
improvement process within the CETS to create HGA-TS. A 
pseudocode of HGA-TS for ULP is given in Heuristic 2. 
 
(Heuristic 2) Hybrid Critical Event Tabu Search with 
Genetic Random-key (HGA-TS): 
Initialize: I={1,…,m}, J={1,…,n}, p an upper bound for 
number of facilities to be chosen, V a randomly chosen subset 
of J with number of elements at most equal to p, Z objective 
function when facilities in V serves all clients in I, Z*=Z as 
best solution found so far, S a matrix with ks rows and |V| 
columns of sequences of elements in V, (S(l,j) is the j-th 
element in the row l), and G a matrix with kg rows and |J\V| 
columns sequences of elements in J\V (G(k,i) is the i-th 
element in the row k), a vector Tabu_V(.) of |V| elements, and 
a vector Tabu_J\V(.) of |J\V| elements for tabu status, an 
integer value for tabu tenure Tab_ten, number of total 
iterations MAXCOUNT, and two integer parameters n2>n1>0. 
1    For COUNT=1,MAXCOUNT 
2        For L=n1,n2 
3            Start 
4            Randomly choose l from {1,…,ks} 
5            For j=1,|V| 
6                g=S(l,j) 
7                Calculate H2(g) 
8                Randomly choose k from {1,…,kg} 
9                For i=1,|J\V| 
10                  h=G(k,i) 
11                  Calculate H1(g,h),H3(h), and   
                      H=Min{H1(g,h),H2(g),H3(h)} 
12                  If H<0 Then 
13                      Evaluate Z 
14                      If (((Tabu_V(g)=0).and.(Tabu_J\V(h)=0))  
                             .or.(Z<Z*)) Then 
15                          Update: V, J\V, Z*, Tabu_V, Tabu_J\V,  
                                  and Call RandKey(.) 
16                          Go to Start 
17                      End If 
18                  End If 
19              End For 
20          End For 
21          Call RandVarChange(.) 
22      End For 
23  End For 
 
Steps 3-20 is implementation of the Heuristic 1 with inclusion 
of tabu structure in Steps 14-15. Here, in the TS we use short 
term memory, so called ‘recency’, in Step 15, but we do not 
use long term, ‘frequency’ memory as some TS procedures do. 
We also use a simple aspiration criterion in the TS, if the 
objective value of a new solution is strictly better than the best
known solution found so far, Z*, we override the tabu status, 
Step 14. In the Step 15, the improvement step and update of 
sets V, J\V, tabu status are implemented. In this step, 
subroutine RandKeys(.) is called to implement genetic RK, 
updating MS, MG, and accordingly sequences S and G, as 
explained earlier. When there are no possible improving 
moves, then in Step 21 we randomly change elements of V and 
J\V to possibly get into other areas of solution space, 
subroutine RandVarChange(.) does this. In that, we randomly 
pick an integer b from [n1, L], L changes from n1 to n2, and 
randomly move b elements from V to J\V and vice versa. In 
that, we potentially are moving the search process to a more 
diverse area of solution space. This step is consistent with the 
original variant of critical event tabu search (Glover & 
Kochenberger, 1996; Glover et al., 1998). However, their 
procedures are more structured than ours. Steps 2-22 is one 
cycle of implementation of CETS that is repeated 
MAXCOUNT times.  
The HGA-TS is written for the general ULP, however, it can 
easily be modified for special cases p-Median and UFLP. In 
ULP value of p is given and optimal number of facilities, p*, 
needed to be found. Clearly an alternative way to solve the 
ULP is to start with P=p and reduce its value one at a time to 
p-1, p-2,…, and repeatedly solve several p-Median problems. 
In fact, in more challenging problems our experiments showed 
this process was more efficient compared to directly solving 
the ULP. 
3. COMPUTATIONAL EXPERIMENT 
To test the effectiveness of the heuristics we solved several 
sets of benchmark problems available on the Internet and 
compared with two leading heuristics, one for p-Median and 
one for UFLP (http://mauricio.resende.info/src/index.html), 
based on GRASP. We coded our heuristics using Fortran 
compiled by GNU gfortran compiler v4.7 on Intel Xeon Quad
core E5420 Harpertown processors.  
3.1 Benchmark Problems 
There is a set of 40 benchmark problems available in the OR
Library introduced by Beasley, and 6 sets of problems, 30 
problems in each set, available from the Yuri Kochetov 
benchmark library. There is a set of 15 problems available on 
the OR-Library, also introduced by Beasley. There are also 8 
sets of problems, 30 problems in each set, total of 240 
problems are available on the Yuri Kochetov library 
(http://www.math.nsc.ru/AP/benchmarks). Furthermore, there 
is a set of so-called M* problems introduced by (Kratica et al., 
2001), total of 22 problems. The M* set is available via Martin 
Hoefer benchmark library(http://resources.mpi-inf.mpg.de/ 
departments/d1/projects/benchmarks/UflLib/). The size of 
problem ranges from 10 to 100 of facilities and clients. 
All 475 problems were solved by Heuristics 1, 2, and the 
GRASP. Results from the simple 2-exchange Heuristic 1 shed 
light on the use of genetic RK as a strong diversification 
method. Results generated by Heuristic 2 provides information 
on strength of performance of the hybrid genetic-tabu search. 
Some of the problem sets were not match for our Heuristic 2. 
Due to saving space, we only report results for more 
challenging problems. Problems that we are not reporting here 
were solved to optimality within 0 CPU time by Heuristic2. 
3.2 Parameter Setting  
An important parameter for the RK diversification is 
population size, (values of ks and kg).  we set ks=kg throughout 
the search. Initial testing showed that for smaller values of ks 
(kg) 
1622 
Bahram Alidaee  et al. / IFAC PapersOnLine 55-10 (2022) 1619–1624
 values the second alternative worked only moderately better. 
Heuristic 1 with added tabu structure is embedded in Heuristic 
2.  
Representation of columns in the tables are as follows. ID 
(problem ID), OF Optimal (optimal objective function value), 
Time HGA-TS (time to reach best solution by HGA-TS), OF 
W/Seq.Impl (objective function value for Heuristic 1 when RK 
was implemented), Time W/Seq/Impl (time to reach best 
solution when RK was implemented in Heuristic 1), OF 
No/Seq.Impl (objective function value for Heuristic 1 when 
RK was not implemented), Time No/Seq/Impl (time to reach 
best solution when RK was not implemented in Heuristic 1), 
Time GRASP (time to reach best solution by GRASP), Time 
Repeated p-Median (total time for 9 p-Median problems 
solved), %Optimal Solution (percent of optimal solution by an 
algorithm for problems reported). 
3.3 Parameter Setting for Heuristic 1 
Important parameters for Heuristic 1 are: population sizes ks 
(kg), frequency of updating matrices S and G by mating two 
sequences.  
Population size: We changed the population size from 1 to 200 
and solved several challenging problems. We changed 
population size with increment 5 from 1 to 50, then with 
increment 20 up to 200. Results are shown in Tables 1-3. When 
genetic RK was implemented, 25 out of 40 p-Median problems 
were solved to optimality, in contrast when RK was not used 
only 13 problems were solved to optimality. In the case of 
UFLP, these values were 12 and 7 out of 15 problems, 
respectively.  Furthermore, CPU time to reach the best solution 
also improved considerably when genetic RK was 
implemented. For p-Median, average time to reach the best 
solution was 22.57 times smaller than when genetic RK was 
not used. For UFLP this value was 3.16 times smaller. 
Updating sequences (mating process): After each 
improvement implementation, Step 11, with probability 
1,2,3,4, and 5 percent we randomly chose two rows of matrix 
MS (MG) and performed mating process, i.e., each two 
elements were exchanged with 50% chance, and accordingly 
two new sequences were created in S (G). To balance between 
CPU time and quality solutions we found 2 and 3 percent were 
best, thus we decided to choose 2% in the final 
implementation. 
3.4 Parameter Setting for Heuristic 2 
Important parameters for Heuristic 2 are: population sizes ks 
(kg), frequencies of updating matrices S and G by mating two 
sequences, values of n1, n2 used in the subroutine 
RandVarChange(.), the value of tabu tenure (Teb_ten) and 
stopping criteria for the whole process (MAXCOUNT). In all 
such parameter settings, we set time to run Heuristic 2 in 0.5 
seconds. We randomly solved 5 problems from each set of 
UFLP in the OR-Library, GAP A-C, and M* problems.  
Population size: Similar to Heuristic 1 we set ks=kg=50. 
Updating sequences (mating process): Similar to Heuristic 1, 
this was set to 2%.  
Values of n1 and n2: Our initial experiment showed that values 
of n1 and n2 were very important. We used value of n1 to be 
equal to 1,3,6,10 and value of n2 to be larger than n1 and equal 
to 3,5,10,15. This creates 10 possible cases. In almost all 
problems solved we realized [n1,n2]=[1,5] was best. In fact, 
when n2 was chosen to be large, the value of L randomly 
chosen from [n1,n2], in Step 2, did not do well. Thus, in the 
final implementation we used n1=1, n2=5. 
 
Table 1. Results for p-median problems from or-library,hga-ts and 
grasp solved all problems to optimality 
 
 
Table 2. Results for uflp problems from or-library, hga-ts and 
grasp solved all problems to optimality 
 
 
Value of Tab_ten: We experimented Tab_ten equal to 5,10,15, 
20, 25, 30. For all problems solved smaller values were better. 
The best values were 5 and 10, however, with slightly better 
results for 5. Thus, we set Tab_ten=5 in the final 
implementation.  
ID OF 
Optimal
 Time (sec.) 
HGA-TS
 OF 
W/Seq.Impl
 Time (sec.) 
W/Seq.Impl
 OF 
No/Seq.Impl
 Time(sec.) 
No/Seq.Impl
 Time (sec.) 
Grasp
 pmed1.txt 5819 0 5819 0.000 5819 0 0.07
 pmed2.txt 4093 0 4093 0.000 4093 0.008 0.06
 pmed3.txt 4250 0.004 4250 0.000 4253 0.004 0.08
 pmed4.txt 3034 0.004 3046 0.004 3049 0.024 0.08
 pmed5.txt 1355 0.004 1355 0.003 1357 0.036 0.09
 pmed6.txt 7824 0 7824 0.000 7824 0.008 0.31
 pmed7.txt 5631 0.004 5631 0.007 5639 0.032 0.29
 pmed8.txt 4445 0.012 4445 0.007 4457 0.096 0.48
 pmed9.txt 2734 0.024 2738 0.011 2753 0.24 0.22
 pmed10.txt 1255 0.092 1255 0.022 1255 0.68 0.22
 pmed11.txt 7696 0.004 7696 0.007 7696 0.004 0.60
 pmed12.txt 6634 0.008 6634 0.011 6634 0.032 0.53
 pmed13.txt 4374 0.040 4374 0.029 4387 0.316 0.30
 pmed14.txt 2968 0.268 2970 0.047 2970 1.104 0.38
 pmed15.txt 1729 0.392 1735 0.113 1741 3.52 0.39
 pmed16.txt 8162 0.012 8162 0.004 8183 0.02 1.37
 pmed17.txt 6999 0.036 6999 0.027 7003 0.108 0.80
 pmed18.txt 4809 0.140 4811 0.131 4826 1.196 0.64
 pmed19.txt 2845 0.372 2855 0.196 2862 3.936 0.59
 pmed20.txt 1789 0.284 1791 0.345 1794 8.425 0.66
 pmed21.txt 9138 0.016 9138 0.011 9138 0.032 3.26
 pmed22.txt 8579 0.036 8579 0.025 8579 0.18 1.55
 pmed23.txt 4619 0.400 4619 0.233 4631 3.324 0.86
 pmed24.txt 2961 0.604 2961 0.480 2965 8.421 0.92
 pmed25.txt 1828 0.888 1834 0.585 1834 20.949 1.04
 pmed26.txt 9917 0.028 9917 0.011 9924 0.004 2.61
 pmed27.txt 8307 0.060 8307 0.036 8307 0.204 3.34
 pmed28.txt 4498 1.752 4507 0.360 4508 5.932 1.32
 pmed29.txt 3033 6.748 3040 0.658 3050 19.565 1.44
 pmed30.txt 1989 14.569 1995 1.542 2005 35.114 1.66
 pmed31.txt 10086 0.032 10086 0.015 10086 0.076 3.85
 pmed32.txt 9297 0.064 9297 0.065 9301 0.284 2.95
 pmed33.txt 4700 3.912 4702 0.738 4707 9.277 1.79
 pmed34.txt 3013 6.384 3017 1.007 3031 33.734 1.86
 pmed35.txt 10400 0.028 10400 0.022 10400 0.052 4.52
 pmed36.txt 9934 0.104 9934 0.091 9934 0.528 3.73
 pmed37.txt 5057 9.097 5060 0.955 5063 19.269 2.01
 pmed38.txt 11060 0.048 11060 0.036 11105 0.164 7.21
 pmed39.txt 9423 0.136 9423 0.149 9423 0.376 4.58
 pmed40.txt 5128 16.540 5133 1.382 5143 33.742 2.79
 Avg. 1.579 0.234 5.275 1.536
 Max. 16.540 1.542 35.114 7.210
 ID OF Optimal Time (sec.) 
HGA-TS
 OF 
W/Seq.Impl
 Time (sec.) 
W/Seq.Impl
 OF 
No/Seq.Impl
 Time(sec.) 
No/Seq.Impl
 Time (sec.) 
Grasp
 cap71.txt 932615.80 0.000 932615.80 0.000 938158.00 0.00 0.016
 cap72.txt 977799.40 0.000 977799.40 0.000 977799.40 0.00 0.000
 cap73.txt 1010641.00 0.000 1010641.00 0.000 1022916.44 0.00 0.000
 cap74.txt 1034977.00 0.000 1034977.00 0.000 1034977.00 0.00 0.000
 cap101.txt 796648.40 0.000 797508.75 0.000 803396.13 0.000 0.000
 cap102.txt 854704.20 0.000 854704.20 0.000 857942.56 0.000 0.000
 cap103.txt 893782.10 0.000 894008.13 0.000 894801.13 0.000 0.000
 cap104.txt 928941.80 0.000 928941.80 0.000 928941.80 0.000 0.016
 cap131.txt 793439.60 0.004 793439.60 0.000 794299.81 0.000 0.000
 cap132.txt 851495.30 0.000 851495.30 0.000 851495.25 0.000 0.016
 cap133.txt 893076.70 0.008 893076.70 0.000 893782.25 0.000 0.000
 cap134.txt 928941.80 0.000 928941.80 0.000 928941.80 0.000 0.000
 capa.txt 17156454.000.016 17156454.000.008 17156454.000.01 1.563
 capbtxt 12979072.000.212 12979072.000.012 12979072.000.03 1.516
 capctxt 11505604.000.288 11526134.000.004 11526134.000.04 0.859
 Avg. 0.035 0.002 0.005 0.266
 Max. 0.288 0.012 0.036 1.563
 Bahram Alidaee  et al. / IFAC PapersOnLine 55-10 (2022) 1619–1624 1623 
 
Value of MAXCOUNT: Clearly implementing any heuristic for 
longer time gives more opportunity to explore the solution 
space. However, in our implementation we quickly realized 
that overwhelming majority of the problems were solved to 
optimality within the criteria of minimum of 0.5 seconds or 
finishing the whole process one time, i.e., MAXCOUNT=1. 
However, a few problems in Gap B and C resisted reaching 
optimal solutions. We set MAXCOUNT=3 for those problems. 
 
Table 3. Results for m* ucflp from Hoefer library, HGA-TS and 
grasp solved all problems to optimality 
 
 
Table 4. Results for gap a-c ucflp from Kochetov library 
 
Default 500 GRASP iterations: 1,000 iterations*, 5,000 
iterations**, 10,000 iterations***, 50,000 iterations**** 
Table 5. Results for challenging gap-b,c uflp when solved as 9 
repeated p-median using HGA-TS 
 
 
4. ANALYSIS OF RESULTS 
Using the above parameters, we solved all 475 problems from 
the Internet by Heuristics 1,2 and the GRASP. In Tables 1-5  
we only report challenging problems. The rest of problems 
were solved to optimality by Heuristic 2 in 0 CPU time. A 
summary of all results is reported in Table 6. 
It is clear from all tables that the genetic RK is a strong 
diversification approach. From Tables 1-3 we can conclude 
that 53.2% of these problems were solved to optimality when 
RK was embedded in the Heuristic 1. In contrast when RK was 
not included in the heuristic only 29.8% of problems were 
solved to optimality. Note that, Heuristic 1 did not solve any 
of the GAP problems to optimality. Interestingly, as the Table 
6 shows, average time and maximum time were also 
drastically reduced when genetic RK was embedded in the 
heuristic.  
Heuristic 2 (HGA-TS) and GRASP solved all problems to 
optimality. As can be seen from the summary, Table 6, except 
for p-Median problems from the OR-Library all other 
problems were solved in shorter time by HGA-TS compared 
to GRASP. Average and maximum time for HGA-TS were 
23.049 and 66.18 while for GRASP were 253.1, and 814.38 
seconds, respectively. 
A few problems in the set UFLP, 14 problems from the set 
GAP B and 13 problems from the set GAP C, were challenging 
for the heuristic, shown in Table 5. Average time and 
maximum time to solve these problems were 34.57, 123.18, 
and 23.97, 99.01 seconds, respectively. We treated these 
problems as general ULP. 
ID OF 
Optimal
 Time (sec.) 
HGA-TS
 OF 
W/Seq.Impl
 Time (sec.) 
W/Seq.Impl
 OF 
No/Seq.Impl
 Time(sec.) 
No/Seq.Impl
 Time (sec.) 
Grasp
 MO1 1305.95 0.000 1313.46 0.000 1324.80 0.000 0.047
 MO2 1432.36 0.003 1446.99 0.004 1482.88 0.000 0.078
 MO3 1516.77 0.000 1521.47 0.000 1555.66 0.000 0.094
 MO4 1442.24 0.000 1442.24 0.000 1442.24 0.004 0.078
 MO5 1408.77 0.000 1410.96 0.000 1411.11 0.000 0.047
 MP1 2686.40 0.008 2732.32 0.008 2798.39 0.004 0.250
 MP2 2904.48 0.008 2911.21 0.008 2995.19 0.008 0.250
 MP3 2623.71 0.008 2661.13 0.004 2760.00 0.008 0.281
 MP4 2938.75 0.024 2942.64 0.004 3080.88 0.004 0.250
 MP5 2932.33 0.008 2972.58 0.004 2932.33 0.012 0.234
 MQ1 4091.01 0.056 4091.01 0.020 4344.43 0.020 0.500
 MQ2 4028.33 0.032 4103.35 0.016 4525.61 0.016 0.453
 MQ3 4275.43 0.020 4275.43 0.020 4373.17 0.036 0.500
 MQ4 4235.15 0.024 4249.01 0.016 4444.92 0.024 0.547
 MQ5 4080.74 0.016 4080.74 0.016 4104.58 0.028 0.547
 MR1 2608.15 0.116 2689.406 0.08 2632.84 0.156 1.391
 MR2 2654.7350.104 2712.746 0.072 2976.561 0.076 1.391
 MR3 2788.25 0.084 2794.606 0.056 2884.495 0.088 1.266
 MR4 2756.04 0.104 2779.867 0.076 3005.042 0.076 1.344
 MR5 2505.05 0.156 2604.173 0.068 2776.685 0.056 1.266
 MS1 5283.76 0.612 5364.968 0.468 5417.084 0.624 5.688
 MT1 10089.5 2.320 10091.334 5.044 10698.499 4.856 21.641
 Avg. 0.168 0.272 0.277 1.734
 Max. 2.320 5.044 4.856 21.641
 ID OF 
Optimal
 Time (sec.) 
HGA-TS
 Time (sec.) 
Repeated ID OF 
Optimal
 Time (sec.) 
HGA-TS
 Time (sec.) 
Repeated
 P-MEDIAN P-MEDIAN
 731 45130 42.89 5.79 533 39177 99.01 8.37
 931 42172 101.92 3.45 733 42137 3.06 2.45
 1031 42165 58.04 4.142 1033 42138 16.53 2.29
 1131 42162 23.37 7.978 1133 42147 5.98 3.45
 1231 45136 1.91 3.86 1233 42142 17.54 12.38
 1431 42157 42.39 1.27 1433 42152 75.05 12.62
 1531 42160 12.37 2.12 1633 42141 18.84 4.43
 1731 42174 28.99 4.514 1733 42134 10.08 3.33
 1931 45136 3.62 2.08 1933 42137 26.36 7.17
 2231 42179 123.18 1.28 2133 42138 7.84 1.39
 2731 42159 3.72 3.31 2233 42121 0.94 0.57
 2931 45132 4.12 1.05 2433 42139 25.47 5.68
 3131 42158 33.89 4.792 2933 42124 4.96 0.42
 3231 45125 3.58 3.67
 Avg. 34.57 3.52 Avg. 23.97 4.97
 Max. 123.18 7.98 Max. 99.01 12.62
 GAP-B, n=100 GAP-C, n=100
1624 
Bahram Alidaee  et al. / IFAC PapersOnLine 55-10 (2022) 1619–1624
 % Optimal Avg. Max. % Optimal Avg. Max. % Optimal Avg. Max. % Optimal Avg. Max.
 Solution Time Time Solution Time Time Solution Time Time Solution Time Time
 p-Med., OR-Lib. 62.50% 0.2341.54235.00% 5.27535.114100% 1.579 16.540 100% 1.536 7.210
 UCFLP, OR-Lib. 80.00% 0.0020.01246.67% 0.0050.036 100% 0.035 0.288 100% 0.266 1.563
 UCFLP, M* 18.18% 0.2775.0409.09% 0.2774.856 100% 0.168 2.320 100% 1.734 21.641
 UCFLP GAP A 100% 1.80 11.300 100% 12.62 163.91
 UCFLP GAP B 100% 16.68 123.18 100% 55.96 510.20
 UCFLP GAP C 100% 12.00 99.010 100% 66.18 814.38
 ULP GAP B 100% 3.52 7.98
 ULP GAP C 100% 4.97 12.620
 Heuristic 1, RK Included Heuristic 1, RK Not Included Heuristic 2 (HGA-TS) GRASP
 Table 6. Summary of results of 450 instances
 Since implementation of HGA-TS for p-Median was more 
efficient compared to implementation for UFLP, we decided 
to solve these problems by repeated p-Median problems. We 
started to solve repeated p-Median problems by starting p=20. 
We reduced value of p one at a time and solved a new p
Median problem. The objective function was reduced each 
time, and when started to increate we stopped the process. The 
smallest objective function was then considered the optimal 
solution for ULP. Behavior of the optimal solution for GAP-C 
533, as value of p reduced changes where the optimal solution 
reached for p=13. Figure 1 shows average time for each p
Median problem solved. Total time to solve all 9 p-Median 
problems was equal to 8.37 as opposed to 99.01 when the 
problem was solved as one ULP. Table 5 shows results for all 
challenging problems.  
 
Figure. 1. CPU time in seconds for p-median problem, 533 GAP
C, from Kochetov library, as value of p changes, (Heuristic 2). 
5.  CONCLUSION AND FURTHER DIRECTION 
In this paper, we concerned an NP-hard problem, the 
uncapacitated location problem. It generalizes the p-Median 
and uncapacitated facility location problems. A hybrid 
genetic-tabu search based on adaptive critical event tabu 
search and genetic random key  was presented as solution 
procedure. The procedure of using random-key in our settings 
may be considered as a new way of implementing GA for 
binary problems. By solving variety of benchmark problems 
available on the Internet we experimentally showed that the 
genetic RK can be used as a strong diversification approach in 
meta
available on the Internet can be solved to optimality within a 
short time. Results were compared with results from GRASP, 
a leading algorithms available on the Internet.  
The next step in our research is use of genetic RK as 
diversification procedure in other meta-heuristics applied to 
binary problems, including capacitated location problem. 
REFERENCES 
Alidaee, B., Sloan, H., & Wang, H. (2017). Simple and fast 
novel diversification approach for the UBQP based 
on sequential improvement local search. Computers 
& Industrial Engineering, 111, 164-175.  
Alidaee, B., & Wang, H. (2017). A note on heuristic approach 
based on UBQP formulation of the maximum 
diversity problem. Journal of the Operational 
Research Society, 68(1), 102-110.  
Bean, J. C. (1994). Genetic Algorithms and Random Keys for 
Sequencing and Optimization. ORSA Journal on 
Computing, 6(2), 154-160.  
Galvão, R. D., & Raggi, L. A. (1989). A method for solving to 
optimality uncapacitated location problems. Annals 
of Operations Research, 18(1), 225-244.  
Garey, M. R., & Johnson, D. S. (1979). Computers and 
intractability (Vol. 174). freeman San Francisco.  
Glover, F., & Hao, J.-K. (2019). Diversification-based 
learning in computing and optimization. Journal of 
Heuristics, 25(4), 521-537.  
Glover, F., Kelly, J. P., & Laguna, M. (1995). Genetic 
algorithms and tabu search: Hybrids for optimization. 
Computers & Operations Research, 22(1), 111-134.  
Glover, F., & Kochenberger, G. A. (1996). Critical Event Tabu 
Search for Multidimensional Knapsack Problems. In 
I. H. Osman & J. P. Kelly (Eds.), Meta-Heuristics: 
Theory and Applications (pp. 407-427). Springer US.  
Glover, F., Kochenberger, G. A., & Alidaee, B. (1998). 
Adaptive Memory Tabu Search for Binary Quadratic 
Programs. Management Science, 44(3), 336-345.  
Kratica, J., Tošic, D., Filipović, V., & Ljubić, I. (2001). 
Solving the simple plant location problem by genetic 
algorithm. RAIRO - Operations Research, 35(1), 
127-142.  
Wang, H., & Alidaee, B. (2018). Unrelated Parallel Machine 
Selection and Job Scheduling With the Objective of 
Minimizing Total Workload and Machine Fixed 
Costs. IEEE Transactions on Automation Science 
and Engineering, 15(4), 1955-1963. 