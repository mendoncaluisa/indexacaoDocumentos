COMPLEXIDADE PARAMETRIZADA PARA PROBLEMAS EM GRAFOS E/OU 
Uéverton dos Santos Souza 
Universidade Federal Fluminense 
usouza@ic.uff.br
 Fábio Protti 
Universidade Federal Fluminense 
fabio@ic.uff.br
 Maise Dantas da Silva 
Universidade Federal Fluminense 
maisedantas@id.uff.br
 Resumo 
Grafos E/Ou e Grafos X-de-Y são estruturas capazes de modelar muitos problemas (teóricos e práticos) nas 
mais diversas áreas de aplicação. Uma vez modelado um problema com uma dessas estruturas, geralmente sua 
solução poderá ser obtida através de um subgrafo (subgrafo-solução) deste grafo. Neste trabalho, são estudados 
os problemas Min–E/Ou e Min–X-de-Y, que consistem, respectivamente, em encontrar um subgrafo-solução 
de custo mínimo em grafos E/Ou e grafos X-de-Y. Como ambos são problemas NP-difíceis, este trabalho foca 
em abordagens parametrizadas para Min–E/Ou e Min–X-de-Y, obtendo alguns resultados quanto à 
tratabilidade parametrizada das versões  Min–E/Ou(   
),  
problemas. 
Min–X-de-Y( ) e  Exato–X-de-Y( ) destes 
Palavras-chave: Complexidade Parametrizada. Grafos E/Ou. Grafos X-de-Y  
Abstract 
And/Or Graphs and X-of-Y Graphs are structures capable of modeling many theoretical and practical problems 
in several application areas. Once a problem is modeled using one of these structures, the solution can usually 
be obtained via a subgraph ( solution subgraph) of this graph. In this work,it is studied the  Min–And/Or and  
Min–X-of-Y problems, consisting respectively of finding a solution subgraph of Minimum cost in And/Or and 
X-of-Y graphs. As both problems are NP-hard this paper focuses on a parameterized approach to  
Min–And/Or and Min–X-of-Y, where some results were obtained on the parameterized tractability of versions  
Min–And/Or( , ),  Min–X-of-Y( ) and  Exactly–X-of-Y( ). 
Keywords: Parameterized Complexity. And/Or Graphs. X-of-Y Graphs  
Versão inicial submetida em 09/04/2012. Versão final recebida em 28/05/2012. 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
1  Introdução 
A teoria de complexidade parametrizada (Downey e Fellows 1999), proposta em 1995, 
surgiu como uma alternativa promissora para se trabalhar com problemas NP-difíceis, que passam a 
ter um conjunto   
de parâmetros fixos adicionais à entrada. O interesse em parametrizar tais 
problemas se deve ao fato de que, em muitos casos, somente uma pequena faixa de valores de 
parâmetro é realmente importante na prática. Logo, a intratabilidade (aparente) desses problemas no 
caso geral é indevidamente pessimista. Analisando-se mais profundamente a estrutura da entrada 
(considerando-a com um conjunto de parâmetros adicionais), tenta-se limitar a explosão 
combinatória aparentemente inevitável na solução do problema. 
Segundo a teoria de complexidade parametrizada (Flum e Grohe 2006) (Niedermeier 
2006), dado um conjunto   
de parâmetros (fixados com valor constante), um problema NP-difícil 
é dito tratável por parâmetro fixo (   
) para   
possível desenvolver um algoritmo que solucione   
entrada,      
se, uma vez adicionado   
em tempo       
à sua formulação, for 
, onde   é o tamanho da 
é uma função arbitrária (possivelmente exponencial) em   
independente de   
e de  . 
Além da classe    
e   
é uma constante 
, Downey e Fellows definiram classes apropriadas de problemas 
parametrizados de acordo com seu nível de intratabilidade parametrizada. Essas classes são 
organizadas em uma hierarquia (W-hierarquia), e baseadas intuitivamente na complexidade dos 
circuitos necessários para se verificar a validade de uma solução, ou, alternativamente, na 
profundidade lógica natural do problema. 
Muitas vezes, determinar o custo mínimo para a produção de uma empresa ou o lucro 
máximo que esta poderá obter, por exemplo, são problemas difíceis de serem resolvidos. No entanto, 
na prática, as empresas geralmente necessitam determinar apenas se é possível efetuar a produção 
com um determinado orçamento ou verificar se é possível cumprir uma determinada meta de 
venda/lucro. Sendo assim, é possível adicionar aos problemas de custo mínimo ou lucro máximo 
destas empresas parâmetros fixos adicionais, como um orçamento ou uma meta, dando origem às 
suas versões parametrizadas, que podem ser mais fáceis de serem solucionadas (menos complexas) e 
ao mesmo tempo satisfazer às necessidades requeridas. Perante estes fatos, observa-se que a Teoria 
da Complexidade Parametrizada modela perfeitamente esta realidade; muitos problemas 
considerados intratáveis (a menos que     
) sob o ponto de vista teórico, na prática são tratáveis 
por parâmetro fixo. Quanto à intratabilidade parametrizada, um problema provado W[1]-difícil tende 
a não possuir algoritmos muito mais eficientes para a sua solução do que examinar todas as 
combinações de   elementos. 
Grafos E/Ou vem sendo utilizados em inteligência artificial desde o início da década de 
1970, para representação de decomposição de problemas (Nilsson 1971)(Hansen e Zilberstein 
2001). Desde então, ao longo do tempo, novas aplicações para estes grafos vem surgindo, como em: 
versionamento de software em engenharia de software (Corandi e Westfechtel 1998), geração de 
padrões de cortes em placas em pesquisa operacional (Morabito e Pureza 2010)(Arenales e 
Vianna 2006), representação de hipergrafos em teoria dos grafos (Gallo et al. 1993) e 
representação de  game trees em teoria dos jogos (Schaeffer et al. 2001), entre outras. Grafos 
X-de-Y, por sua vez, são uma generalização de grafos E/Ou, definidos com base nos modelos para 
detecção de  deadlock em sistemas distribuídos (Barbosa 2002). 
Em geral, a solução de um problema modelado por grafos E/Ou ou grafos X-de-Y pode ser 
representada por um subgrafo (denotado por subgrafo-solução) deste grafo, que satisfaz um 
determinado conjunto de restrições. Os problemas  Min–E/Ou e  Min–X-de-Y são problemas 
NP-difíceis, que consistem basicamente em encontrar um subgrafo-solução de custo mínimo em 
grafos E/Ou e grafos X-de-Y, respectivamente. Motivou-nos o fato de que os problemas  Min–E/Ou 
161 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
e  Min–X-de-Y, apesar de serem problemas naturais e possuírem várias e interessantes aplicações, 
não vinham sendo muito estudados na literatura especializada. As referências encontradas são 
poucas e, de uma forma geral, pouco recentes. 
Este trabalho procura investigar variações dos problemas Min–E/Ou e Min–X-de-Y e, em 
particular, analisá-las do ponto de vista da complexidade parametrizada (algo que, tanto quanto 
sabemos, ainda não havia sido iniciado). Como ferramenta para prova matemática de tratabilidade 
parametrizada, será utilizado o método de redução a um núcleo do problema. A ideia principal deste 
método é reduzir, em tempo polinomial, uma instância   do problema a uma instância   , tal que 
uma solução para    possa ser apresentada como uma solução para  , e o tamanho de    seja 
limitado por     
. Dessa forma, a instância    
constitui um núcleo do problema com cardinalidade 
constante, que pode ser exaustivamente analisada sem que o tempo total do algoritmo ultrapasse 
. Por outro lado, para a prova de intratabilidade parametrizada, será utilizada a técnica de  
redução parametrizada de problemas. Essa técnica é similar à utilizada na teoria de complexidade 
computacional clássica para prova de NP-dificuldade, com o diferencial de que a redução 
parametrizada deve ser computada em tempo       
, e o conjunto de parâmetros resultantes    
deve ser uma função do conjunto de parâmetros originais  . 
O artigo está estruturado da seguinte forma: esta seção possui natureza introdutória, a seção 
2 apresenta a definição de grafos E/Ou e grafos X-de-Y, a formulação dos problemas  Min–E/Ou e  
Min–X-de-Y e uma aplicação de  Min–E/Ou em geração de padrões de cortes bidimensionais em 
placas; na seção 3 é formalizada a versão  Min–E/Ou( , ) é provado que esta versão é tratável por 
parâmetro fixo; na seção 4 são formalizadas as versões  Min–X-de-Y( ) e  Exato–X-de-Y( ) e 
provado que ambas são intratáveis por parâmetro fixo. Por fim, a última seção apresenta as reflexões 
finais. 
2  Grafos E/Ou e grafos X-de-Y 
Um grafo E/Ou é um digrafo   tal que todo vértice        
possui um rótulo       
. Neste grafo, os arcos representam relações de dependência entre os vértices: vértices do tipo 
dependem estritamente de todos os seus vizinhos de saída (dependência conjuntiva), enquanto 
vértices do tipo    
dependem apenas de um dos seus vizinhos de saída (dependência optativa). 
Neste trabalho,    
 
é utilizado para denotar o conjunto dos vizinhos de saída de   , 
consequentemente     
  
representa o número de vizinhos de saída de   . Também é utilizado   e 
para denotar, respectivamente, o número de vértices e o número de arestas/arcos de um 
grafo/digrafo, e   
para denotar o peso de um vértice ou arco. 
Na representação de grafos E/Ou, os vértices do tipo   
são ilustrados com um anel entre 
seus arcos de saída. A Figura 1 ilustra um grafo E/Ou, onde   é um vértice do tipo   e   um vértice 
do tipo   
. Na literatura, também são encontradas definições de grafos E/Ou onde os rótulos 
se encontram nos arcos (Gallo et al. 1993). 
162 
 
 
 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
 
163 
 
  s 
 
 
                    t  
 
 
 
 
 
 
 
 
 
Figura 1: Exemplo de Grafo     .    
 
Grafos X-de-Y são uma generalização de grafos E/Ou. Nestes grafos, todo vértice    possui 
um rótulo   -  , tal que    depende de    dentre os seus    vizinhos de saída,         e 
       
 . 
Dado um grafo E/Ou, denotado por  , é possível construir um grafo X-de-Y, denotado por 
  , da seguinte forma:   
    • para cada vértice         do tipo  , cria-se em    um vértice   -  , onde      , 
pois um vértice do tipo   depende de todos os seus    vizinhos de saída; 
 
    • para cada vértice         do tipo   , cria-se em    um vértice   -   onde 
    , pois um vértice do tipo    depende de apenas um dentre seus    vizinhos de saída.  
  
 
2.1  Min–E/OU e Min–X-de-Y 
  
O problema  Min–E/Ou consiste basicamente em, dado um grafo E/Ou ponderado com um 
nó fonte  , encontrar um subgrafo (subgrafo-solução) que satisfaça a um determinado conjunto de 
restrições. A seguir, é descrita a sua formulação:  
 
Problema: Min–E/OU 
Instância: Um inteiro positivo  , um grafo       =      acíclico, conexo e ponderado com um 
vértice fonte    , onde cada vértice   possui um rótulo            , cada arco   possui um 
peso inteiro       , e todo vértice   tal que         possui no máximo   arcos de saída de 
mesmo peso. 
Questão: Encontrar um subgrafo           de   tal que o somatório dos pesos de seus arcos seja 
mínimo, e que satisfaça a:   
 
1.     ;  
2. se      e       , então todos os arcos de saída de   devem pertencer a   ; 
3. se      e        , então exatamente um dos arcos de saída de   deve pertencer a   . 
 
 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
De forma análoga a grafos E/Ou, existe o problema  Min–X-de-Y para grafos X-de-Y. A 
formulação desse problema é definida a seguir:  
Problema: Min–X-de-Y 
Instância: Um grafo  -  -   =      
onde cada vértice    
acíclico, conexo e ponderado com um vértice fonte    
possui um rótulo   -  ,         
peso inteiro       
. 
Questão: Encontrar um subgrafo           
seja mínimo, e que satisfaça a:   
1.     
;  
2.  para todo      
,    
dentre seus    
e        
 
de   
, e cada arco   possui um 
tal que o somatório dos pesos de seus arcos 
arcos de saída devem pertencer a   .  
A Figura 2 ilustra em (a) um grafo X-de-Y e em (b) um possível subgrafo-solução. 
, 
Figura 2: (a) Grafo  -  - . (b) Subgrafo-solução do grafo em    
.    
Em 1974, Sahni provou, através de uma redução do problema  3-SAT, que o problema  
Min–E/Ou é NP-difícil (Sahni 1974). Nesta prova, foi exibida uma transformação de uma instância 
do problema  3-SAT em uma grafo E/Ou, onde todo vértice do tipo    
possui no máximo 3 
vizinhos de saída. Conclui-se então que o problema  Min–E/Ou é NP-difícil, mesmo fixado    
Consequentemente,  Min–X-de-Y também é NP-difícil. 
. 
164 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
2.2  Min–E/Ou em Geração de Padrões de Cortes 
Na área de Pesquisa Operacional, grafos E/Ou e grafos X-de-Y são utilizados para auxiliar 
na tomada de decisões e na análise de sistemas complexos do mundo real, tipicamente com o 
objetivo de melhorar ou otimizar a sua performance. Uma das aplicações de grafos E/Ou em 
Pesquisa Operacional é a sua utilização na geração de padrões de cortes bidimensionais em placas. 
Este problema, que é NP-difícil (Morabito e Pureza 2010), aparece em diversos processos 
industriais, tais como: corte de bobinas de papel e alumínio, barras de aço, chapas metálicas e de 
madeira, placas de circuito impresso, caixas de papelão, rolos de tecido, entre outros. O modo como 
as peças são arranjadas na placa é chamado padrão de corte. 
A Figura 3 ilustra dois exemplos de padrões de corte. 
Figura 3: Ilustrações de padrões de cortes.  
A seguir, uma descrição do problema de cortes em placas é apresentada:  
Problema:  Geração de Padrões de Cortes Bidimensionais em Placas 
Instância: Uma placa retangular   de dimensões      
largura; um conjunto de   
,      
peças retangulares    
; e um valor utilidade    
, onde   é o comprimento e   
de dimensões        
associado a cada peça   . 
, tais que      
a 
e 
Questão: Encontrar um padrão de corte da placa   que produza um conjunto de peças que 
maximize o valor de utilidade total, ou seja, maximize o somatório dos valores utilidade    
peças obtidas pelo corte. (Se o valor utilidade    
for a área da peça   , então o objetivo é 
equivalente a minimizar a perda de material da peça  .) 
das 
Dada uma placa  , um grafo E/Ou   pode ser definido para representar todos os possíveis 
padrões de corte de  . Os vértices do tipo    
representam partes da placa e os vértices do tipo  , 
possíveis cortes na placa. Nesta representação, cada vizinho de saída de um vértice   
do tipo   
do tipo    
é 
um vértice do tipo  , que representa uma alternativa de corte na placa representada por  , e cada 
vértice   
possui dois vizinhos de saída (placas obtidas após o corte representado por  ). 
O vértice fonte do grafo é um vértice do tipo   
, que representa a placa  . 
Neste grafo  , a busca por um padrão de corte pode ser feita examinando-se todas as 
possíveis alternativas de cortes a partir de um nó    
e, para cada vértice  , as peças obtidas após o 
corte. 
165 
A partir desta representação por grafos E/Ou, algoritmos de busca e programação dinâmica 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
podem ser aplicados para encontrar uma solução ótima. Em 2006, Arenales (Arenales e Vianna 
2006) propôs uma abordagem utilizando grafos E/Ou para geração de padrões de corte em placas 
defeituosas. Em seguida, em 2010, Morabito (Arenales e Vianna 2006) desenvolveu um método 
para geração de padrões de cortes restritos utilizando esses grafos. 
Nesta representação, um padrão de corte pode ser observado como um subgrafo-solução de 
, onde cada vértice    
deste subgrafo possui um vizinho de saída (corte escolhido) e cada vértice 
possui dois vizinhos de saída (placas obtidas após o corte), sendo as peças deste padrão de corte os 
vértices sumidouros desse subgrafo-solução. 
A Figura 4 ilustra em     
uma placa  , em     
podem ser obtidas a partir de  , e em     
um conjunto de   
peças que 
um possível padrão de corte para  . 
Figura 4: (a) Placa  . (b) Conjunto das   
A Figura 5 ilustra uma árvore E/Ou   
peças. (c) Padrão de corte de  .  
que modela possíveis cortes na placa  , onde 
as folhas são possíveis peças obtidas pelos cortes. Nesta árvore, os vértices do tipo    
indicam que cada filho é um possível corte e os vértices   indicam que seus filhos são 
placas obtidas a partir de um corte. As arestas em destaque formam a subárvore-solução do 
padrão de corte representado na Figura 4    
. 
Muitos trabalhos limitam seus estudos a padrões guilhotinados, isto é, padrões 
obtidos por uma sequência de cortes em placas retangulares que produzem sempre dois 
novos retângulos. Alguns trabalhos adicionam ainda uma restrição para o número máximo 
de vezes que um tipo de peça poderá ser cortado a partir de uma chapa. A existência de 
possíveis defeitos nas placas também é considerada por alguns autores. Para mais 
informações sobre o problema, as referências (Morabito e Pureza 2010) (Arenales e Vianna 
2006) (Cui 2011) podem ser consultadas. 
Como  Min–X-de-Y é uma generalização de  Min–E/Ou, além de sua aplicação 
direta a problemas de escalonamento e na área de sistemas distribuídos (Barbosa 2002),  
Min–X-de-Y é também capaz de modelar uma grande gama de problemas reais. 
166 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
Figura 5: Árvore E/Ou de padrões de corte da Figura 3.  
3  A versão Min–E/OU(   ) 
Conforme dito anteriormente,  Min–E/Ou permanece intratável (a menos que     
mesmo fixando um valor constante para   maior ou igual a 3. Sendo assim, é formulada uma 
variação parametrizada do problema  Min–E/Ou, denotada  Min–E/Ou(   ), onde, além de fixado 
um valor constante para  , é fixado um valor inteiro positivo   para o custo do subgrafo-solução. 
A seguir é apresentada essa nova formulação:  
Problema: Min–E/OU(   )  
Parâmetros: Dois inteiros positivos   
Instância: Um grafo       
tal que cada vértice   
=      
e  
. 
acíclico, conexo e ponderado com um vértice fonte       
possui um rótulo            
, e cada vértice com rótulo    
, cada arco   possui um peso inteiro 
possui no máximo   arcos de saída de mesmo peso.  
Questão: Determinar se existe um subgrafo-solução           
de   
), 
, 
tal que o somatório dos pesos 
dos arcos de   
1.      
2.  se      
3.  se      
não exceda  , atendendo a:   
;  
e       
e        
, então todos os arcos de saída de   devem pertencer a   ;  
, então exatamente um dos arcos de saída de   deve pertencer a   .  
167 
 
 
 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
 
168 
 
3.1  Tratabilidade Parametrizada para Min–E/OU(   ) 
 
Dada a versão parametrizada  Min–E/Ou(   ), deseja-se saber se esta versão é tratável à luz 
da teoria de complexidade parametrizada, ou seja, se é possível obter a solução para o problema em 
tempo       , onde   é o conjunto formado pelos parâmetros   e   (       ). 
Para provar que o problema  Min–E/Ou(   ) é    , é utilizado o método de redução a um 
núcleo do problema. A ideia principal deste método é reduzir, em tempo polinomial, uma instância 
  do problema a uma instância   , tal que uma solução para    possa ser apresentada como uma 
solução para  , e o tamanho de    seja limitado por     . Dessa forma, a instância    constitui um 
núcleo do problema com cardinalidade constante, que pode ser exaustivamente analisada sem que o 
tempo total do algoritmo ultrapasse       . 
 
Teorema 1  Seja   uma instância do problema  Min–E/Ou(   ). É possível obter um 
núcleo de tamanho            para este problema em tempo     .  
 
Prova: Como prova, é apresentado um conjunto de regras de redução corretas e suficientes, 
que podem ser aplicadas à instância de entrada, em tempo     , construindo um núcleo de tamanho 
menor ou igual a        : 
 
    Regra 1. Para todo vértice    do tipo  , se                
  , então remova   . 
    Regra 2. Para todo arco       , se       , então remova-o. 
    Regra 3. Para todo vértice     , se o peso do caminho mínimo de   até    for maior que  , 
       então remova-o. 
    Regra 4. Se algum vértice tornou-se inatingível a partir de   por caminhos orientados, então 
       remova-o. 
    Regra 5. Se algum vértice inicialmente não-sumidouro tornou-se um sumidouro, então atribua 
       peso     a todos os seus arcos de entrada. 
    Regra 6. Se um vértice do tipo   teve um sucessor removido, então atribua peso     a um de 
       seus arcos de saída. 
 
Seja    o grafo resultante da aplicação das regras de redução. 
 
A Regra 1 retira do grafo todos os vértices   tais que o somatório dos pesos de seus arcos de 
saída seja maior que  . Isto se deve ao fato de que estes vértices não podem fazer parte de um 
subgrafo-solução de custo máximo  . Assim, todo vértice do tipo   de   , após a aplicação da 
Regra 1, terá no máximo   arcos de saída. Em seguida, a Regra 2 é aplicada, retirando do grafo 
todos os arcos de saída de peso maior do que  , pois estes arcos não poderão fazer parte de um 
subgrafo-solução de custo máximo  . Devido à aplicação da Regra 1, é fácil ver que a Regra 2 é 
aplicada apenas a arcos de saída de vértices do tipo   . Após a aplicação das Regras 1 e 2,    terá 
no máximo   pesos distintos de arcos. Logo, todo vértice    terá no máximo    arcos de saída. A 
Regra 3, por sua vez, retira do grafo todo vértice    tal que o custo de um caminho mínimo de   até 
   seja maior do que  , pois se    pertencesse a um subgrafo-solução, então um caminho de   até 
   deveria existir neste subgrafo e, consequentemente, este subgrafo teria peso maior que  . 
Após a aplicação das Regras 1, 2 e 3, se algum vértice    tornou-se inatingível a partir de  , 
isto significa que todo caminho de   a    passava por um vértice ou arco que não poderia fazer 
parte de um subgrafo-solução de custo máximo  ; logo    deverá ser removido, o que é feito pela 
Regra 4. Se algum vértice    inicialmente não-sumidouro tornou-se um sumidouro após a aplicação 
das Regras 1, 2, 3 e 4, isto significa que nenhuma dependência de    pode fazer parte de um 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
subgrafo-solução de custo máximo  . Assim,    
subgrafo-solução de   
também não poderá fazer parte de um 
de custo máximo  . A Regra 5 atribui peso     
, impedindo assim que    
a todo arco de entrada de 
faça parte de um subgrafo-solução de custo máximo   em   (este 
vértice não é removido, para evitar a criação de novos sumidouros). A Regra 6 efetua processo 
semelhante ao da Regra 5, para vértices do tipo  . 
Conforme pode ser observado, as regras de redução alteraram e/ou removeram somente 
vértices e arcos que não poderiam fazer parte de um subgrafo-solução de custo máximo  . Desta 
forma, se o grafo    
possui um subgrafo-solução de custo máximo  , este também será um 
subgrafo-solução de custo máximo   para  . 
A aplicação das regras de redução demanda tempo     
, o que pode ser verificado 
observando-se cada regra isoladamente. A Regra 1 pode ser executada em tempo       
, pois 
será necessário percorrer todos os vértices com rótulo   
e seus arcos. A Regra 2 demandará tempo 
, uma vez que todos os arcos devem ser analisados. A Regra 3 poderá ser executada em tempo 
, a partir do algoritmo    -        -      
(Cormen et al. 2002), pois   
orientado acíclico. A Regra 4 também poderá ser executada em tempo        
é um grafo 
através de um 
percurso genérico. A Regra 5 demandará tempo        
pois, no pior caso, para cada sumidouro, 
será necessário alterar o peso de todos os seus arcos de entrada. A Regra 6 demandará tempo     
. 
Como nenhuma regra tem complexidade superior a        
redução podem ser aplicadas em tempo     
e o grafo é conexo, as regras de 
. 
No grafo resultante   , o maior caminho mínimo de   até um sumidouro possui peso 
máximo  , e cada vértice possui no máximo    
vizinhos de saída. Desta forma,    
terá número 
máximo de vértices se: (i) todos os vértices não-sumidouros possuírem grau de saída igual a   
; (ii) 
não houver vértices com vizinhos de saída em comum; (iii) o custo de um caminho mínimo de   a 
qualquer sumidouro for  . Em outras palavras,    
terá número máximo de vértices quando for uma 
árvore     -ária cheia de altura    
. Portanto, o número de vértices de    
é           
Como (i) as regras de redução podem ser aplicadas em tempo polinomial     
tamanho do grafo resultante    
. 
, (ii) o 
está em função dos parâmetros   e  , e (iii) um subgrafo-solução de 
custo máximo    
que o subgrafo    
em    equivale a um subgrafo-solução de custo máximo    em  , concluímos 
é um núcleo para o problema  Min–E/Ou(   ).              
Sabendo que o problema  Min–E/Ou( , ) possui um núcleo de tamanho      
observar o Corolário 2. 
Corolário 2 Min–E/OU(   )      
.  
Prova: O resultado segue diretamente do Teorema 1, pois, uma vez obtido em tempo      
um núcleo de tamanho           
, cabe 
, este poderá ser exaustivamente analisado sem que o tempo total 
do algoritmo ultrapasse       .                            
3  As versões Exato–X-de-Y( ) e Min–X-de-Y( ) 
Nesta seção, é fixado um parâmetro   para o custo do subgrafo-solução, dando origem a 
duas versão parametrizadas do problema  Min–X-de-Y:  Min–X-de-Y( ) e  Exato–X-de-Y( ). As 
formulações destas versões são apresentadas a seguir:  
169 
 
 
 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
 
170 
 
Problema: Min–X-de-Y( )  
 
Parâmetro: Um inteiro positivo  . 
Instância: Um grafo  -  -   =      acíclico, conexo e ponderado com um vértice fonte 
      , onde cada vértice    possui um rótulo   -  ,         e        
 , e cada arco   
possui um peso       . 
Questão: Determinar se existe um subgrafo-solução           de   tal que o somatório dos 
pesos dos arcos de   não exceda  , atendendo a:   
 
   1.      ;  
  2.  para todo      ,    dentre seus    arcos de saída devem pertencer a   .  
   
  
Problema: Exato–X-de-Y( ) 
  
Parâmetro: Um inteiro positivo  . 
Instância: Um grafo  -  -   =      acíclico, conexo e ponderado com um vértice fonte 
      , onde cada vértice    possui um rótulo   -  ,         e        
 , e cada arco   
possui um peso       . 
Questão: Determinar se existe um subgrafo-solução           de   tal que o somatório dos 
pesos dos arcos de   seja exatamente  , atendendo a:  
   
   1.      ;  
   2.  para todo      ,    dentre seus    arcos de saída devem pertencer a   .  
   
  
3.1  Intratabilidade Parametrizada para Exato–X-de-Y( ) e Min–X-de-Y( ) 
 
Dentre as classes pertencentes à W-hierarquia, a classe W[1] é a classe atualmente mais 
estudada. Diversos problemas já foram provados como W[1]-completos e W[1]-difíceis. Um 
problema W[1]-difícil pode ser solucionado em tempo        se e somente se     . Um 
exemplo de problema W[1]-completo é o problema  Clique( ) (Flum e Grohe 2006), onde é 
fixado um parametro   para o tamanho da clique. 
O resultado a seguir diz que o problema  Clique( ) pode ser transformado 
parametricamente no problema  Exato–X-de-Y( ). Uma transformação paramétrica é uma redução 
computada em tempo       , onde o conjunto de parâmetros resultantes    é uma função 
arbitrária do conjunto de parâmetros  . 
 
Teorema 3 Clique( ) é transformável parametricamente em Exato–X-de-Y( ).  
 
Prova: Dada uma instância   de Clique( ), é possível transformá-la em uma instância    
de Exato–X-de-Y(  ) da seguinte forma: 
 
Seja    um grafo inicialmente vazio.   
    • Cria-se um vértice fonte  ;  
    • Cria-se um conjunto de vértices               , vizinhos de saída de  ;  
    • Para cada vértice   , criam-se dois vizinhos de saída:    e   ;  
    • Para cada vértice   , cria-se um arco         se e somente se             ;  
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
• Para cada vértice   
, cria-se um vizinho de saída sumidouro   .  
• Atribui-se peso 1 a todos os arcos criados.  
A rotulação dos vértices será dada da seguinte maneira:   
•   terá rótulo  - , onde         
• Todo vértice    
• Todo vértice    
• Todo vértice    
terá rótulo  - .  
terá rótulo  - .  
terá rótulo  - .  
• Cada vértice   , tal que          
• Cada vértice   , tal que          
.  
, é rotulado com      
, é rotulado com      
Considerando que a criação de cada vértice e arco demanda tempo     
poderá ser executada em tempo       -     -     
. 
. 
, a construção acima 
, uma vez que será necessário, para cada vértice de  , 
apenas percorrer todas as suas arestas. Logo, a transformação é feita em tempo       
. 
A Figura 6 ilustra um grafo   
transformação acima, onde     
e seu respectivo grafo X-de-Y   , obtido através da 
(os pesos dos arcos do grafo X-de-Y    
simplificação da figura). 
foram omitidos para 
Figura 6: Transformação paramétrica de   
em   .  
171 
 
 
 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
 
172 
 
Como pode ser observado, o grafo   foi transformado em um grafo   , onde        . 
Será demonstrado a seguir que   possui uma clique de tamanho   se e somente se    possui um 
subgrafo-solução de custo         . 
Se   tem um conjunto de vértices                que formam uma clique  , um 
subgrafo-solução   de    pode ser construído da seguinte forma: como   é um vértice de rótulo 
 - , escolhe-se                como os vizinhos de saída de   em  . Como cada um desses 
vértices tem rótulo  - , os vértices                e                também farão parte do 
subgrafo-solução  . Como cada vértice    é um vértice  - , os vértices                também 
farão parte do subgrafo  . Neste ponto,   já tem custo   , pois cada um de seus arcos tem peso 1. 
Como cada vértice    depende de     vizinhos de saída, é escolhido para    um vértice    se e 
somente se    pertence à clique   em   (os arcos de saída dos vértices            adicionam 
custo        a  ). Como, para cada vértice   , foram escolhidos somente vértices    que já se 
encontravam em  , o custo de   será                . 
Suponha, por contradição, que    tem um subgrafo-solução   de custo         , e   
não possui uma clique de tamanho  . Então, o subgrafo   terá pelo menos   vértices   , pois cada 
um dos   vértices    terá um vizinho de saída   . Como   não possui uma clique de tamanho  , 
então, pelo menos para um vértice   , foi escolhido um vértice    novo, pois caso contrário   teria 
tal clique. No entanto, se   possui     vértices   , em   temos que: (i) o vértice   possui   
vizinhos, e portanto os arcos de saída de   adicionam custo   a  ; (ii) cada um dos   vértices    
possui 2 vizinhos de saída, o que adiciona custo    a  ; (iii) cada um dos   vértices    possui 
    vizinhos de saída, adicionando portanto custo        a  ; (iv) cada um dos     
vértices    possui 1 vizinho de saída, o que adiciona custo     a  . Sendo assim, tem-se no total 
                               (uma contradição, pois foi assumido que   
tem custo exatamente         ). 
Logo,   possui uma clique de tamanho   se e somente se    possui um subgrafo-solução 
de custo extamente   .     
 
Corolário 4  Exato–X-de-Y( ) é W[1]-difícil.  
 
Prova: Segue diretamente do Teorema 3.     
 
A Figura 7 ilustra uma clique de tamanho     e o subgrafo-solução de custo      , 
para os grafos   e   , respectivamente, apresentados na Figura 6. 
 
Corolário 5  Min–X-de-Y( ) é W[1]-difícil.  
 
Prova: A prova deste corolário é baseada na redução do Teorema 3 Clique( ), no entanto 
efetuando a seguinte ponderação ao grafo: 
  
    • se          , então                ; 
    • se          , então          ; 
    • todas os demais arcos terão peso 1.          
  
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
Figura 7: (a) Clique de tamanho 3.  (b) Subgrafo-solução de custo 18 em   .  
4  Considerações Finais 
Grafos E/Ou são estruturas de dados que possibilitam a modelagem de diversos problemas 
reais, de forma que soluções para estes problemas possam ser buscadas computacionalmente. Grafos 
X-de-Y, por sua vez, são estruturas que generalizam os grafos E/Ou, capazes de modelar mais 
facilmente uma gama maior de problemas. 
Neste trabalho foram abordados dois problemas relativos a esses grafos,  Min–E/Ou e  
Min–X-de-Y, pois subgrafos-solução geralmente são interpretados como um roteiro a ser seguido 
para a solução de um problema. 
Estudos sobre a complexidade do problema Min–E/Ou têm sido feitos desde a década de 
1970, quando Sahni apresentou uma prova de NP-completude para Min–E/Ou. No entanto, poucos 
avanços haviam sido feitos no que diz respeito a novas abordagens para esses problemas. 
Sob o ponto de vista da complexidade parametrizada, uma teoria recente e promissora para o 
tratamento de problemas NP-difíceis, foi provado que o problema  Min–E/Ou é tratável por 
parâmetro fixo, quando fixados um parâmetro   para o custo máximo do subgrafo-solução e um 
parâmetro   para o número de arcos de saída de mesmo peso para os vértices do tipo   
. Também 
foi mostrado que as versões  Min–X-de-Y( ) e  Exato–X-de-Y( ) do problema  Min–X-de-Y são 
W[1]-difíceis, o que significa que o problema  Min–X-de-Y permanece intratável mesmo fixado um 
parâmetro   
para o custo. 
173 
PESQUISA OPERACIONAL PARA O DESENVOLVIMENTO 
Referências 
Arenales, M. N. & Vianna, A. C. G. (2006). O problema de corte de placas defeituosas. Pesquisa 
Operacional, 26(2):185–202. 
Barbosa, V. C. (2002). The combinatorics of resource sharing. In Fialles, M. & Gomes, F., editors, 
Models for Parallel and Distributed Computation: Theory, Algorithmic Techniques and 
Applications, pages 27–50. Kluwer Academic Publishers, The Netherlands.  
Corandi, R. & Westfechtel, B. (1998). Version models for software configuration management. 
ACM Computing Surveys, 30(2):332–282. 
Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2002). Algoritmos de grafos. In 
Algoritmos: Teoria e Pratica, pages 468–470. Campus, Rio de Janeiro. 
Cui, Y. (2011). Fast heuristic for constrained homogenous t-shape cutting patterns. Applied 
Mathematical 
Modelling, 
doi: 
10.1016/j.apm.2011.11.005.  
http://www.sciencedirect.com/science/article/pii/S0307904X11006937. 
Downey, R. & Fellows, M. (1999). Parameterized Complexity. Springer. 
Flum, J. & Grohe, M. (2006). Parameterized Complexity Theory. Springer. 
Gallo, G., Longo, G., Nguyen, S., & Pallottino, S. (1993). Directed hypergraphs and applications. 
Discrete Applied Mathematics, 42:177–201. 
Hansen, E.&Zilberstein, S. (2001). Lao*: A heuristic search algorithm that finds solutions with 
loops. Artificial Intelligence, 129:35–62. 
Morabito, R. & Pureza, V. (2010). A heuristic approach based on dynamic programming and 
and/or-graph search for the constrained two-dimensional guillotine cutting problem. Annals of 
Operations Research, 179:297–315. 10.1007/s10479-008-0457-4. 
Niedermeier, R. (2006). Invitation to Fixed-Parameter Algorithms. Oxford Lecture Series in 
Mathematics and Its Applications, Oxford University Press. 
Nilsson, N. J. (1971). Problem-reduction representations. In Dojny, R. F. & Eakins, M., editors, 
Problem Solving Methods in Artificial Intelligence, pages 80–112.McGraw-Hill, United States of 
America. 
Sahni, S. (1974). Computationally related problems. Siam Journal on Computing, 3(4):262–279. 
Schaeffer, J., Plaat, A., & Junghanns, A. (2001). Unifying single-agent and two-player search. 
Information Sciences, 135(3-4):151–175