See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/268205759



SCC: Um Compilador C como Ferramenta de Ensino de Compiladores

Article



CITATIONS                                                                                              READS

0                                                                                                      2,156


7 authors, including:

            Juliano Henrique Foleiss                                                                              Valéria Delisandra Feltrim
            Federal University of Technology of Paraná                                                            State University of Maringá
            21 PUBLICATIONS 56 CITATIONS                                                                          44 PUBLICATIONS 284 CITATIONS

              SEE PROFILE                                                                                            SEE PROFILE




 All content following this page was uploaded by Valéria Delisandra Feltrim on 10 January 2017.

 The user has requested enhancement of the downloaded file.
                       Workshop sobre Educação em Arquitetura de Computadores - WEAC 2009




     SCC: Um Compilador C como Ferramenta de Ensino de Compiladores


   Juliano Henrique Foleiss, Guilherme Puglia Assunção, Eduardo Henrique Molina da Cruz,
                Ronaldo Augusto de Lara Gonçalves, Valéria Delisandra Feltrim
               Universidade Estadual de Maringá / Departamento de Informática
   {juliano.foleiss, guilherme.assuncao, eduardo.cruz, ronaldo, valeria.feltrim}@din.uem.br


                     Resumo                                      A entrada do compilador é um programa escrito em
                                                              linguagem C e sua saída é uma listagem de código de
O SCC (SOIS C Compiler) é um compilador da                    montagem compatível com o montador SASM. O
linguagem C padrão ANSI que gera código de                    programa também pode ser automaticamente montado,
montagem compatível com o SASM, o montador do                 sem a necessidade de invocar o montador
ambiente SOIS. O SCC foi desenvolvido para permitir           manualmente.
que programas possam ser escritos em C e executados           O SCC é capaz de gerar código para todas as
sob inspeção. O compilador SCC oferece recursos que           construções da linguagem C, tais como tipos de dados
facilitam o ensino e a aprendizagem de compiladores           definidos por usuário, ponteiros, todas as instruções de
incluindo modos de depuração passo a passo e                  controle e repetição, enumerações, atribuição de
visualização dos artefatos gerados durante o processo         valores iniciais às variáveis e outras características
de compilação. Experimentos com o simulador                   comuns as linguagens imperativas.
mostram a sua aplicabilidade e importância.                      Modos de depuração foram implementados, de
                                                              maneira que todo o processo de compilação pode ser
1. Introdução                                                 detalhado passo-a-passo. Assim como no SASM, que
                                                              possui funcionalidade similar, os modos de depuração
   O SOIS (Sistema Operacional Integrado Simulado)            podem ser utilizados no ensino, com o intuito de
[5, 9] é um ambiente de simulação integrado,                  mostrar todas as fases do processo de compilação, a
envolvendo a simulação parametrizada de Compilador,           inter-relação de seus componentes e artefatos, além de
Sistema Operacional, Processador e Sistema de E/S,            permitir a visualização dos resultados gerados.
possibilitando a escrita, execução e depuração de                A Seção 2 deste artigo apresenta alguns trabalhos
programas reais em um ambiente simulado.                      relacionados. Na Seção 3 é feita uma revisão do
   Em uma etapa anterior [8], o montador SASM foi             processo de compilação. A Seção 4 expõe brevemente
desenvolvido, que por sua vez lê um programa escrito          o precursor do SCC, o SASM. A Seção 5 explica o
em linguagem de montagem e gera um arquivo com                SCC em termos de sua implementação, estruturas de
código objeto da arquitetura IA-32 [10]. O intuito era        dados e algoritmos. A Seção 6 mostra alguns casos em
facilitar o desenvolvimento do compilador, deixando a         que o SCC pode ser utilizado para o auxílio no ensino
cargo deste a tradução da linguagem C para um código          de disciplinas que abordem o processo de compilação.
de montagem compatível com o SASM.                            Finalmente, na Seção 7, são apresentadas as
   Embora existam diversos compiladores da                    conclusões e possíveis trabalhos futuros.
linguagem C para a arquitetura IA-32, sendo o
exemplo mais conhecido o compilador GCC da GNU                2. Trabalhos relacionados
[12], justifica-se o desenvolvimento de um compilador
da linguagem C para o SOIS pelo fato do simulador                Poucos trabalhos têm sido desenvolvidos com o
não contemplar todo o conjunto de instruções. Além            propósito de ensinar o processo de compilação,
disso, este trabalho também tem como objetivo                 conforme relatados nesta seção. O compilador
proporcionar facilidades que ajudem no ensino de              educacional Verto [11] foi escrito na linguagem de
disciplinas que abordem o processo de compilação de           programação Java. A linguagem compilada é baseada
linguagens imperativas de alto nível.                         em português estruturado. O foco principal do Verto
                                                              são as fases finais do processo de compilação, síntese




                                                         15
                        Workshop sobre Educação em Arquitetura de Computadores - WEAC 2009




de código intermediário e geração de código-objeto,             essas as fases mais complexas no desenvolvimento de
utilizando uma técnica de análise léxica simples e um           compiladores; (ii) gera código real Intel IA-32; (iii)
método de análise sintática recursiva descendente. O            oferece vários modos de depuração passo-a-passo
aluno tem a oportunidade de consultar a saída de cada           distintos em cada fase da compilação; e (iv) está
uma das fases da compilação por meio de uma                     inserido em um ambiente integrado com sistema
interface de janelas, podendo visualizar as saídas do           operacional, processador e dispositivos de E/S,
analisador léxico, a tabela de símbolos, a seqüência de         permitindo uma maior amplitude de investigação e
regras sintáticas e as movimentações na pilha                   aprendizado.
semântica. A principal deficiência desse compilador é
que a linguagem alvo é baseada em um conjunto bem               3. Processo de compilação
reduzido de instruções, o qual é executado pelo
simulador arquitetural hipotético Cesar.                            Um compilador é dividido internamente em fases,
    Outro compilador educacional, o ComPas [6], tem             que definem as etapas funcionais do processo de
como objetivo principal ensinar como o compilador               compilação. Embora na prática algumas dessas fases
trabalha, mostrando por meio de tabelas comentadas as           sejam executadas de maneira intercalada, elas podem
informações geradas durante o processo de                       ser efetivamente codificadas separadamente.
compilação. O compilador pode gerar código Intel ou                 Com efeito, um compilador utiliza uma arquitetura
código para um processador de propósitos                        de software denominada pipe. Um programa nessa
educacionais E97 a partir de programa fonte escrito em          arquitetura consiste em uma seqüência de componentes
um subconjunto da linguagem Pascal. O compilador                c0, c1, ..., cn tal que a entrada para um componente cx,
permite demonstrar diversas características de alto             x>0 é a saída do componente x – 1 e a entrada para o
nível, incluindo, variáveis, tipos de dados, organização        componente c0 são os dados a serem processados [13].
dos dados na memória RAM, métodos das principais                No caso específico do compilador, os componentes
estruturas algorítmicas e detalhes do uso de                    correspondem às fases do processo de compilação.
procedimentos, entre outras.                                        O analisador léxico é responsável por ler caracteres
    A ferramenta C-Gen [2] objetiva possibilitar a              do código-fonte e categorizar suas seqüências em
geração de compiladores por parte do usuário,                   unidades lógicas denominadas tokens para serem
exibindo o funcionamento do processo de                         utilizadas por outras partes do compilador, como o
reconhecimento passo a passo por meio de uma                    analisador sintático. De maneira simplificada, a análise
interface gráfica. A ferramenta permite o uso de                léxica se assemelha à atividade de soletrar. Existem
diferentes métodos de reconhecimento para cada passo            três categorias básicas de tokens.
da compilação. Os passos da compilação são                          A primeira é a de palavras reservadas, como
implementados como plugins que devem reconhecer as              WHILE ou DO que representam as cadeias “while” e
respectivas entradas e produzir saídas correspondentes.         “do” na linguagem C. A segunda categoria é a de
Existem plugins para a edição de autômatos finitos,             símbolos especiais, como MAIOR ou MENOR que
geração de analisadores sintáticos e criação de                 representam os caracteres “>” e “<” respectivamente.
analisadores semânticos.                                        A terceira categoria de tokens representa cadeias
    Em [4] é apresentado o simulador CompilerSim,               múltiplas de caracteres. Exemplos dessa categoria são
desenvolvido em Delphi, com objetivo de permitir a              ID e NUM, que usualmente representam um
experimentação de conceitos e princípios das fases de           identificador e um número, seguindo as regras lexicais
um compilador em salas de aula, como ferramenta de              definidas no projeto da linguagem. Uma peculiaridade
apoio as disciplinas que abordam as áreas de                    da terceira categoria é que uma quantidade
compiladores. O simulador executa um processo de                potencialmente infinita de caracteres pode ser
análise de código de programação baseado em                     classificada como um token. Para diferenciá-los, é
subconjunto da linguagem Pascal, não tratando                   necessário manter a cadeia de caracteres específica,
aspectos envolvendo registros, vetores, operações de            denominada lexema, atrelada ao seu respectivo token.
E/S em arquivos, ponto-flutuante e otimização de                    Embora a tarefa do analisador léxico seja converter
código, entre outras simplificações. A interface gráfica        o código-fonte em uma seqüência de tokens, ele
se limita basicamente a mostrar os tokens identificados         raramente faz isso de uma só vez [1, 9]. Como
na análise léxica.                                              alternativa, o analisador léxico fica subordinado ao
    O compilador SCC proposto neste artigo difere dos           analisador sintático, que é responsável por requisitar o
trabalhos relatados nesta seção em quatro aspectos: (i)         próximo token quando necessário.
foca em especial o ensino da análise semântica e da
geração de código, uma vez que entendemos serem




                                                           16
                       Workshop sobre Educação em Arquitetura de Computadores - WEAC 2009




    A tarefa do analisador sintático é determinar a            Se o código intermediário utilizado for independente
estrutura sintática de um programa a partir dos tokens         de arquitetura, o gerador de código-alvo é o único
passados pelo analisador léxico e gerar uma árvore de          componente do compilador que precisa ser reescrito
análise sintática, também chamada de árvore sintática,         para prover portabilidade.
que represente essa estrutura. Durante a análise
sintática, o analisador léxico é invocado sob demanda          4. Visão geral dos módulos do SOIS
do analisador sintático à medida que a análise
progride.                                                          Em sua versão atual, o SOIS possui módulos para a
    A estrutura da árvore sintática depende                    simulação de processador e sistema de E/S, sistema
intrinsecamente da estrutura específica da linguagem           operacional, montador e compilador.
sendo compilada. Essa árvore é definida como uma                   O módulo Processador simula uma arquitetura
estrutura de dados dinâmica, em que cada nó é                  superescalar completa. Esse modelo de processador
composto por um registro contendo vários campos que            implementa um pipeline de 6 estágios e realiza
podem ser utilizados durante todo o processo de                execução fora-de-ordem e especulativa, com previsão
compilação. A árvore sintática pode ser considerada o          de desvios e escalonamento dinâmico de instruções
principal artefato do processo de compilação, pois tal         baseado no algoritmo de Tomasulo [14]. A arquitetura
estrutura é utilizada e incrementada nas fases de              alvo do processador simulado é baseada na IA-32
compilação subseqüentes.                                       desenvolvida pela Intel, a qual tem sido usada na
    A análise semântica é responsável por garantir que         maioria dos microprocessadores existentes hoje no
um programa está coerente com as regras semânticas             mercado, tais como o Pentium da Intel e Athlon da
da linguagem de programação específica, verificando            AMD. O conjunto de instruções suportado é um
sua correção e viabilidade para execução. Em uma               subconjunto do padrão da IA-32, contendo as
linguagem com tipos estáticos, como a linguagem C, a           principais instruções de lógica, aritmética, desvio,
análise semântica também é responsável pela                    memória e E/S. O simulador interage com um sistema
construção e manutenção da tabela de símbolos,                 de E/S também simulado, incluindo teclado, disco
utilizada para acompanhar a definição dos nomes em             rígido, barramento, interrupção e clock. O simulador é
um programa, a fim de possibilitar a inferência e              totalmente parametrizado, configurável e possui
verificação de tipos em expressões e declarações. As           contadores de acessos, o que permite simular
verificações mais comuns da análise semântica são:             diferentes cenários de execução e avaliar o
verificação de compatibilidade de parâmetros formais e         desempenho.
atuais (tipos e quantidade), compatibilidade de tipos              Por meio de uma interface gráfica com o usuário é
em instruções de atribuição, determinação de                   possível visualizar o comportamento funcional e o
expressões constantes, verificação de declaração antes         estado dos componentes durante a execução dos
do uso e regras de escopo.                                     programas, assim como a obtenção de dados
    O gerador de código intermediário é responsável            estatísticos e quantitativos importantes para a avaliação
por gerar uma representação intermediária ao código-           de desempenho sobre diferentes configurações.
final a partir da árvore sintática e da tabela de                  Sua interface gráfica é amigável e possui recursos
símbolos, tal que essa representação se aproxime do            além daqueles encontrados em simuladores
código-alvo. A utilização de código intermediário é            comumente usados, tais como visualização das
especialmente útil quando o objetivo do compilador é           dependências entre as instruções, o estado de execução
produzir código eficiente, que requer uma grande               das unidades funcionais e o conteúdo da memória
quantidade de análise das propriedades do código-alvo          cache, constituindo-se em uma poderosa ferramenta de
[9]. O código intermediário também pode ser utilizado          ensino, aprendizagem e avaliação de desempenho de
para se obter um compilador que possa gerar código-            arquiteturas superescalares. [5]
alvo compatível com diversas arquiteturas. Isso pode               O módulo Sistema Operacional do SOIS [5] tem
ser obtido se o modelo de código intermediário for             como principal objetivo demonstrar a interação
independente de arquitetura.                                   existente entre o hardware e software básico presente
    O gerador de código-alvo é responsável por traduzir        no módulo Processador. Para facilitar a compreensão
o código intermediário em código-alvo. Para realizar           do ambiente, o sistema operacional é estruturado de
essa tarefa deve-se conhecer a localização de todas as         forma que seja possível a depuração em diversos níveis
variáveis e temporários, além do código para a                 de detalhamento de seus principais componentes
manutenção do ambiente de execução. Uma questão                funcionais, tais como escalonador de processos,
importante nessa fase é a alocação de registradores e a        tratador de interrupções, gerenciador de memória e de
manutenção das informações sobre o uso dos mesmos.




                                                          17
                       Workshop sobre Educação em Arquitetura de Computadores - WEAC 2009




teclado, para que assim todos os módulos do SOIS se            referentes a funcionalidades que não foram
relacionem da forma mais real possível.                        contempladas pela proposta do ambiente SOIS. Essas
   Procurando manter a fidelidade da simulação do              funcionalidades serão comentadas adiante nesta seção.
SOIS e um ambiente de fácil compreensão, o sistema                 A análise sintática foi implementada com o auxílio
operacional simulado implementa alguma de suas                 do gerador de analisadores sintáticos bison [3], que faz
rotinas básicas utilizando os métodos das classes do           parte do conjunto de ferramentas GNU. O bison recebe
módulo do sistema operacional. Para melhorar o                 como entrada um arquivo contendo a gramática da
desempenho, algumas das rotinas básicas foram                  linguagem, juntamente com um conjunto de ações
escritas em código Assembly do processador simulado.           específicas, denominadas ações embutidas, a serem
Esses dois modos distintos implementam um ambiente             executadas em certos pontos da análise sintática.
real, fazendo com que seja possível que o usuário                  O bison gera analisadores sintáticos ascendentes
desenvolva as rotinas do sistema operacional em                LALR(1). Uma peculiaridade dos analisadores
linguagem de montagem e analise como é o                       ascendentes é existência de uma pilha de valores que é
comportamento do sistema operacional simulado.                 mantida conforme a análise sintática progride. Cada
   O SASM é o montador do SOIS. Desenvolvido                   símbolo gramatical do lado direito das produções
inicialmente como um passo precursor para o                    possui uma variável nessa pilha, que é desempilhada
desenvolvimento do SCC, o SASM contempla todas as              toda vez que ocorre uma redução. No lugar desses
instruções suportadas pelo módulo Processador do               símbolos é empilhado o símbolo do lado esquerdo da
SOIS. Assim como o SCC, o SASM também foi                      produção. A atribuição de um valor a cada símbolo
concebido com o objetivo de auxiliar no ensino [8],            gramatical deve ser feita manualmente, por meio da
principalmente na disciplina de arquitetura de                 utilização de ações embutidas.
computadores. Seus modos de depuração permitem                     No SCC, uma árvore sintática é montada utilizando
que o aluno visualize passo-a-passo todo o processo de         esse mecanismo da pilha de valores. Para isso, o tipo
montagem e, principalmente, evidenciam as                      da pilha de valores foi definido como nós de árvore
peculiaridades de uma arquitetura CISC. De forma               sintática. Então, para cada regra gramatical foram
semelhante, foram implementadas facilidades voltadas           criadas ações embutidas utilizadas para alocar e ligar
ao ensino no SCC, que serão descritas na Seção 6.              os nós da árvore sintática.
                                                                   A gramática utilizada pelo SCC é uma versão
5. Compilador SCC                                              modificada do padrão ANSI C. As modificações foram
                                                               necessárias devido a limitações no conjunto de
    O SCC é um compilador para a linguagem C                   instruções do módulo Processador do SOIS, que não
proposto para o ambiente SOIS. Foi desenvolvido em             simula todas as instruções necessárias para a
C sob a plataforma GNU/Linux, utilizando a                     implementação da linguagem ANSI C por completo.
abordagem estruturada, implementando as diferentes             As principais modificações foram: somente os tipos
fases de maneira independente, prezando a utilização           primitivos int e void são válidos (structs ainda são
de subprogramas simples e fáceis de modificar.                 permitidos); declarações de função só utilizam o
    O processo de compilação escolhido é o proposto            padrão “tipo nome (parâmetros) {...}”. Mesmo com
por Louden [9] e revisado na Seção 3. Basicamente, a           tais modificações, é possível implementar todos os
compilação é feita em cinco fases: análise léxica,             programas que o SOIS pode executar.
análise sintática, análise semântica, geração de código            Foi implementado um procedimento denominado
intermediário e geração de código final. A etapa de            parse, que chama o analisador sintático, extrai a árvore
otimização de código, que é intermediária entre a              sintática gerada durante a análise sintática e a retorna
geração de código intermediário e a geração de código          ao programa principal do compilador. Mediante a
final, será implementada em um trabalho posterior.             opção –a na execução do compilador, a árvore sintática
    A análise léxica do SCC foi implementada com o             é apresentada, mostrando, de forma didática, a
auxílio do gerador de analisadores léxicos flex [7]. O         estrutura sintática do programa sendo compilado.
flex é um programa que recebe como entrada um                      A análise semântica foi dividida em dois grupos: (i)
arquivo com um conjunto de expressões regulares.               a geração, manutenção e atualização da tabela de
Para cada expressão regular, pode-se associar um token         símbolos; e (ii) outras verificações. Para cada grupo de
específico. Também é possível recuperar o lexema de            verificações semânticas, uma passada pela árvore
cada token reconhecido. No caso do SCC, as                     sintática é necessária. Embora seja possível fazê-la em
convenções léxicas da linguagem C foram mantidas,              uma única passada, foi decidido separá-las para
exceto pela remoção de algumas palavras-chave                  simplificar o processo de análise semântica, facilitando




                                                          18
                       Workshop sobre Educação em Arquitetura de Computadores - WEAC 2009




a compreensão do processo pelo usuário do                         O modo de depuração permite que o usuário
compilador, principalmente durante a depuração.                acompanhe, passo-a-passo, toda a execução do
    A tabela de símbolos é construída em um percurso           compilador e as interações entre seus componentes.
pré-ordem da árvore sintática. Com efeito, a tabela de         Isso dá ao usuário, primordialmente acadêmicos de
símbolos gerada pelo analisador semântico do SCC é             graduação cursando disciplinas de Compiladores,
na verdade uma “árvore de símbolos”. Ela recebe esse           Linguagens de Programação e Arquitetura de
nome, pois, para cada escopo, uma nova tabela de               Computadores, uma ótima oportunidade para verificar
símbolos é criada e ligada em seu pai estático. Ao             na prática como um compilador funciona. A descrição
reconhecer um novo símbolo, o mesmo é inserido em              dos modos de depuração aparece na próxima seção.
seu devido escopo. Para verificar se um símbolo está
definido em certo escopo do programa, basta fazer uma          6. Experimentos e Resultados
busca seqüencial, seguindo o apontador para o nó
estático de cada tabela de símbolos. Ao contrário da              Com a geração do código-alvo, o SCC atingiu um
abordagem proposta em [9], que propõe um sistema de            de seus objetivos, o de gerar código que pode ser
pilhas, a árvore de símbolos fica preservada para uma          montado pelo SASM, montador do SOIS, permitindo
análise pós-compilação, o que é vantajoso no uso do            que programas em C possam ser executados pelo
compilador para fins educacionais. Mediante a opção -          simulador do ambiente.
t, o compilador mostra a tabela de símbolos detalhando            Seu segundo objetivo, o de atuar como ferramenta
o aninhamento de escopos e os atributos de cada                de ensino, é alcançado por meio de funcionalidades
símbolo.                                                       extras apresentadas nesta seção. Tais funcionalidades
    As demais verificações semânticas são realizadas           devem auxiliar no entendimento de áreas específicas
em um único percurso pós-ordem pela árvore sintática.          da construção e execução de um compilador real.
As verificações implementadas são: verificação de                 A Figura 1 apresenta um trecho de código C que
compatibilidade de parâmetros formais e atuais (tipos e        será utilizado como base para os exemplos discutidos
quantidade), compatibilidade de tipos em instruções de         ao longo desta seção. Esse trecho de código mostra
atribuição, determinação de expressões constantes,             duas funções: pot e main. A função pot recebe dois
verificação de declaração antes do uso e regras de             parâmetros: base e exp, que são utilizados para calcular
escopo.                                                        a potência baseexp recursivamente. A função main
    Na geração de código intermediário, a                      simplesmente invoca a função pot para calcular 5a
representação intermediária utilizada foi o código de          onde a = 2.
três endereços [1, 9]. Sua implementação consiste em              A capacidade de visualizar os artefatos
um vetor dinâmico de quádruplas, onde cada elemento            intermediários do processo de compilação é uma das
é uma instrução de código intermediário. As                    funcionalidades implementadas no SCC. Para cada
quádruplas são compostas de um campo que indica a              uma das fases de compilação, pode-se requisitar, via
operação a ser realizada naquela instrução e os demais         linha de comando, que seja mostrado o artefato
campos indicam os operandos referenciados. Essa                correspondente. Todos os artefatos solicitados são
representação é independente de arquitetura e,                 apresentados ao final da compilação.
portanto, é possível que sejam feitas as otimizações
independentes de arquitetura. A opção -i faz com que o
compilador mostre o código intermediário gerado.
    A geração de código-alvo foi implementada
segundo a proposta de [1]. Esse algoritmo trabalha
sobre a representação de três endereços e mantém
atualizados os descritores de registradores e de
endereços, para a localização dos nomes e temporários.
    Como nem todas as instruções e modos de
endereçamento estão disponíveis no processador
simulado do SOIS, algumas instruções e soluções
propostas originalmente tiveram que ser substituídas
por seqüência de instruções equivalentes.                                    Figura 1. Código-exemplo
    A interface escolhida para o SCC foi uma interface
de linha de comando simples, com um sistema de ajuda              O artefato principal da fase de análise sintática é a
intuitivo e de fácil compreensão, que pode ser                 árvore sintática abstrata. Nela é mostrada a estrutura
invocado pela opção –?.                                        sintática do programa, permitindo que o aluno




                                                          19
                       Workshop sobre Educação em Arquitetura de Computadores - WEAC 2009




visualize o mapeamento de um programa-fonte em sua
árvore sintática correspondente. A Figura 2 mostra um
trecho de uma árvore sintática gerada pelo SCC a partir
do código mostrado na Figura 1.




              Figura 2. Árvore sintática
                                                                           Figura 3. Árvore de símbolos
    Como se pode notar, a árvore sintática manteve a
estrutura sintática do código intacta. Com a escolha              Conforme explicado na Seção 5, a árvore de
correta dos nós, criou-se uma relação de hierarquia            símbolos é composta de nós que são tabelas de
entre os elementos sintáticos, permitindo uma melhor           símbolos. Cada nó nessa árvore representa um escopo
visualização da estrutura sintática do código.                 e as identações representam as relações entre os
     A relação hierárquica entre os nós é dada pela            escopos. No exemplo, o escopo global (que é sempre a
identação, ou seja, um nó com uma identação maior              raiz da árvore de símbolos) possui somente dois
fica mais abaixo na árvore sintática. A relação entre          símbolos: main e pot, que são os dois símbolos que
um nó pai e um nó filho pode ser verificada pelo               representam as funções definidas nesse escopo. No
número no início de cada linha. Por exemplo, o                 escopo pot, verifica-se que os parâmetros exp e base
número 1 indica que aquele nó é o filho número 1 do            estão corretamente inseridos na tabela. Pela identação,
nó com um nível de identação inferior a ele. No                nota-se que pot é um escopo aninhado em global. Já no
exemplo, o nó T_PARAMETRO com o número 0 é                     caso do escopo main, nota-se que está no mesmo nível
filho de T_PARAMETROS, que por sua vez é filho de              de pot, ambos aninhados em global.
T_FUNC_DECL, que por sua vez é filho de T_FUNC.                   Para verificar os nomes visíveis em um determinado
A relação de irmandade entre os nós é mostrada por             escopo na representação utilizada na Figura 3, basta
uma      ao invés de um número. Esse símbolo indica            consultar a tabela do escopo e suas tabelas ancestrais
que esse nó é irmão do nó anterior de mesma                    (no caso do exemplo, a tabela global). Dessa maneira,
identação.                                                     é possível verificar de maneira simples se um nome
    Outro artefato interessante que pode ser bem               está definido em um determinado escopo ou não. Vale
explorado para o entendimento completo de um                   ressaltar que cada nó dessa árvore corresponde ao
compilador é a tabela de símbolos, que neste trabalho é        registro de ativação de cada um dos escopos presentes.
chamada de árvore de símbolos devido à sua                        De forma similar à estrutura sintática, a estrutura do
estruturação. A Figura 3 mostra a árvore de símbolos           código intermediário também pode ser visualizada.
relativa ao programa da Figura 1.                              Nela, cada linha representa uma instrução do código de




                                                          20
                        Workshop sobre Educação em Arquitetura de Computadores - WEAC 2009




três endereços correspondente ao código sendo
compilado.
    Além da visualização dos artefatos intermediários, o
SCC conta com quatro modos de depuração,
correspondentes a cada um dos quatro componentes
principais do compilador: o analisador sintático
(SIN_DEBUG),           o      analisador      semântico
(SEM_DEBUG), o gerador de código intermediário
(CI_DEBUG) e o gerador de código-alvo
(CA_DEBUG). Cada modo de depuração pode ser
acionado de forma independente na linha de comando,
podendo ser executados concorrentemente.
    No modo de depuração do analisador sintático
(SIN_DEBUG), as ações do analisador sintático
ascendente LALR (1) são mostradas passo-a-passo,
permitindo que o aluno acompanhe todo o processo de
análise sintática, além da construção da árvore sintática
abstrata.
    Por apresentar grande quantidade de detalhes, esse              Figura 4. Árvore Sintática Abstrata Anotada
modo de depuração foi dividido em níveis 1 e 2, que
indicam o nível de detalhamento a ser mostrado. No                   A Figura 5 apresenta parte da verificação de tipos
nível 1, somente as reduções do analisador sintático             realizada no código da Figura 1. As verificações
são mostradas, focando a estrutura gramatical da                 semânticas descritas na Seção 5 são contempladas
linguagem e na construção da árvore sintática. No                nesse modo. O modo de depuração do analisador
nível 2 são mostradas todas as mensagens do nível 1,             semântico pode ser acionado com a opção –dsemx
além das mensagens relativas ao processo de                      onde x define o nível de detalhe desejado.
funcionamento do analisador sintático LALR (1). Esse                 O modo de depuração do gerador de código
modo de depuração pode ser acionado com a opção –                intermediário é composto por um nível e mostra o
dsinx onde x determina o nível de detalhe desejado.              trajeto feito pela árvore sintática para a geração do
    O modo de depuração do analisador semântico                  código intermediário, além das ações executadas em
(SEM_DEBUG) é responsável por mostrar o                          cada nó. Esse modo de depuração pode ser acionado
funcionamento do analisador semântico do SCC e é                 com a opção –dci.
dividido em duas partes. A primeira parte, relativa à                O modo de depuração do gerador de código-alvo
construção da tabela de símbolos é denominada nível              também é composto de apenas um nível e mostra como
1. A segunda parte, denominada nível 2, contém todas             a tradução do código-intermediário para o código-final
as mensagens do nível 1, além de mostrar a travessia             é feita. Esse modo foca no mapeamento das instruções
feita na árvore sintática para a realização das                  hipotéticas utilizadas na representação intermediária
verificações semânticas. Durante a travessia, anotações          para as instruções de máquina reais e específicas do
na arvore sintática são feitas, terminando o processo            simulador do SOIS. Esse modo de depuração pode ser
com uma nova estrutura de árvore sintática,                      acionado com a opção –dca.
denominada árvore sintática abstrata anotada. Nessa                  A principal vantagem dos modos de depuração é
estrutura, informações semânticas, como o tipo de                auxiliar ao aluno na percepção da seqüência de eventos
dados de um nó, são derivadas e devidamente                      que compõem o processo de compilação. Assim como
guardadas nos nós correspondentes da árvore. A Figura            no SASM [8], o uso dos modos de depuração pelos
4 mostra um trecho dessa árvore correspondente ao                alunos deve ser, de início, supervisionado pelo
código da Figura 1.                                              professor, para que o máximo de proveito possa ser
                                                                 feito da ferramenta, unindo a vasta teoria de
                                                                 compiladores com seus respectivos algoritmos e
                                                                 estruturas de dados.




                                                            21
                                    Workshop sobre Educação em Arquitetura de Computadores - WEAC 2009




                            Figura 5. Modo de depuração do analisador semântico (SEM_DEBUG)

           7. Conclusão e trabalhos futuros                                   de Apoio na Área de Compiladores, II Simpósio Internacional de
                                                                              Educação       –     Linguagens      Educativas:  Perspectivas
                                                                              Interdisciplinares na Atualidade, Bauru, 2008.
               Usualmente, as disciplinas de Compiladores
           apresentam métodos de se implementar cada uma das                  [5] Cruz, E. H. M.; Foleiss, J. H.; Assunção, G. P.; Conçalves,
           fases citadas. No entanto, como essas disciplinas                  R. A. L.. Ferramenta de Simulação de Processador para Ensino
           possuem uma carga teórica alta, os trabalhos propostos             de Graduação e Pesquisa Científica. In: Sulcomp, 2008,
                                                                              Criciúma - SC. Sulcomp, 2008.
           normalmente não utilizam todos os recursos
           aprendidos na teoria. A proposta do SCC é apresentar               [6] Eremin, Evgeny A. Educational Model of Computer as a
           aos alunos dessas disciplinas um compilador que                    Base for Informatics Learning, International Journal
           utilize métodos normalmente empregados no                          "Information Theories & Applications" Vol.12, Ithea Institute,
           desenvolvimento de compiladores profissionais,                     Bulgágia, 2005.
           especificamente, mostrando desafios que podem
                                                                              [7] Flex – The Fast Lexical Analyzer. Disponível em
           aparecer no projeto e na implementação de um
                                                                              http://flex.sourceforge.net/. Acesso em 10/8/2009
           compilador para uma arquitetura CISC.
               Além dos modos de depuração, o SCC pode ajudar                 [8] Foleiss, J. H.; Feltrim, V. D.; Gonçalves, R. A. L. SASM:
           no entendimento do processo de compilação por meio                 Uma ferramenta para o ensino do processo de montagem e
           da disponibilização dos artefatos intermediários do                conjunto de instruções CISC In: WEI – XVII Workshop sobre
           processo, como a árvore sintática, a tabela de símbolos,           Educação em Computação, XXIX Congresso da SBC 2009,
                                                                              Bento Gonçalves – RS
           código intermediário e código-final (linguagem de
           montagem).                                                         [9] Louden, K. C.; Compiladores: Princípios e Práticas. São
               Conforme citado anteriormente, a etapa de                      Paulo, Editora Pioneira Thomson Learning, 2004.
           otimização de código não foi incluída neste trabalho
           devido ao curto tempo disponível para a execução do                [10] Pentium® Processor Architecture Software Developer’s
           mesmo. No entanto, um módulo de otimização pode                    Manual, Volumes 1, 2 e 3: Basic Architecture, Instruction Set
                                                                              Reference e System Programming Guide. Intel Corporation.
           ser facilmente acoplado ao sistema, já que a arquitetura           2004.
           de software em pipe utilizada prevê esse tipo de
           atualização. A visualização gráfica da árvore sintática            [11] Schneider, C. S.; Passerino, L. M.; Oliveira, R. F.
           e de outros artefatos também pode ser incorporada ao               Compilador Educativo VERTO: ambiente para aprendizagem de
           SCC, contribuindo ainda mais para a fixação desses                 compiladores, CINTED-UFRGS: Novas Tecnologias na
                                                                              Educação, V.3 Nº 2, Novembro, 2005.
           conceitos.
                                                                              [12] Stallman, R. M. “Using and porting the GNU Compiler
           8. Referências Bibliográficas                                      Collection”, Free Software Foundation, ISBN 059510035X

           [1] Aho, A. V.; Sethi, R.; Ullman, J. D.; Compiladores:            [13] Somerville, I. Engenharia de Software. 8ª edição. São
           Princípios, Técnicas e Ferramentas, Rio de Janeiro, Editora        Paulo: Addison Wesley, 2003
           Livros Técnicos e Científicos, 1995
                                                                              [14] Tomasulo, R. M., “Na Efficient Algorithm for Exploiting
           [2] Backes, J.; Dahmer, A. C-gen – Ferramenta de Apoio ao          Multiple Arithmetic Units”, IBM Journal of Research and
           Estudo de Compiladores, XIV WEI - Workshop sobre Educação          Development, pp. 25-33, January 1967. (IBM JORNAL, 1967)
           em Computação, Campo Grande, Julho, 2006.

           [3] Bison – GNU Parser Generator. Disponível            em
           http://www.gnu.org/software/bison. Acesso em 5/7/2009

           [4] Costa, K. A. P.; Silva, L.A.; Brito, T. P., Auxilio no
           Ensino de Compiladores: Software Simulador como Ferramenta




                                                                         22

View publication stats
