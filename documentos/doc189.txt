Uma Visão Geral Sobre
Sistemas Virtualizados

∗ † ‡
Rodolfo Wottrich Thiago Genez Walisson Pereira

RA 134077 RA 100616 RA 115168
Instituto de Computação (IC) Instituto de Computação (IC) Instituto de Computação (IC)

Universidade Estadual de Universidade Estadual de Universidade Estadual de
Campinas (UNICAMP) Campinas (UNICAMP) Campinas (UNICAMP)

RESUMO logicamente dividida em um monitor de máquina virtual –
Em computação, o termo virtualização é um conceito am- Virtual Machine Monitor (VMM), também conhecido como
plo, que pode ser definido como a capacidade de estender hypervisor – e em várias máquinas virtuais – Virtual Ma-
ou substituir um recurso (software ou hardware), de modo a chines (VMs) [12]. Além disso, cada máquina virtual pode
imitar um comportamento. Este trabalho tem como objetivo ser independente, podendo ter seus próprios aplicativos, ser-
apresentar uma visão geral dos aspectos relacionados ao uso viços e Sistema Operacional (SO); ou seja, cada máquina vir-
de sistemas computacionais virtualizados, incluindo os prin- tual atua como se estivesse instalado isoladamente em uma
cipais conceitos básicos, tipos de máquinas virtuais, formas máquina f́ısica. O hypervisor, por sua vez, tem que gerenciar
de virtualização e a virtualização da arquitetura x86. Além essas VMs e fornecer recursos computacionais virtualizados.
disso, apresentamos as principais vantagens e desvantagens
do uso da virtualização e a tendência dela na computação Neste trabalho, vamos apresentar uma visão geral sobre sis-
em nuvem. Com este trabalho, mostramos que a virtualiza- temas virtualizados, incluindo interfaces entre hardware e
ção é uma técnica muito importante para o estado atual da software. O restante deste trabalho esta organizado da se-
computação e está presente em diversas aplicações. guinte maneira. A Seção 2 descreve um breve histórico sobre

a virtualização que iniciou na década de 60. Na sequência,
Categorias e Descritores de Conteúdo a Seção 3 apresenta os conceitos básicos, incluindo diferen-

C.0 [Computer Systems Organizations]: General—Hard- ças entre abstração e virtualização, tipos de máquinas vir-

ware/Software Interfaces tuais, tipos de hypervisores, teorema de Popek & Goldberg
e maneira de realizar a virtualização. A virtualização da

Termos Gerais arquitetura x86 é apresentada na Seção 4, enquanto vanta-
gens e desvantagens de sistemas virtualizados são descritos

Arquitetura de Computadores, Virtualização na Seção 5. A Seção 6 relata as principais tecnologias de
virtualização de código-aberto, enquanto as tendências so-

Palavras-chave bre sistemas virtualizados são descritos na Seção 7. A Seção
Virtualização, Hypervisor, Máquinas virtuais, Processadores 8 finaliza este trabalho com as considerações finais.

1. INTRODUÇÃO
O termo genérico virtualização é utilizado, hoje em dia, 2. UM BREVE HISTÓRICO
para referenciar abstração dos recursos de um computador. O conceito de máquina virtual não é recente. Em meados da
Em outras palavras, virtualização é geralmente referenciada década de 60, o centro de pesquisa da IBM, usando a má-
como uma camada de software que abstrai as caracteŕısti- quina IBM 7044, fez uma imagem do 7044 em cada partição
cas f́ısicas do hardware, fornecendo recursos virtualizados do sistema. Cada imagem foi chamada de 7044/44X e foi
(de hardware) para as aplicações de alto ńıvel. Assim, atra- criada para que a IBM entendesse melhor os sistemas opera-
vés da virtualização, uma máquina f́ısica é, de modo geral, cionais multiprogramados. Esse foi o ińıcio da noção da IBM

de um máquina virtual, uma cópia de uma máquina atual em
∗rodolfo.wottrich@students.ic.unicamp.br. um espaço reduzido de memória [8]. No final da década, um
†thiagogenez@ic.unicamp.br. grupo da IBM constrúıu um sistema operacional e nomeou-o
‡walisson@ic.unicamp.br. the Cambridge Monitoring System (CMS). O CMS foi um

experimento em sistemas time sharing e finalmente tornou-
se a arquitetura usada para a máquina VM/370, que foi
vendida como um sistema time sharing. Várias empresas

É garantida a permissão para copiar, distribuir e/ou modificar este docu- e universidades usaram esse sistema operacional por permi-
mento sob os termos da Licença de Documentação Livre GNU (GNU tir que seu poder de processamento e recursos dispońıveis
Free Documentation License), versão 1.3 ou qualquer versão pos- pudessem ser compartilhados entre vários usuários. Cada
terior publicada pela Free Software Foundation. A licença está dis- usuário tinha sua própria máquina virtual para trabalhar e,
ponível em http://www.gnu.org/copyleft/fdl.html. apesar de compartilhar recursos com todos os demais usuá-
Este texto foi produzido usando exclusivamente software livre: sistema ope-
racionalLinux (distribuições Mint, Debian e Ubuntu), compilador de texto rios, suas ações não afetavam os demais. Na década de 70,
LATEXe gerenciador de referências BibTEX. Popek & Goldberg formalizaram vários conceitos associa-



dos às máquinas virtuais, e também definiram as condições aplicações (ou processos4.). Basicamente, o hardware exe-
necessárias para que uma plataforma de hardware suporte cuta as operações solicitadas pelas aplicações, através do
de forma eficiente a virtualização [17]. Na década de 80, a sistema operacional. Este, por sua vez, recebe essas solici-
popularização do PC barateou o custo do hardware e, con- tações através das chamadas de sistema (syscalls)5 via in-
sequentemente, inibiu a importância da virtualização. [14] terrupções6 e, além disso, controla o acesso ao hardware;
Desde a década de 70 já havia a ideia de criar programas essencialmente quando os recursos f́ısicos são compartilha-
de computador realmente portáteis, ou seja, programas que dos, como, por exemplo, memória, discos e dispositivos de
funcionem em qualquer plataforma. Esta ideia foi posśı- entrada/sáıda. Como dito na Seção 3.1, os computadores
vel somente em meados da década de 90, utilizando a noção são geralmente caracterizados por ńıveis de abstração entre
de máquinas virtuais para executar aplicações desenvolvidos software e hardware. Dessa forma, os SOs oferecem uma
em Java1. A principal caracteŕıstica da programação Java visão abstrata (e de alto ńıvel) dos recursos de hardware,
é o fato dela não gerar binários executáveis em arquiteturas a fim de facilitar o uso e desacoplar dependências tecnoló-
ou sistemas operacionais espećıficos, mas um bytecode que gicas subjacentes. Assim, abstrações fornecidas pelo SO às
deve ser executado pela Java Virtual Machine (JVM). Em aplicações são desenvolvidas incrementalmente e em ńıveis,
outras palavras, um bytecode em Java pode rodar em qual- os quais são separados por interfaces bem-definidas [6, 10].
quer arquitetura que tenha uma máquina JVM instalada. Portanto, cada interface encapsula as abstrações dos ńıveis
O mantra original do Java era “write once, run anywhere” inferiores, facilitando a evolução dos sistemas de computado-
(escreva uma vez, rode em qualquer lugar) [7]. Com o au- res de forma geral. Conforme ilustra a Figura 1, as interfaces
mento de desempenho e funcionalidades do hardware PC e o mais utilizadas entre os componentes de computação são o
surgimento da linguagem Java, o interesse pelas tecnologias conjunto de instruções – Instruction Set Architecture (ISA),
de virtualização voltou à tona [14]. chamadas de sistemas (system calls) e chamadas de biblio-

tecas (libcalls).

3. CONCEITOS BÁSICOS
Através da virtualização, é posśıvel que um programa desen-
volvido para uma plataforma A possa ser executada sobre
uma plataforma distinta B. Nesta seção vamos descrever os
principais conceitos sobre o funcionamento da virtualização.

3.1 Abstração e Virtualização
Antes de introduzirmos os conceitos básicos, temos que,
primeiramente, distinguir os termos abstração e virtualiza-
ção. Enquanto abstração consistem em providenciar uma Figure 1: Componentes e interfaces de um SO [6].

interface simplificada e homogênea para acessar os recursos
(hardware ou software), a virtualização cria novas interfa- Conjunto de instruções (ISA): Arquitetura do conjunto
ces a partir das existentes [22]. Por exemplo, os projetistas de instruções, ou código de máquina, aceito pelo processa-
de hardware da AMD e Intel implementam o conjunto de dor, incluindo as operações de acesso f́ısico aos dispositivos
instruções IA-322, enquanto os engenheiros de software da de hardware, tais como: memória, portas de entrada/sáıda
Microsoft desenvolvem aplicativos que são compilados para e relógio do sistema. Em outras palavras, é a interface bá-
esse conjunto espećıfico de instruções. Em outras palavras, sica entre hardware e software. A ISA é dividida em duas
como ambos grupos (projetistas de hardware e engenheiros partes: instruções de usuário (user ISA) e instruções de
de software) são independentes e compartilham o mesmo sistema (system ISA). A primeira está relacionada com as
conjunto de instruções, é esperado que o software Microsoft instruções do processador que são executadas em modo não-
(e.g com extensão .exe) executem corretamente em qual- privilegiado7 (espaço de usuário), instruções que não ofere-
quer hardware IA-32. Essa interface bem-definida de con- cem risco ao SO. Enquanto a segunda compreende as ins-
junto de instruções é a camada de abstração. Entretanto, truções do processador que são executadas em modo pri-
quando não há o compartilhamento do mesmo conjunto de vilegiado (espaço de núcleo), instruções que só devem ser
instruções, haverá, na maioria das vezes, conflito de execu- executadas pelo núcleo do SO ou sob sua supervisão.
ção; ou seja, o software não irá executar no hardware. É
nesse instante que entra em cena a virtualização, proporcio- Chamadas de sistema (syscalls): Instruções que são in-
nando uma camada de compatibilidade entre (i) software e vocadas pelos processos através de interrupções que, como
hardware e (ii) entre software. Nas próximas seções vamos 4O termo processo é geralmente usado para designar uma
apresentar melhores detalhes sobre virtualização. programa em execução

5O termo chamada de sistema é o mecanismo utilizado pelos
3.2 Interfaces de Sistema processos para requisitar um serviço do núcleo do SO.

6O termo interrupção é um sinal de indica uma troca de
De modo geral, computadores são utilizados através de três contexto, ou seja, o processador para de fazer o que está
grandes componentes [6]: hardware, sistema operacional3 e fazendo para atender o dispositivo que pediu a interrupção.

7Conjunto de instruções que não podem ser fornecidos livre-
1http://www.java.com/ mente para as aplicações, pois o seu uso indevido poder cau-
2Intel Architecture 32–bit sar problemas à integridade do SO. Por exemplo, acesso ao
3Em tempos modernos, os SOs são considerados multitarefa, disco (um recurso compartilhado); o acesso indiscriminado
pois permitem a coexistência de múltiplos processos simul- a qualquer área do disco pode comprometer a segurança e
tâneos. integridade do sistema de arquivos.



já descrito, são gerenciadas pelo sistema operacional. Por- independentes uma das outras e, em alguns casos, atuam
tanto, as chamadas de sistema possibilitam um acesso con- como se tivessem sido instaladas isoladamente no computa-
trolado das aplicações aos recursos compartilhados (memó- dor hospedeiro [24].
ria, disco, etc.) e às instruções privilegiadas do processador.

Chamadas de bibliotecas (libcalls): Coleção de sub-
programas que encapsulam chamadas de um sistema ope-
racional, facilitando o desenvolvimento de aplicações para o
próprio SO. Note que a biblioteca deve ser compilada para
a arquitetura na qual as aplicações serão executadas.

3.3 Virtualização e Máquinas Virtuais Figure 3: Acoplamento entre interfaces distintas [9].
Com o surgimento de várias arquiteturas de hardware e sis-
temas operacionais, as aplicações escritas para uma certa 3.3.1 Tipos de Máquinas Virtuais
plataforma operacional8 em geral não funcionam em outras

De acordo com o tipo de sistema convidado suportado, as
plataformas, devido à incompatibilidade tanto do hardware

máquinas virtuais podem, segundo [10], ser classificadas em
(ISA) quanto do sistema operacional (software). A Figura

duas categorias: VM de aplicação e VM de sistema. As
2 ilustra essa situação. No exemplo, verificamos não ser

VMs de aplicação são máquinas virtuais que suportam ape-
posśıvel executar diretamente na arquitetura Scalable Pro-

nas uma aplicação espećıfica. Por exemplo, a máquina vir-
cessor Architecture (SPARC) uma aplicação compilada para

tual Java – JVM – é um software que carrega e executa os
a arquitetura x86, pois as instruções em linguagem de má-

aplicativos escritos em Java, através da conversão dos byte-
quina do programa não são compreendidas pelo processa-

codes9 em código executável de máquina onde a JVM está
dor SPARC. Aliás, também não é posśıvel executar dire-

sendo executada. Portanto os aplicativos em Java são inde-
tamente no Windows um software desenvolvido para o sis-

pendentes da plataforma operacional, executando em qual-
tema GNU/Linux, pois as bibliotecas de desenvolvimento

quer sistema que simplesmente possua uma JVM. Já as
(libcalls) são compiladas baseada no sistema operacional.

VMs de sistema são máquinas virtuais que suportam siste-
mas operacionais completos, com seus aplicativos e serviços.
O VMware10 e o Virtual Box11 são exemplos dessa catego-
ria. A Figura 4 exemplifica essas duas categorias.

Figure 4: VMs de aplicação (esq.) e de sistema (dir.) [10].

Figure 2: Problemas de compatibilidade entre interfaces [9].
3.3.2 Tipos de Hypervisor

Uma das maneiras de solucionar a incompatibilidade entre Existem basicamente duas abordagens de hypervisor de sis-
plataformas operacionais é através da tecnologia de virtu- tema [10]: nativos (ou de tipo I) e convidados (ou de tipo
alização. Em outras palavras, a virtualização “cria” uma II). Na primeira abordagem, o hypervisor é implementado
camada de software para comunicar (e acoplar) diferentes diretamente sobre o hardware da máquina real, sem a ne-
plataformas que são executadas simultaneamente em uma cessidade de um sistema operacional subjacente; enquanto
mesma máquina f́ısica. Essa camada é denominada de mo- na segunda, o hypervisor é executado como se fosse um pro-
nitor de máquina virtual (VMM) ou hypervisor, o qual é cesso normal sobre um sistema operacional nativo (anfitrião)
ilustrado na Figura 3. Imediatamente acima do hypervisor subjacente. A Figura 5 ilustra essas duas abordagens de hy-
estão situadas as máquinas virtuais, as quais podem ser de- pervisor. Segundo [10], um hypervisor convidado suporta, de
finidas como uma cópia eficiente e isolada de uma máquina modo geral, apenas uma VM com uma instância de sistema
real, segundo Popek & Goldberg em [17]. Aliás, o VMM é operacional convidado, e se mais VMs forem necessárias,
responsável pelo controle e virtualização dos recursos f́ısicos mais hypervisors (processos do sistema operacional nativo)
compartilhados entre as máquinas virtuais, como por exem- devem ser executados. O hypervisor nativo garante um au-
plo processadores, memória RAM, disco ŕıgido e dispositivos mento no desempenho por ter menos intermediários entre o
de entrada e sáıda. Portanto, um computador f́ısico hospe- software em execução na VM e o hardware da máquina real,
deiro (denominado host) pode compartilhar seus recursos mas exige que esse hypervisor seja mais complexo, utilizando
de hardware entre múltiplas máquinas virtuais convidadas técnicas de emulação e simulação para oferecer à máquina
(denominada guest), as quais são gerenciadas pelo hypervi- virtual um contexto similar ao de uma máquina real. Por
sor. Além disso, as máquinas virtuais são, de modo geral, 9Código intermediário entre o código-fonte e o binário.
8 10
Neste trabalho o termo plataforma operacional refere-se ao http://www.vmware.com/

conjunto formado pelo hardware, SO e aplicações. 11https://www.virtualbox.org/



Figure 7: Virtualização com modelo 0/1/3 (esq.) e 0/2/3
(dir.) [6]

Figure 5: VMMs nativo (esq.) e convidado (dir.) [10].

outro lado, a implementação do hypervisor é mais simples, consequentemente, suportar VMs de forma adequada. Esses
pois o sistema operacional subjacente oferece uma série de teoremas se baseam na classificação das instruções de má-
primitivas de acesso ao hardware e controle de periféricos. quinas, as quais são: privilegiadas e senśıveis. Além disso,
Essas duas abordagens, entretanto, são teóricas e na prática também supõem que o processador possui modos de opera-
são implementadas melhorias de desempenho no hypervisor ções privilegiado e usuário (ver Seção 3.3.3), funcionalidade
e nas VMs para otimizar o acesso ao hardware. existente na maioria das arquiteturas desde a IBM 370, in-

clusive a x86. Uma instrução de máquina é dita privilegiada
3.3.3 Anéis de Proteção da CPU se a sua execução em modo usuário gera uma exceção, ou
Os processadores atuais utilizam a noção de anéis de pro- seja, é interrompida e o sistema operacional é notificado. As
teção ou domı́nio de proteção para controlar o acesso ao instruções senśıveis são aquelas que podem podem consultar
conjunto de instruções e aos recursos f́ısicos do sistema [15]. ou alterar o status do processador, isto é, os registradores
Em outras palavras, os anéis determinam ńıveis de privilé- que armazenam o status atual da execução no hardware.
gios da execução de um código para proteger o hardware
(e periféricos) de falhas e comportamentos maliciosos. Por O teorema de Popek & Goldberg descreve que o hypervisor
exemplo, um código executado no ńıvel 0 (conhecido como pode ser implementado em uma arquitetura de computador
anel central) possui acesso completo ao hardware, enquanto em que as instruções senśıveis sejam um subconjunto das
um código executado em um ńıvel k > 0 (anel externo) pos- instruções privilegiadas. Segundo esse teorema, toda instru-
sui menos privilégios. Isto é, quanto mais distante um anel ção senśıvel deve ser também privilegiada. Assim, quando
se encontra do anel central, menor será o seu ńıvel de pri- uma instrução senśıvel for executada por uma aplicação não-
vilégio. A arquitetura x86 suporta 4 anéis de proteção (ver privilegiada (núcleo do sistema convidado, por exemplo), irá
Figura 6), sendo o anel 0 definido para o espaço de kernel e o provocar uma interrupção que deverá ser interceptada e tra-
anel 3 estipulado espaço de usuário. Portanto, dependendo tada pelo hypervisor. Este, por sua vez, irá simular (ou emu-
da forma de virtualização, podemos descrever em qual anel lar) o efeito desejado da instrução senśıvel de acordo com o
o hypervisor e as VMs estarão situados. contexto de onde a instrução senśıvel foi executada (se foi

de uma das VMs monitoradas ou pelo próprio hipervisor);
garantindo, portanto, o isolamento entre VMs. Note que,
como todas as instruções não-privilegiadas não são poten-
cialmente prejudiciais à virtualização, então elas podem ser
diretamente executadas pelo processador, garantindo, então,
que o desempenho de uma máquina virtualizada seja muito
próximo de uma máquina real. Entretanto, existem algu-
mas arquiteturas (assim como a x86) que não respeitam o
teorema de Popek & Goldberg. Assim, podem existir instru-
ções senśıveis que executem sem gerar interrupções; impe-
dindo, então, o hypervisor de interceptá-las e interpretá-las.
Portanto, houve a necessidade de se criar artif́ıcios para con-

Figure 6: Anéis de privilégios da arquitetura x86 tornar esse problema, dos quais os dois predominantes são a
tradução binária e a paravirtualização. Ambas técnicas são

A Figura 7 ilustra a noção de anéis em um computador com discutidas na Seção 3.4.
hypervisor nativo, onde este executa no anel 0, enquanto os
SOs hóspedes (ou convidados) no anel 1 (ou 2) e as aplica- 3.4 Formas de Virtualização
ções continuam intactas, no anel 3. Isto simplifica o trata- Conforme dito anteriormente, a virtualização é a tecnologia
mento de interrupções pelo hypervisor, uma vez que é posśı- capaz de abstrair as configurações do hardware via software,
vel distinguir exceções e interrupções das aplicações do ńıvel como por exemplo, fazer os recursos f́ısicos parecerem dife-
3 das dos SOs hóspedes no ńıvel 2. rentes do que realmente são. Graças à essa tecnologia, é

posśıvel, portanto, dividir os recursos de um computador
3.3.4 Teorema de Popek & Goldberg em vários ambientes de execução (plataforma operacional).
Em 1974, peŕıodo onde foram desenvolvidas as primeiras Entretanto, dependendo de como o hypervisor, o hardware
soluções de virtualização, Popek & Goldberg descreveram f́ısico do hospedeiro e as VMs se interagem entre si, podemos
em [17] um teorema para que uma arquitetura de computa- elencar várias formas de virtualização; detalharemos breve-
dor possa implementar um hypervisor de forma eficiente e, mente as principais nesta seção.



3.4.1 Virtualização Completa ou Total instrução senśıvel. Assim, a técnica de paravirtualização re-
Na virtualização completa, o hypervisor, situado no anel 0 cebeu este nome pois a máquina virtual tem “consciência”
da CPU, disponibiliza uma réplica (emulação completa) do de que está sendo executada em um ambiente virtualizado.
hardware subjacente, ou seja, a interface de acesso ao hard- Dessa forma, o hypervisor não precisa analisar e testar os
ware é virtualizada (incluindo todas as instruções do proces- binários do SO convidado, o que representa um ganho signi-
sador e os dispositivos de entrada e sáıda). Alguns autores ficativo de desempenho. Portanto, as modificações na inter-
denominam esta virtualização como virtualização do hard- face de sistema do hardware virtual (instruções de sistema)
ware [1, 13, 16, 19]. Dessa maneira, o sistema operacional exigem uma adaptação no kernel dos SOs convidados, para
visitante não precisa sofrer modificações para ser executado que estes possam executar sobre o hardware virtual. Por
na máquina virtual [13]. Além disso, esse tipo de virtualiza- outro lado, a interface de usuário do hardware virtual (ins-
ção utiliza a técnica de tradução binária, onde o hypervisor truções de usuário) é mantida, isto é, permite que as apli-
analisa, reorganiza e traduz as seqüências de instruções (bi- cações convidadas executem sem alterações de código. A
nários) emitidas pelo SO convidado em novas seqüências de Figura 8 mostra a comparação, de modo geral, entre a vir-
instruções [9]. É importante frisar que esta análise deve ser tualização total e a paravirtualização. Uma das vantagens
feita em tempo de execução e antes que o binário seja envi- da paravirtualização é a possibilidade do SO convidado aces-
ado para execução na máquina real. Dessa forma, através da sar alguns recursos de hardware diretamente, ou seja, sem a
tradução binária, é posśıvel (i) adaptar as instruções geradas interferência ativa do hypervisor. Porém, esse acesso é ape-
pelo sistema convidado à interface de conjunto de instruções nas monitorado pelo hypervisor, informando o SO convidado
(ISA) do sistema real, caso não sejam idênticas; (ii) detectar de seus limites, como por exemplo, áreas de disco e memó-
e tratar instruções senśıveis não-privilegiadas que não geram ria dispońıveis [10]. Por outro lado, a principal desvantagem
interrupções ao serem invocadas pelo SO convidado (uma desta virtualização é a necessidade de se alterar o kernel do
das técnicas usadas para virtualizar a x86) e (iii) otimizar SO convidado, o qual nem sempre é open-source. Por exem-
as seqüências de instruções geradas pelo SO convidado, a plo, para portar o Linux foi preciso modificar 2995 linhas
fim de melhorar o desempenho de sua execução. de código (aproximadamente 1, 36% do código fonte total).

Em contrapartida, para o Windows XP foi necessário alterar
A principal vantagem dessa técnica de virtualização é o fato 4620 linhas de código (aproximadamente 0, 04% do código
de que o sistema operacional virtualizado não precisa de fonte total) [2]. Entretanto, o Windows XP modificado não
qualquer tipo de alteração. Em contrapartida, a técnica de pode ser distribúıdo por questões de licença. O maior repre-
tradução binária acrescenta uma complexidade considerá- sentante desta técnica de virtualização é o hypervisor Xen13.
vel ao hypervisor, reduzindo o desempenho da virtualização
em até 30%, quando comparado com a execução direta na 3.4.3 Virtualização de Interface de Sistema
máquina real [21]. Aliás, Laureano et al. afirmam em [9,10] Neste tipo de virtualização, apenas as instruções de sistema
que o hypervisor desse tipo de virtualização pode ser nativo, (system ISA) – instruções privilegiadas – são virtualizadas,
enquanto Sahoo et al. descrevem em [21] que o hypervisor mantendo o conjunto de instruções do usuário (user ISA)
pode ser convidado. VMWare, VirtualBox e QEmu12 são intacta. Dessa forma, as instruções não-senśıveis (aplica-
alguns exemplos de hypervisors que aplica a virtualização ções convidadas, por exemplo) podem ser executadas dire-
completa. A virtualização completa só foi posśıvel em 1972, tamente pelo processador da máquina real, sem perda de de-
na série IBM System/370, após a adição do mecanismo de sempenho. Aliás, esse tipo de virtualização é mais eficiente
memória virtual. Na arquitetura x86, a virtualização total que as anteriores, pois o hypervisor precisa emular apenas
foi posśıvel apenas em 2005–2006 quando foi incorporado as instruções senśıveis do processador virtual, as quais são
a técnica Hardware-assisted virtualization em sua arquite- executadas em modo privilegiado pelo SO convidado [3]. A
tura, passando a obedecer o teorema de Popek & Goldberg. desvantagem desta abordagem é que somente os SOs e apli-
A Seção 4 descreve sobre a virtualização da x86. cações convidados desenvolvidos para o processador real po-

dem ser executados. A Figura 9 mostra a comparação entre
a virtualização de interface de sistema com a completa.

Figure 9: Virtualização de interface de sistema (esq.) e completa
Figure 8: Virtualização total (esq.) e paravirtualização (dir.) [9]

(dir.) [10]

3.4.2 Paravirtualização 4. VIRTUALIZAÇÃO EM X86
Na paravirtualização, o sistema operacional convidado é mo- A arquitetura x86, uma das arquiteturas de computadores
dificado para invocar o hypervisor sempre que executar uma mais utilizadas hoje em dia, não foi projetada, a prinćıpio,
instrução que altere o estado do hardware, ou seja, uma para ser virtualizada [13]. A grande dificuldade de se imple-

12http://wiki.qemu.org/Main_Page 13http://xen.org/



mentar um hypervisor na arquitetura x8614 é o fato que exis- convidados e outra para o hypervisor.
tem pelo menos 17 instruções senśıveis que não são privilegi-
adas, ou seja, cuja execução em modo usuário não gera uma Esses procedimentos funcionam da seguinte maneira: na
exceção, mas é tratada pelo próprio processador (x86) [18]. transição VM entry, o estado do processador é salvo na área
Em outras palavras, a arquitetura x86 viola o teorema de de hypervisor da VMCS e, em seguida, o estado do proces-
Popek & Goldberg, descrito na Seção 3.3.4. A questão é que sador é lido a partir da área de SOs convidados da VMCS;
em uma máquina real que dê suporte à diversas máquinas enquanto a transição VM exit faz com que o estado do pro-
virtuais (virtualização completa, por exemplo), o hypervisor cessador seja salvo na área de SOs convidados e o estado
deve executar em modo privilegiado do processador (anel 0), anterior do hypervisor é restaurado. A Figura 10 mostra
visto que será ele quem gerenciará os recursos do sistema. uma visão geral da arquitetura Intel VT. As instruções sen-
Entretanto, o sistema operacional é o único software que exe- śıveis e as interrupções (geradas dentro da VM, isto é, em
cuta em modo privilegiado, de forma a gerenciar os recursos modo non-root) provocam a transição VM exit, devolvendo
f́ısicos do sistema. Assim, quando a x86 for virtualizada, o processador ao hypervisor em modo root. Note que ambos
obviamente não será executada em modo privilegiado (e sim procedimentos são gerenciados e configurados pelo próprio
no anel 1 ou 2, ver Figura 7); mas, como a virtualização deve hypervisor. Portanto, o suporte à virtualização da x86 foi
ser transparente para o SO, ele irá executar suas instruções posśıvel através do procedimento chamado de ring deprivile-
como se estivesse no modo privilegiado. Portanto, quando ging, determinando o SO convidado a executar no anel 1 ou
o SO executar algumas destas 17 operações ditas “cŕıticas”, 2 de forma transparente, mas ele “acredita” que está sendo
elas serão abortadas, enquanto idealmente deveria ser ge- executando no anel 0. Isto é, o SO operará em um anel 0
rada uma exceção a ser tratada pelo hypervisor. Assim, o fict́ıcio e não terá conhecimento da presença do hypervisor
desafio na implementação de hypervisor na arquitetura x86 em um ńıvel de privilégio superior.
é a forma de lidar com instruções cŕıticas. Os fabricantes
de processadores x86, AMD e Intel desenvolveram exten-
sões para a arquitetura x86 para suportarem a virtualização
sem violar o teorema de Popek & Goldberg, através da téc-
nica denominada virtualização assistida pelo hardware [13]
ou também conhecida como virtualização com suporte em
hardware [11], o qual está descrito na próxima seção.

Virtualização Assistida pelo Hardware. Com o desen-
volvimento e os resultados interessantes de eficiência obti-
dos por soluções de paravirtualização e virtualização com-
pleta, os produtores de hardware x86, no qual se destacam
a Intel e a AMD, passaram a se importar com este ramo
de mercado. Como resultado, a primeira série de proces- Figure 10: Visão geral da arquitetura Intel VT [6]
sadores x86 com suporte a virtualização foi lançada quase
simultaneamente pelas duas empresas: o Intel VT-x15 (de
codinome Vanderpool) em 2005 e o AMD-V 16 (de codinome 5. VANTAGENS E DESVANTAGENS DE SIS-
Pacifica) em 2006 [10,13,23]. Estas linhas de processadores TEMAS VIRTUALIZADOS
resolveram o problema das instruções cŕıticas, modificando

As principais vantagens dos sistemas virtualizados são [21]:
o conjunto de instruções de máquina da x86 a fim de obede-

Flexibilidade de alocação de recursos: é posśıvel, em
cer, então, ao teorema de Popek & Goldberg. Note que, as

uma única máquina f́ısica, ter várias VMs em execução, alo-
soluções da Intel e da AMD foram desenvolvidas indepen-

cando os recursos de hardware sob demanda e até mesmo
dentemente uma da outra e, além disso, são incompat́ıveis,

migrar serviços entre VMs, simplesmente ajustando os re-
mas atingem o mesmo propósito. Resumidamente, a ideia

cursos alocados pelo hypervisor.
de ambas tecnologias é definir dois modos posśıveis de ope-

Disponibilidade: cada sistema é independente. Logo, uma
ração do processador: root e non-root [6, 9]. O primeiro

queda de serviço permite a reinicialização ou simplesmente
modo é destinado à execução do hypervisor e equivale ao

a ativação de uma nova máquina virtual em instantes.
funcionamento de um processador convencional, enquanto o

Escalabilidade: é fácil adicionar ou remover novas instân-
segundo modo é destinado à execução das máquinas virtu-

cias da máquina virtual. Caso a demanda por capacidade
ais. Aliás, ambos modos suportam os 4 anéis de privilégio,

cresça com o tempo, é fácil inserir um nó f́ısico com a insta-
possibilitando executar os SOs convidados sem modificá-los.

lação básica do cluster e pô-lo para executar mais VMs.
Além disso, dois procedimentos de transição entre os modos

Uso eficiente do hardware: o uso de várias máquinas
são definidos: VM entry (transição root → non-root) e VM

virtuais permite o uso mais eficiente dos recursos computa-
exit (transição non-root → root). Assim, para gerenciar o

cionais da máquina anfitriã (hospedeira).
estado do processador (conteúdo dos registradores) é defi-

Segurança: cada sistema executa isoladamente e funci-
nida uma Virtual-Machine Control Structure (VMCS), uma

ona de forma independente dentro de seu espaço alocado
estrutura de dados que contém duas áreas: uma para os SOs

no VMM. Caso uma aplicação tenha algum problema, ela
14Processadores Intel Pentium IV (e anteriores). não afetará as demais máquinas virtuais.
15Se aplica às arquitetura x86 de 32 e 64 bits, como o Pentium Custos: é posśıvel reduzir custos monetários através da ins-
D, famı́lia Core 2 Duo e famı́lia Intel Core i{5,7}. tanciação de pequenos servidores virtuais dentro de servido-

16Se aplica às arquiteturas x86 de 64 bits como o Athlon, res com alto poder computacional.
Turion, Phenom e as linhas mais recentes [6]. Aplicações legadas: se uma organização decide migrar



para um SO diferente, é posśıvel executar aplicações antigas virtualização para executar uma máquina virtual. Caso o
nos antigos SOs como um sistema convidado de uma VM; processador possua suporte a virtualização, então esse su-
além de reduz custos monetários com migração de hardware. porte é utilizado. Uma outra caracteŕıstica do VirtualBox é

possuir uma interface intuitiva.
As principais desvantagens são [21]:
Sobrecarga: o sistema que hospeda uma ou várias máqui-
nas virtuais acaba perdendo desempenho devido ao compar- 7. TENDÊNCIAS
tilhamento de seus recursos. Nesta seção vamos apresentar algumas tendências sobre os

Single point of failure (SPOF): mesmo a VM sendo de- sistemas virtualizados encontrados na literatura, das quais o

sacoplada do hardware, ela ainda depende das operações do uso mais recente se encontra na computação em nuvem [26].

hardware. Portanto, falhas no hardware levarão a falhas de
todas as VMs suportadas. 7.1 Provedores de Infraestrutura
Interface de administração: está intimamente ligada à Em datacenters, os administradores poderão facilmente ge-
plataforma de virtualização. Isto pode ser um problema que renciar e monitorar milhares de VMs executando em cente-
dificulta o uso de várias plataformas no mesmo ambiente. nas de máquinas reais, tudo a partir de um só terminal [20].

Ao invés de configurar computadores individuais, é posśı-
6. TECNOLOGIAS DE VIRTUALIZAÇÃO vel simplesmente instanciar novas VMs a partir de modelos
Nesta seção vamos descrever alguns exemplos de tecnologias pré-definidos e monitorar os recursos utilizados, tornando o
de máquinas virtuais de código-aberto. mapeamento dos recursos f́ısicos uma tarefa altamente di-

nâmica. Esse cenário é um exemplo de um provedor de

6.1 XEN Infrastructure-as-a-Service (IaaS) da computação em nu-
vem19, que fornece VM como serviço através do modelo de

Como dito anteriormente, na Seção 3.4.2, o Xen é baseado tarifação pago-pelo-uso. Um desafio enfrentado atualmente
na paravirtualização; assim, os SOs convidados devem ter por esses provedores é o hot migration, uma técnica onde
ciência de que estão sendo operados sobre o núcleo Xen, o hypervisor tem que ser capaz de migrar suas VMs en-
evocando-o explicitamente para a realização das operações tre outras máquinas f́ısicas do datacenter. O objetivo é a
senśıveis [2]. O Xen não possui drivers de dispositivos e, migração e a redistribuição de máquinas virtuais para mi-
com isso, não é posśıvel rodar um SO convidado diretamente nimizar o número de computadores f́ısicos ativos enquanto
nele. Uma VM, instanciada no domı́nio 0, é invocada para os computadores ociosos são desligados, a fim de diminuir
fazer a comunicação entre o Xen e os sistemas hóspedes. Em o consumo de energia elétrica. Esse paradigma é a base da
outras palavras, a VM do domı́nio 0 roda um núcleo Linux computação verde e, portanto, contribui com a redução da
modificado e possui privilégios para acessar os dispositivos emissão de dióxido de carbono (CO2) na atmosfera e, con-
de entrada/sáıda e as demais VMs, as quais são instanci- sequentemente, do efeito estufa. Logo, para garantir um
adas no domı́nio U (não-privilegiadas) e executam os SOs gerenciamento eficiente dos recursos e, ao mesmo tempo,
convidados. Cada VM do domı́nio U é criada, inicializada proporcionar sua maior utilização, o Provedor de Infraes-
e desligada através do domı́nio 0, e também possui drivers trutura tem que lidar com o equiĺıbrio entre os parâmetros
virtuais para acessar os recursos de hardware. Além de pos- energia e desempenho [4, 5].
suir os drivers dos dispositivos da máquina f́ısica, a VM do
domı́nio 0 tem 2 drivers que tratam requisições de acessos à
rede e aos discos realizadas pelas VMs do domı́nio U. Por- 7.2 Segurança
tanto, só a VM do domı́nio 0 tem acesso direto aos recursos Os servidores virtuais estão sujeitos aos mesmos ataques que
da máquina f́ısica, enquanto que as demais VMs (domı́nio atingem os servidores f́ısicos, assim como novas ameaças es-
U) têm acesso a uma abstração dos recursos, os quais para tão explorando cada vez mais falhas no hypervisor. Como
serem acessados, têm que passar pelo domı́nio 0 [25]. este gerencia todas as VMs de uma máquina f́ısica, uma vez

comprometido todas as VMs também estarão. Portanto, se-

6.2 KVM gundo [13], a segurança total do sistema é baseada tanto
na segurança do hypervisor quanto na do sistema operaci-

O Kernel-based Virtual Machine (KVM)17, é uma solução
onal convidado. Se a segurança de quaisquer elementos do

de virtualização completa que se aproveita de toda estru-
sistema estiver comprometida, possivelmente todo o modelo

tura de drivers já existente no kernel para ter acesso ao
de segurança da virtualização é falho. Ataques contra o hy-

hardware. Para seu funcionamento, é necessário possuir um
pervisor serão cada vez mais comuns entre os usuários ma-

processador com suporte a virtualização (Intel VT ou AMD-
liciosos e, portanto, os melhores hypervisors são aqueles que

V). Através do KVM, é posśıvel rodar múltiplas VMs que
possuem atualizações constantes contra ameaças conhecidas

rodem imagens Linux ou Windows, sem a necessidade de
e emergentes.

modificá-los. Cada VM tem seu hardware virtualizado pri-
vado como placa de rede, disco, adaptador gráfico, etc. O 19De acordo com o tipo de serviço fornecido, a computa-
KVM está contido no kernel do Linux desde a versão 2.6.20. ção em nuvem ainda pode ser divida em mais outros dois

modelos [26]: Plataform-as-a-Service – PaaS e Software-as-

6.3 VirtualBox a-Service – SaaS. O PaaS fornece ambientes para o desen-
volvimento de softwares e permite que os clientes possam

O VirtualBox 18 emula completamente o hardware e não im- implantar e testar seus próprios aplicativos na nuvem, eli-
põe a necessidade de se ter um processador com suporte a minando o gerenciamento de requisitos relacionados à infra-

estrutura. Enquanto isso, o SaaS se refere à disponibilidade
17http://www.linux-kvm.org de aplicativos através da Internet, porém os usuários não
18https://www.virtualbox.org estão autorizados a modificar o ambiente da aplicação.



8. CONSIDERAÇÕES FINAIS Association.
Este trabalho apresentou os conceitos básicos de virtualiza- [12] Q. Li, Q. Hao, L. Xiao, and Z. Li. Adaptive
ção de sistemas computacionais, desde as suas origens até management of virtualized resources in cloud
as soluções modernas, incluindo a contribuição da virtuali- computing using feedback control. In 1st International
zação na computação em nuvem e na computação verde. É Conference on Information Science and Engineering
importante ressaltar que a virtualização é uma ferramenta já (ICISE 2009), pages 99 –102, 26-28 2009.
indispensável ao bom funcionamento dos sistemas modernos, [13] Y. Li, W. Li, and C. Jiang. A survey of virtual
que vem sendo adaptada às novas necessidades, associadas machine system: Current technology and future
também ao uso mais racional dos recursos computacionais. trends. In 2010 Third International Symposium on
Portanto, o desenvolvimento e a utilização de sistemas com- Electronic Commerce and Security (ISECS’10), pages
putacionais virtualizados não é uma ideia recente e, além 332 –336, july 2010.
disso, vem ganhando espaço no mercado devido a melhora [14] C. Maziero. Sistemas Operacionais, nov 2011.
de desempenho dos recursos computacionais, especialmente http://dainf. ct. utfpr.
nos datacenters. edu.br/ maziero/lib/exe/fetch.php/so:so-cap09.pdf.

Acesso em 07 jun 2012.
9. REFERÊNCIAS [15] R. McDougall and J. Anderson. Virtualization
[1] M. Arnold, S. Fink, D. Grove, M. Hind, and performance: perspectives and challenges ahead.

P. Sweeney. A survey of adaptive optimization in SIGOPS Oper. Syst. Rev., 44(4):40–56, dec 2010.
virtual machines. Proceedings of the IEEE, 93(2):449 [16] S. Nanda and T. cker Chiueh. A survey on
–466, feb. 2005. virtualization technologies. Technical report,

[2] P. Barham, B. Dragovic, K. Fraser, S. Hand, Department of Computer Science SUNY at Stony
T. Harris, A. Ho, R. Neugebauer, I. Pratt, and Brook, 2005.
A. Warfield. Xen and the art of virtualization. In [17] G. J. Popek and R. P. Goldberg. Formal requirements
Proceedings of the nineteenth ACM symposium on for virtualizable third generation architectures.
Operating systems principles, SOSP ’03, pages Commun. ACM, 17(7):412–421, jul 1974.
164–177, New York, NY, USA, 2003. ACM. [18] J. S. Robin and C. E. Irvine. Analysis of the intel

[3] A. Baruchi and R. L. Piantola. Análise quantitativa de pentium’s ability to support a secure virtual machine
técnicas de virtualização como ambiente de testes. In monitor. In Proceedings of the 9th conference on
IV Encontro Brasileiro de Teste de Software (IV USENIX Security Symposium - Volume 9, SSYM’00,
EBTS’10), 2010. pages 10–10, Berkeley, CA, USA, 2000. USENIX

[4] A. Beloglazov and R. Buyya. Energy efficient Association.
allocation of virtual machines in cloud data centers. In [19] M. Rosenblum. The reincarnation of virtual machines.
Proceedings of the 2010 10th IEEE/ACM Queue, 2(5):34–40, jul 2004.
International Conference on Cluster, Cloud and Grid [20] M. Rosenblum and T. Garfinkel. Virtual machine
Computing, CCGRID ’10, pages 577–578, Washington, monitors: current technology and future trends.
DC, USA, 2010. IEEE Computer Society. Computer, 38(5):39 – 47, may 2005.

[5] A. Beloglazov and R. Buyya. Energy efficient resource [21] J. Sahoo, S. Mohapatra, and R. Lath. Virtualization:
management in virtualized cloud data centers. In 10th A survey on concepts, taxonomy and associated
IEEE/ACM International Conference on Cluster, security issues. In 2010 Second International
Cloud and Grid Computing (CCGrid), pages 826 –831, Conference on Computer and Network Technology
may 2010. (ICCNT’10), pages 222 –226, april 2010.

[6] A. Carissimi. Virtualização: da teoria a soluções. In [22] J. E. Smith and R. Nair. The architecture of virtual
Minicursos do Simpósio Brasileiro de Redes de machines. Computer, 38(5):32–38, may 2005.
Computadores (SBRC’08), pages 173–207, 2008. [23] G. Vallee, T. Naughton, C. Engelmann, H. Ong, and

[7] M. Curtin. Write once, run anywhere: Why it S. Scott. System-level virtualization for high
matters. Technical Article, 1998. performance computing. In Parallel, Distributed and

[8] E. Kohlbrenner, D. Morris, and B. Morris. The Network-Based Processing, 2008. PDP 2008. 16th
History of Virtual Machines. http://www. cs. gmu. Euromicro Conference on, pages 636 –643, feb. 2008.
edu/cne/itcore/virtualmachine/history.htm. Acesso [24] A. Vasudevan, J. M. McCune, N. Qu, L. Van Doorn,
em 5 jun 2012. and A. Perrig. Requirements for an integrity-protected

[9] M. A. P. Laureano. Máquinas Virtuais e Emuladores: hypervisor on the x86 hardware virtualized
Conceitos, Técnicas e Aplicações. Novatec, 2006. architecture. In Proceedings of the 3rd international

[10] M. A. P. Laureano and C. A. Maziero. Virtualização: conference on Trust and trustworthy computing,
Conceitos e aplicações em segurança. In VIII Simpósio TRUST’10, pages 141–165, Berlin, Heidelberg, 2010.
Brasileiro em Segurança da Informação e de Sistemas, Springer-Verlag.
pages 139–187, 2008. [25] Xen. Users’ manual: Xen v3.3. http://bits. xensource.

[11] J. LeVasseur, V. Uhlig, J. Stoess, and S. Götz. com/Xen/docs/user.pdf. Acesso em 08 jun 2012.
Unmodified device driver reuse and improved system [26] Q. Zhang, L. Cheng, and R. Boutaba. Cloud
dependability via virtual machines. In Proceedings of computing: state-of-the-art and research challenges.
the 6th conference on Symposium on Opearting Journal of Internet Services and Applications, pages
Systems Design & Implementation - Volume 6, 7–18, 2010.
OSDI’04, Berkeley, CA, USA, 2004. USENIX