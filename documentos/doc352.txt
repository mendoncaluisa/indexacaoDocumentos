286
meeting EnglishFaculty is
all English;
1 Times;
end EnglishFaculty;
and meetings which ensure that each teacher teaches at most 30 out of the 40 possible
times each week (say):
meeting SmithFree is
Smith;
10 Times: TeacherFree;
end SmithFree;
The TeacherFree condition is defined to mean that at least one time from each day must
be included. Real instances may have two hundred or more meetings altogether.
This completes the presentation of the TTL language. It has been used successfully
by the authors, with some unimportant extensions, to specify high school instances
[1, 2], and it can easily be extended to accommodate the multiple sections needed in
university timetabling, and to express preferences in selections. Requirements that do
not seem amenable to expression in TTL include relations between meetings (must not
be consecutive, etc.), and conditions on the set of meetings assigned to some resource (at
most two Senior courses per teacher, minimize walking distance, etc.).
We will denote by TIMETABLE CONSTRUCTION (TTC) the decision problem
of determining whether an assignment of times and resources to all the slots exists which
satisfies the various conditions and is such that no resource is assigned to two meetings
which share a time. This is polynomial-time equivalent to the problem of actually
producing such an assignment: given TTC, one can construct a solution if it exists by
trying each possible assignment to the first slot until TTC indicates that a solution exists,
then repeating on the other slots in turn.
3. NP-Completeness Results
In determining the complexity of the TTC problem defined in Section 2, formally it
is sufficient to prove TFC s NP (obvious) and to demonstrate one transformation from
any known NP-complete problem to TTC. But we wish to show that TTC is NP-complete
in several independent ways, all of which arise in practice. For this it is necessary to find
transformations which construct TTC instances that resemble special cases of the T I C
problem that arise in real instances.
The well-known formulation of the timetable construction problem given by
Gotlieb [6] assumes that each meeting contains exactly one nominated student group,
one nominated teacher, and any number of times which may be freely chosen. Csima [3]
showed that Gotlieb's problem is in P if the teachers are initially available at all times,
and Even, Itai, and Shmnir [4] showed that it is NP-complete if each teacher may be
assumed initially unavailable at an arbitrary subset of the times.
287
More relevant in practice was the work of Karp [7] showing that graph colouring
is NP-complete. At that time the connection between graph colouring and timetable
construction (revisited below) was already well known [8, 9].
3.1. Intractability Owing to Student Choice
We begin with a well-known result relating timetable construction to graph
colouring. It shows NP-completeness when each student is granted a free choice from
a wide range of subjects, as is characteristic of university timetable construction.
Theorem 1. G R A P H K - C O L O U R A B I L I T Y ~ TTC.
Proof. Recall that the NP-complete GRAPH K - C O L O U R A B I L I T Y problem asks
whether it is possible to assign a colour to each vertex of a graph G in such a way that
no two adjacent vertices have the same colour; at most K < IVI distinct colours are
allowed. Let G = ( V , E ) with V = {v 1. . . . . v } and E = {e 1. . . . . era}. Construct the TTC
instance
timegroup T is
tl; ...; tK;
end T;
group R is
rl; ...; rm;
end R;
meeting M l is
1 T;
C l , 1 ; - . . ; C l , k ;
end Ml;
meeting M is
1 T;
Cn,1; " ' ; Cn,kn;
end M n;
where the resources ci, ~. . . . . ciA selected by meeting M i are exactly those resources rj
such that ej is adjacent to v i in G.'
Suppose a K-colouring f 9 V ---> {1 . . . . . K} exists for G. Assign t~ where k = f
(vi) to M i for all i. The conditionf(v.) e f ( v ) whenever {v., v.} e E guarantees that9 . l . . . ! J
meetings which share any resource receive dl~erent tlmes, so the TTC instance is solved.
Conversely, a successful time assignment defines a successful graph colouring. []
Taking each r i to represent one student, this transformation shows that assigning times
to university classes such that all students can attend their choices is NP-complete even
when each meeting occupies only one time, each student chooses just two meetings,
288
and teacher and room constraints are ignored. It also demonstrates that university
examination timetable construction is NP-complete.
Universities avoid this problem by publishing the timetable in advance and requiring
students to choose only combinations of subjects permitted by the timetable. Large
classes are divided into sections (alternative offerings of the same subject) which run at
different times. Choosing appropriate sections for just one student after times are fixed
is NP-complete (Section 3.3), but sections provide sufficient freedom in practice to make
solutions fairly easy to find.
In high schools known to the author, student choice is limited by deciding in advance
that certain groups of meetings will occur simultaneously, and inviting students to choose
one meeting from each group. The decision as to which meetings to group in this way is
often influenced by a preliminary survey of student preferences, which of course makes
it into an NP-complete graph colouring problem too.
3:2. Intractability Owing to Varying Meeting Size
Meetings occupy more than one time each. A typical pattern in high schools might
he six times for English and Mathematics, five for Science, three for Sport, and so on.
When meetings of such varying sizes are assigned to teachers, it can be difficult to
assign exactly the 30 (say) times that comprise each teacher's workload. Overloading
is forbidden by industrial agreement, and underloadi~g one teacher imptfes overloading
another. This leads to NP-completeness even disregarding restrictions imposed by
teachers' qualifications and the need to avoid clashes:
Theorem 2. BIN PACKING (with unary encoding) ~ TTC.
Proof. Recall that the NP-complete BIN PACKING problem asks whether a set of items
U = {u 1. . . . . u}, each with a positive integer size s(ui), can be packed into B bins each
of capacity C in such a way that no bin is overfull. We assume that these numbers are
encoded in unary rather than binary; since BIN PACKING is NP-complete in the strong
sense [5], this version is NP-complete. We transform to the TTC instance
timegroup T is
tl; ...; tc;
end T;
group R is
rl; ...; rB;
end R;
meeting M 1is
s(ul) T;
1 R;
end M1;
289
meeting M n is
S(Un) T;
1R;
end Mn;
Given the initial unary encoding, this transformation clearly has polynomial complexity.
Suppose that the BIN PACKING instance has solutionf : U --) {1 . . . . . B}. Assign
r k where k =f(ui) t o meeting M i for all i; then, for each r. in R, the total time requirements
of all meetings containing resource r. will be at most ~ and we may assign any disjoint
J
sets of times to these meetings. Conversely, from any solution to the TTC instance we
may deduce a bin packing by assigningf(ui) = k where M i contains r k. []
In high schools known to the author, some meetings in the junior years are split into two
in the following way in order to create small fragments to fill the bins:
meeting M 1isi
(S(Ui) -- k) T;
1R;
end MI;
meeting M 2 isi
k T;
1R;
end M~;
for some k, allowing two teachers to share the meeting. This is called a split assignment,
and it is the major form of compromise permitted in high school timetable construction.
Universities are not subject to this problem, because face-to-face workloads are lighter
and more flexible.
3.3. Intractability Owing to Time-Incoherence
The bin packing NP-completeness just explained would vanish if all meetings
were of equal size, they were aligned in time, and each teacher's workload were a
multiple of the meeting size. Meeting sizes and workloads are not under the control
of timetable construction programs, but the alignment of meetings in time is. It was
called time-coherence, and shown to be a powerful heuristic in practice, in [1]; and so
the question naturally arises, is it possible to guarantee a time-coherent solution when
meeting sizes vary? We now show that the answer is no.
There are several ways to define time-coherence formally. One simple way is to
define the time-incoherence i(M) of a set of meetings M to be the number of pairs of
meetings from M that share at least one time. We can then define the decision problem
TTC-TC to be T I C augmented with the requirement that i(M) not exceed a given bound
K. Unfortunately, TI'C-TC is NP-complete even when the underlying T I C instance is
trivial:
290
Theorem 3. BIN PACKING (with unary encoding) ~ TTC-TC.
Proof. We remind the reader that the purpose of this theorem is not just to prove the
result (we have already done so in Theorem 2) but to construct a TTC instance which
establishes an independent source of NP-completeness.
As previously described, the NP-complete BIN PACKING problem asks whether
a set of items U = {u 1. . . . . u } , each with a positive integer size s(ui), can be packed into
B bins each of capacity C so that no bin is overfull. Transform to a TTC-TC instance
whose groups are
timegroup T is
tl; ...; tBC;
end T;
group R is
r;
end R;
and whose meetings are X 1. . . . . X and Yl . . . . . YB where the X i are
meeting X i is
r;
s(ui) T;
end Xi;
and the Y. are
J
meeting Yj is
tO_l)c+l; ...; t.c;
end Yj;
and the bound on i(M) is K = n.
Suppose that the BIN PACKING instance has solutionf " U --+ {1 . . . . . B}. For
each meeting X i, choose any s(ui) times (not already chosen) from the set S k = {t(k- 1)c+ i,
.... tkc } where k = f(ui). This is possible b e c a u s e f guarantees that at most C times will
be chosen from S k. All requirements are satisfied, and each X i overlaps with exactly one
Y, so i(M) = n.
Conversely, suppose that the TTC-TC instance has a solution with i ( M ) <_ n. We
must have i ( M ) >_ n since each X must overlap at least one Y.., so i(M) = n and each X,l . J .
overlaps exactly one Y.. Settingf(ui) = j then defines a bm packing for the u r []
Any reasonable definition of time-coherence would permit the same transformation. In
practice then, when meeting sizes vary we cannot expect to maintain time-coherence.
This inevitable loss of time-coherence causes severe problems in practice. To
illustrate this, we present a transformation which shows that, in the absence of
time-coherence, the problem of assigning meetings to just one teacher is NP-complete:
291
Theorem 4. E X A C T COVER BY 3-SETS ~ TTC.
Proof. Recall that the NP-complete E X A C T COVER BY 3-SETS problem is as
follows. We are given a set X = {x I . . . . . X3q }, and a collection of 3-subsets of X called
C = {C l . . . . . Cn} with n > q. The problem asks for an exact cover of X, that is, a
subcollection C' c C such that every element of X lies in exactly one element of C'.
Let C. = {c.., c. _, c . . } for I < j < n, where each c.. = x_ for some i such that 1J j , l 3 , z ] , J - - - - ),K
< i <_ 3q. We transform an instance of E X A C T COVER BY 3-SETS to a TTC instance
whose groups are
timegroup T is
X l ; . . . ; X3q;
end T;
group R is
r l ; . . . ; r _ q ; z;
end R;
and whose meetings are A 1. . . . . An_ q and B 1. . . . . B where the A i a r e
meeting A i is
(3q - 3) T;
ri;
end Ai;
and the B are
J
meeting Bj is
%;%;cj,3;
1 R;
end B.;
Now suppose X has exact cover C'. Assign z to each B. such that C e C'. This is feasible
J
since no time x i appears in two elements of C', and it takes care oJf q of the n meetings
B.. To each of the remaining n - q meetings B k assign one of the r.. This leaves r. free at
J
atl times except ck, v ck,2, and ck.,y so we may assign the 3q - 3 timJes T - {ck, v c k 2, Ck 3}
toAj. The converse is similar: in any solution to the TTC instance, z must be assigned to
exactly q of the Bj, and these define an exact cover for X. []
The constructed instance amounts to assigning meetings to a resource z (after their times
have been fixed) so as to maximize the number of times that z is used. The importance
of this was discussed in relation to bin packing (Section 3.2), but now we find that
time-incoherence makes the problem NP-complete even when bin packing problems are
absent.
292
3.4. Intractability Owing to Conditions on Times
As explained in Section 2, the choice of a meeting's times is often constrained by
requirements for double times, an even spread of times through the week, and so on. The
authors have experimented with a method of specifying these time conditions in TTL that
is sufficiently general that it permits a transformation from the archetypal NP-complete
problem, SATISIFIABILITY, containing exactly one meeting with no resources but
with a complex condition on the choice of times. At present, however, we use a simpler
method which provides a fixed finite list of allowed time conditions. In any case, in real
instances the difficulty arises not from complex time conditions, but rather from the need
to satisfy the simple time conditions of several meetings simultaneously. The following
transformation establishes this NP-completeness:
Theorem 5. EXACT COVER BY 3-SETS ~ TTC.
Proof. Once again we remind the reader that the purpose is to construct independent
NP-complete instances of TTC, not merely to prove the result (which has been done
before in Theorem 4). As previously described, the NP-complete EXACT COVER BY
3-SETS problem is as follows. We are given a set X = {xl, "'" , X3q}' and a collection of
3-subsets of X called C = {C1, _ _... C n } with n _>q. The problem asks for an exact cover
of X, that is, a subcollection C' c_ C such that every element of X occurs in exactly one
element of C'.
Let each C = {c, ~, c, 2, c;3} where each c~k = x i for some i. We transform an
instance of EX2~CT C64VE~ B~'3-SETS to a T T ~ instance whose groups are
timegroup T is
xl; ...; X3q;
end T;
group R is
r;
end R;
and whose meetings are M 1. . . . . Mq where each Mj is
meeting Mj is
3 T;
r;
end Mj;
In addition, we impose on each Mj the time condition that the three times chosen must
be {ck, v Ck,2, el,3} for some k such that 1 < k < n.
First suppose that the initial instance of EXACT COVER BY 3-SETS has a solution
C" = {C(, , C '}. C' must have exactly q elements. For all j, assign the times of C /* ' " q , . . . . . . . .
to meeting Mj. The collection of all these sets of times is palrwlse disjoint, as required by
the presence of r in each meeting, and each meeting's times satisfy the time condition.
Conversely, any solution to the TTC instance defines a collection of disjoint sets
293
of times, each of which satisfies the time condition, and from this we obtain a solution
to the EXACT COVER BY 3-SETS instance. []
The TTL instance constructed here has small meetings, all with the same time condition,
which is a simple list of alternative time patterns as often occurs, for example, in
university timetabling. This is good evidence of intractability in practice.
Nevertheless there are special cases which can be solved efficiently. If the C are
J
pairwise disjoint the problem is obviously trivial. More generally, EXACT COVER BY
3-SETS is solvable in polynomial time if each x i appears in at most two of the Cj [5].
We can identify a second easy special case based on the concept of a simple time
selection, which we define as a time selection with a time condition requiring only that
the times be chosen from a given arbitrary subset Of the set of all times. The problem
of assigning times to any number of time-disjoint meetings, each containing any number
of simple time selections, can be solved by bipartite matching in a graph whose edges
connect nodes representing time slots to nodes representing times.
Based on these two special cases and the observation that heuristic methods
usually succeed on this problem, it seems likely that a restricted version exists which
encompasses most of the cases encountered in practice, and which is solvable in
polynomial time for sets of time-disjoint meetings. Heuristics are certainly adequate if
occasional violations of the conditions are acceptable.
Incidentally, we can reinterpret the assignment of times {ck 1, ck,2, ck,3} to meeting
Mj as the assignment of student r to section k of meeting M'j. This shows that the
assignment of sections of university courses to even a single student (as discussed in
Section 3.1) is NP-complete.
3.5. Intractability of Assigning Two Forms Simultaneously
One useful line of attack is to discover large subproblems that can be solved
efficiently. One such is the matching subproblem introduced by de Werra [10] and
generalized to 'meta-matching' by Cooper and Kingston [ 1], which assigns times to all
the meetings of one form (all meetings having a nominated student group in common)
simultaneously, in such a way that the demand for the various types of teachers and rooms
does not exceed their supply at any time.
The question naturally arises as to whether it is possible to assign suitable
times to two forms simultaneously in polynomial time. In the following proof of
NP-completeness, M X 1. . . . . M X stand for the meetings assigned previously, and M Y ,
q 1
.... MYq and M Z 1..... MZq for the meetings of the two forms to which we wish to assign
times.
Theorem 6. THREE DIMENSIONAL MATCHING o~ TTC.
Proof: Recall that in the NP-complete THREE DIMENSIONAL MATCHING problem
we are given three sets X, Y, and Z, each containing q elements, and a set M ~ X x Y •
Z. The problem is to determine whether M contains a matching, that is, a subset M ' c_
M such that IM'I = q and every element of X, Y, and Z occurs exactly once in M'. We
294
transform this to a TTC instance whose groups are
timegroup T is
tl; ...; tq;
end T;
group R is
rx; ry; rz;
end R;
and whose meetings are M X 1. . . . . M X , M Y 1. . . . . MYq, and M Z 1. . . . M Z These
meetings all have the same form, typifie~ by ' q'
meeting M X i is
1 T;
rx;
end MXi;
where the M X i select rx, the M Y i select r r, and the M Z i select r z.
But now, for each triple mj = (Xa, Yb' Zc) in M, the complement of M in X x Y x
Z, we create two new resources ~ and ~j and a resource subgroup Rj whose members
are ~ and ~j, and we add the selection 1 Rj to M X a, M Y b, and MZ c. This completes the
transformation. 9 p
Suppose first that M contains a matching M'. For each triple mk = (Xa,Yb, Zc) in M ,
where 1 <_k <_q, assign time t~ to M X a, M Y b, and M Z c. Since M' contains each x i exactly
once, each M X i is assigned exactly one time, and these times are distinct, as required by
the presence of rx in each one. Similar remarks apply to the M Y i and the M Z i.
It remains to check that allthe 1R selections are satisfied. SinceR.has two elements,j J
the only possible violation would be if all three meetings M X , M Y b, and M Z c scheduled
for time t~ contained 1 R. for some particularj. But by construction this would imply (
J
Xa' Yb' Zc) ~ ~ ' contradicting (x a, Yb, Zc) ~ M ' .
Conversely, if the TTC instance has a solution, the presence of rx ensures that the
M X i are assigned different times, and similarly for the M Y i and the M Z i. It follows that
the solution can be expressed as a set of q triples (MXa, MYb, MZc) of meetings that occur
simultaneously. By replacing each meeting by the corresponding element of X, Y, or Z,
we arrive at a matching S c_ X x Y x Z. Since M X a, M Y b, and M Z c occur simultaneously,
they cannot all contain the selection 1 Rj for any particular j, so by construction the
corresponding (x a, Yb, Zc) cannot be an element of M. Hence S c M. []
The complexity of the set M is easily achievable in real instances, owing to 'elective'
meetings which select a number of teachers and rooms of arbitrary types. This would
seem to rule out all hope of assigning two forms simultaneously.
295
4. Conclusion
This paper has demonstrated that the timetable construction problem is NP-complete
in five quite independent ways. The instances constructed in our transformations are such
as actually occur in practice. This is important, because it ensures that the intractability
is real, not merely an artifact of the method of specification. Where known we have indi-
cated special cases and compromises which may be used to work around the problems.
Against these negative results we can set the limited size of timetable construction
instances. High schools with more than 100 teachers are rare; a week of more than 40
times is also rare. University problems are larger but seem to be easier. As ingenuity
and computing power increase, timetable construction will become feasible in practice.
References
[1] Tim B. Cooper and Jeffrey H. Kingston. The solution of real instances of the
timetabling problem. The Computer Journal 36, 645-653 (1993).
[2] Tim B. Cooper and Jeffrey H. Kingston. A program for constructing high school
timetables. In First International Conference on the Practice and Theory of
Automated Timetabling. Napier University, Edinburgh, UK, 1995. Also URL
ftp://ftp.cs.su.oz.au/pub/tr/TR95_496.ps.Z.
[3] J. Csima. Investigations on a Time-Table Problem. Ph.D. thesis, School of Graduate
Studies, University of Toronto, 1965.
[4] S. Even, A. Itai, and A. Shamir. On the complexity of timetable and multicommodity
flow problems. SIAM Journal on Computing 5, 691-703 (1976).
[5] M.R. Garey and D. S. Johnson. Computers and Intractability: A Guide to the
Theory of NP-Completeness. Freeman, 1979.
[6] C.C. Gotlieb. The construction of class-teacher timetables. In Proc.IFIP Congress,
pages 73-77, 1962.
[7] R. M. Karp. Reducibility among combinatorial problems. In R. E. Miller and J. W.
Thatcher (eds.), Complexity of Computer Computations, pages 85-103. Plenum
Press, New York, 1972.
[8] G. Schmidt and T. Str6hlein. Timetable construction--an annotated bibliography.
The Computer Journal 23, 307-316 (1980).
[9] D. J. A. Welsh and M. B. Powell. An upper bound for the chromatic number of a
graph and its application to timetabling problems. The Computer Journal 10, 85-86
(1967).
[10] D. de Werra. Construction of school timetables by flow methods. INFOR -
Canadian Journal of Operations Research and Information Processing 9, 12-22