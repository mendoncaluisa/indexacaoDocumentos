VALERIA PEREIRA MOTA 
 
 
 
 
 
 
 

DESENVOLVIMENTO DA MODELAGEM DE UMA FERRAMENTA 
PARA GERENCIAR APLICAÇÕES SAAS  

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

PALMAS 
2009 



 

 

 
 
 
 
 
 
 
 

VALERIA PEREIRA MOTA 
 
 
 
 
 
 
 
 
 
 

DESENVOLVIMENTO DA MODELAGEM DE UMA FERRAMENTA 
PARA GERENCIAR APLICAÇÕES SAAS  

 
 
 
 

“Trabalho apresentado como requisito parcial 
da disciplina Trabalho de Conclusão de Curso 
em Sistemas de Informação I e II do curso de 
Sistemas de Informação”, orientado pelo 
professor MSc. Fernando Luiz Oliveira. 
 
 
 
 
 
 
 
 
 
 

Palmas 
2009 



 

 

VALERIA PEREIRA MOTA 
 
 
 
 
 
 
 

DESENVOLVIMENTO DA MODELAGEM DE UMA FERRAMENTA 
PARA GERENCIAR APLICAÇÕES SAAS  

 
 
 
 

“Trabalho apresentado como requisito parcial 
da disciplina Trabalho de Conclusão de Curso 
em Sistemas de Informação I e II  do curso de 
Sistemas de Informação”, orientado pelo 
professor MSc. Fernando Luiz Oliveira. 
 
 
 
 
 
 
 

BANCA EXAMINADORA 
 
 
 

Profº. MSc.  Fernando Luiz Oliveira  
Centro Universitário Luterano de Palmas 

 
 
 

Profª. MSc. Cristina Dornellas Filipakis Souza  
Centro Universitário Luterano de Palmas 

 
 
 

Prof. MSc. Fabiano Fagundes 
Centro Universitário Luterano de Palmas 

 
 
 

PALMAS 
2009



 iv 

 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

DEDICATÓRIA 
 

Primeiramente a Deus pela proteção, amor e  por tudo que me 

proporciona na vida. 

À minha mãe (in memorian) e ao meu pai, os quais amo muito, pelo 

exemplo de vida e família. 

Ao meu marido Gean Márcio, pela paciência, compreensão e 

companheirismo, um anjo na minha vida. 

Aos meus filhos Lucas e Esther pela alegria e diversão. 

Ao Arthur que está chegando (bebê). 

À minha sogra que sempre acreditou na minha capacidade. 

Aos meus irmãos (Bersanges, Wal e Vania), por tudo em que me 

ajudaram até hoje. 

A todos os meus sobrinhos, especialmente à afilhada Naiara. 

Aos meus cunhados (Marques, Marlene e Rodrigo) 

A todos os professores do CEULP/ULBRA, pelo incentivo constante. 



 v 

 

AGRADECIMENTO 
 

  
 Agradeço, em primeiro lugar, a Deus que iluminou o meu caminho durante esta 

jornada. Faço, também, um agradecimento muito especial a meu marido Gean Márcio, pelo 

companheirismo, paciência, preocupação com meus estudos, pelo apoio constante, por ser 

pai, mãe, amigo, um anjo na minha vida. Obrigada por tudo. 

 Agradeço, também, aos meus filhos, Lucas, Esther e Arthur (bebê), principalmente 

ao Lucas que, constantemente durante o trabalho, vinha até mim com massagens, 

almofadas, lanches, sempre preocupado com o meu cansaço. Com certeza esse carinho 

recebido iluminou, de maneira especia,l os meus pensamentos, me levando a buscar mais 

conhecimentos. E não deixando de agradecer de forma grata e grandiosa a meus pais, 

Acrizio e Minelvina (in memorian), pelo exemplo de vida que deles recebi. 

 Agradeço, também, à amiga Eliana Bandeira que, de forma insistente, me deu força 

para entrar na faculdade, sempre apoiando os momentos iniciais, mostrando caminhos e  

horizontes. Amiga: muito obrigada pela insistência, lembrando o que você dizia “quero ter 

uma amiga analista de sistemas”. Aquilo parecia tão distante e agora posso comemorar.  

 Ao meu orientador Fernando Luiz, pela paciência, incentivo e companheirismo nas 

orientações do PROICT, artigos e TCC. Agradeço pela excelente orientação recebida, 

transmitindo não só conhecimento e experiência, como também o exemplo de dedicação 

com o aluno. 

 Um agradecimento especial ao professor Fabiano Fagundes pelo incentivo do início 

ao término do curso de graduação. Agradeço pela forma de ministrar as aulas sempre com 

muita dinâmica, inovação, conselhos e dicas. Agradeço pelo incentivo à pesquisa sempre 

mostrando caminhos, e pela confiança depositada.  

 Agradeço à professora e coordenadora Parcilene Brito pelo convívio, apoio, pelo 

estímulo acadêmico, pela preocupação com o intelectual do aluno.  

 A todos os professores do CEULP/ULBRA de Palmas do curso de Sistemas de 

Informação, Fernando Luiz, Jackson Gomes, Cristina Filipakis, Fabiano Fagundes, 

Madianita Bogo, Ricardo Marx, Michael Schuenck, Andress Bazarra e Parcilene Brito que 

foram tão importantes na minha vida acadêmica.  

 Agradeço, particularmente, a algumas pessoas pela contribuição direta no 

desenvolvimento deste trabalho. 



 vi 

 

 Ao Roberto Mayer, pela orientação na escolha do meu tema e pelas diversas 

discussões teóricas sobre o trabalho durante toda a pesquisa. Certamente, foram conversas 

que subsidiou novas reflexões para o bom desenvolvimento do trabalho.  

 Ao Denis Courcy, por ter sido um grande companheiro. Agradeço pelo 

conhecimento adquirido, com idas e vindas de e-mails. Amigo, muito obrigada pelo 

carinho, atenção, pela preocupação com minha saúde quando eu exagerava nas horas, pela 

sua disponibilidade sei como seu tempo é precioso, e mesmo assim você estava sempre 

disposto em tirar todas as minhas dúvidas.   

 Ao Raul Wazlawick, pelas contribuições teóricas de engenharia de software, por 

todas as observações feitas no trabalho, desde resumo, melhor colocação das palavras e 

diagramas desenvolvidos. Pelas nossas conversas variadas desde de modelagem, filosofia, 

música, família, futuro etc. Certamente, todas as nossas conversas independentes da hora e 

situação, me ajudaram muito no desenvolvimento do trabalho.   

 Ao Luciano Conde, pelas entrevistas e conversas extrovertidas, mesmo com tantas 

atividades em congressos, palestras e reuniões. Obrigada em me convencer que as coisas 

não são tão complicadas como parecem ser. 

 Ao Anderson Luna, pelas diversas entrevistas, pela disponibilidade e preocupação 

de passar o melhor entendimento possível para meu conhecimento na área de segurança.  

 Ao Vitor Ciaramella, pelas entrevistas, pela paciência, dicas, pelo incentivo do 

tema, pela disponibilidade em ajudar, pelas ressalvas feitas no trabalho.   

 Ao colega Carlos Colangelo mesmo realizando seu trabalho de conclusão de curso 

sempre tinha um tempo para nossas conversas relacionado ao tema, suas expectativas 

profissionais, as oportunidades surgidas em pleno desenvolvimento do trabalho. Sei o 

quanto foi difícil pra você  ter que terminar o trabalho em outro País por que não podia 

desperdiçar uma oportunidade. Trocamos muitas experiências, foi muito bom pra nós.  

 Meu agradecimento especial aos colegas de trabalho, pela compreensão nas horas 

que não pude estar presente no trabalho, especialmente ao chefe imediato Rui Neto.

 Meu agradecimento especial aos revisores Osmar Casa Grande e Arq. Fernando 

Miranda pela paciência na revisão e disponibilidade de corrigir o texto nos finais de 

semana.   

 Agradeço, aos amigos pelo apoio durante o curso, pela amizade, carinho que 

partilhamos durante nosso caminhar... Nos trabalhos realizados, nos estudos constantes, 

dividir a angústia das provas, a alegria das comemorações,  



 vii 

 

e pela nossa afinidade: Camila, Anderson, Gustavo (Jimmy), Márcio, Jeferson, Robert, 

Thiago, Bruno, Enzo, Jarbas, Silvia, Isabel, Gleisson (in memorian), Gedilson, Werley, 

Lilian, Heloísa, Elaine, Cleydiane, Milena, Deise, Naara, Luane, Douglas, Iroilton, Hugo, 

Flávio, Cleuby, Ricardo, Júlio, Leandro, Rafael, William, Leonardo, Ivo, Tatiana, Vitor, 

Felipe, Sara, Kátia etc. 

 Enfim, agradeço a todos que de alguma forma passaram pela minha vida e 

contribuíram na minha caminhada acadêmica. Muito Obrigada a todos vocês. 

 
 
 
 
 
 
 
 
 
 
 

 

 

 

 

 

 

 

 
 

 

 

 

 

 

 



 viii

 

SUMÁRIO 
 

LISTAS DE FIGURAS ............................................................................................................................. XI 

LISTA DE TABELAS ............................................................................................................................ XIV 

LISTA DE ABREVIATURAS ................................................................................................................ XV 

RESUMO ................................................................................................................................................ XVI 

1 INTRODUÇÃO ............................................................................................................................... 17 

1.1 OBJETIVO .................................................................................................................................... 19 

1.2 JUSTIFICATIVA .......................................................................................................................... 19 

1.3 ORGANIZAÇÃO DO TRABALHO ............................................................................................. 20 

2 REVISÃO DE LITERATURA ....................................................................................................... 21 

2.1 DEFINIÇÃO - SOFTWARE AS A SERVICE (SAAS) ................................................................. 21 

2.2 PESQUISAS E ANÁLISES DOS CONCEITOS DE SAAS .......................................................... 26 

2.3 ASPECTOS SOBRE DESENVOLVIMENTO DO SAAS ............................................................ 28 

2.4 ESTRUTURA DE CUSTOS .......................................................................................................... 29 

2.5 A TEORIA DA CAUDA LONGA ................................................................................................. 31 

2.6 MECANISMO DE GERAÇÃO DE RECEITA ............................................................................. 34 

2.6.1 ESTRATÉGIA DE COBRANÇA DE SERVIÇO ......................................................................... 36 

2.7 MERCADO PARA SAAS ............................................................................................................. 40 

2.8 COMPARATIVO DE APLICAÇÕES TRADICIONAIS E SAAS ................................................ 42 

2.9 SLA – SERVICE LEVEL AGREEMENTS ................................................................................... 46 

2.10 VANTAGENS E BENEFÍCIOS .................................................................................................... 51 

2.11 DESVANTAGENS E DIFICULDADES DE UTILIZAÇÃO ........................................................ 53 

2.12 EXEMPLOS DE SAAS VERTICAL E HORIZONTAL ............................................................... 56 

2.12.1 AppExchange......................................................................................................................... 57 

2.12.2 On DemandTM ...................................................................................................................... 58 

2.12.3 Zoho Work ............................................................................................................................. 59 

2.12.4 A Citrix Acess Suite ............................................................................................................... 59 

2.12.5 Google Doc’s ........................................................................................................................ 60 

2.13 SAAS CORPORATIVO ................................................................................................................ 61 

2.14 SAAS E WEB 2.0 ........................................................................................................................... 62 

2.15 DESCRIÇÃO TÉCNICA ............................................................................................................... 65 

2.15.1 NÍVEIS DE MATURIDADE .................................................................................................. 65 

2.15.2 CICLO DE DESENVOLVIMENTO ....................................................................................... 68 

2.15.3 DISPONIBILIDADE DOS DADOS ....................................................................................... 71 

2.15.4 PORTABILIDADE DOS DADOS .......................................................................................... 72 

2.15.5 ESCALABILIDADE DAS APLICAÇÕES .............................................................................. 72 

2.15.6 ESCALABILIDADE DOS DADOS ........................................................................................ 75 

2.15.7 CUSTOMIZAÇÃO DAS APLICAÇÕES ................................................................................ 77 

2.15.8 ARQUITETURA MULTITENANT ......................................................................................... 78 

2.15.8.1 MODELO DE DADOS MULTITENANT ...................................................................................... 79 

2.15.8.2 MODELO DE DADOS EXTENSÍVEL ........................................................................................... 83 

2.15.9 ARQUITETURA DE ALTO NÍVEL ....................................................................................... 89 

2.15.10 SERVIÇOS DE METADADOS .............................................................................................. 90 

2.15.11 SERVIÇOS DE SEGURANÇA............................................................................................... 92 



 ix

 

2.15.11.1 AUTENTICAÇÃO ...................................................................................................................... 92 

2.15.11.2 AUTORIZAÇÃO ........................................................................................................................ 94 

2.15.11.3 AUDITABILIDADE ................................................................................................................... 95 

2.15.12 SEGURANÇA DOS DADOS ................................................................................................. 95 

3 MATERIAIS E MÉTODOS ......................................................................................................... 101 

3.1 LOCAL E PERÍODO ................................................................................................................... 101 

3.2 MATERIAIS ................................................................................................................................ 101 

3.3 MÉTODOS .................................................................................................................................. 101 

4 RESULTADOS E DISCUSSÃO ................................................................................................... 103 

4.1 ESCOPO DO SISTEMA DE GERENCIAMENTO SAAS .......................................................... 104 

4.2 ENTREVISTAS UTILIZADAS PARA IDENTIFICAR OS REQUISITOS ............................... 106 

4.3 COLETA DE REQUISITOS:....................................................................................................... 107 

4.4 ATORES DO SISTEMA .............................................................................................................. 109 

4.5 DIAGRAMAS ............................................................................................................................. 110 

4.5.1 GERENCIAR USUÁRIO .......................................................................................................... 111 

4.5.1.1 DIAGRAMA DE CASOS DE USO ............................................................................................... 112 

4.5.1.2 CASO DE USO EXPANDIDO ...................................................................................................... 113 

4.5.1.3 DIAGRAMAS DE SEQUÊNCIA .................................................................................................. 115 

4.5.2 GERENCIAR CONTROLE DE ACESSO ................................................................................ 117 

4.5.2.1 DIAGRAMA DE CASOS DE USO ............................................................................................... 117 

4.5.2.2 CASO DE USO EXPANDIDO ...................................................................................................... 118 

4.5.2.3 DIAGRAMAS DE SEQUÊNCIA .................................................................................................. 119 

4.5.3 GERENCIAR SISTEMAS ......................................................................................................... 121 

4.5.3.1 DIAGRAMA DE CASOS DE USO ............................................................................................... 121 

4.5.3.2 CASO DE USO EXPANDIDO ...................................................................................................... 122 

4.5.3.3 DIAGRAMAS DE SEQUÊNCIA .................................................................................................. 123 

4.5.4 GERENCIAR USO DO SISTEMA ........................................................................................... 124 

4.5.4.1 DIAGRAMA DE CASOS DE USO ............................................................................................... 125 

4.5.4.2 CASO DE USO EXPANDIDO ...................................................................................................... 126 

4.5.4.3 DIAGRAMAS DE SEQUÊNCIA .................................................................................................. 128 

4.5.5 GERENCIAR CONTRATOS .................................................................................................... 129 

4.5.5.1 DIAGRAMA DE CASOS DE USO ............................................................................................... 129 

4.5.5.2 CASO DE USO EXPANDIDO ...................................................................................................... 130 

4.5.5.3 DIAGRAMAS DE SEQUÊNCIA .................................................................................................. 132 

4.5.6 GERENCIAR IDIOMAS .......................................................................................................... 134 

4.5.6.1 DIAGRAMA DE CASOS DE USO ............................................................................................... 134 

4.5.6.2 CASO DE USO EXPANDIDO ...................................................................................................... 135 

4.5.6.3 DIAGRAMAS DE SEQUÊNCIA .................................................................................................. 138 

4.5.7 GERENCIAR LAYOUT ............................................................................................................ 140 

4.5.7.1 DIAGRAMA DE CASOS DE USO ............................................................................................... 140 

4.5.7.2 CASO DE USO EXPANDIDO ...................................................................................................... 141 

4.5.7.3 DIAGRAMA DE SEQUENCIA .................................................................................................... 143 

4.5.8 GERENCIAR RELATÓRIOS ................................................................................................... 144 

4.5.8.1 DIAGRAMAS DE CASO DE USO ............................................................................................... 145 

4.5.8.2 CASO DE USO EXPANDIDO ...................................................................................................... 145 

4.6 DIAGRAMA DE CLASSES ........................................................................................................ 146 

4.7 MODELO ENTIDADE RELACIONAMENTO .......................................................................... 149 

4.7.1 MODELO PESSOAS ............................................................................................................... 149 

4.7.2 MODELO CONTRATO ........................................................................................................... 151 



 x

 

4.7.3 ACESSO USUÁRIO ................................................................................................................. 154 

4.7.4 MODELO DICIONÁRIO_IDIOMAS ....................................................................................... 156 

4.7.5 MODELO LOG ....................................................................................................................... 157 

4.7.6 MODELO ENTIDADE RELACIONAMENTO UNIFICADO .................................................. 158 

4.8 SERVIÇOS DE ESCALABILIDADE ......................................................................................... 162 

4.9 SERVIÇOS DE SEGURANÇA ................................................................................................... 169 

5 CONSIDERAÇÕES FINAIS ........................................................................................................ 172 

6 REFERÊNCIAS BIBLIOGRAFICAS .......................................................................................... 175 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 



 xi

 

LISTAS DE FIGURAS 
 
Figura 1 – Aspectos da arquitetura de aplicativo do SaaS (CHONG & CARRARO, 2006, p. 5) .......... 22 

Figura 2- Alocação de Recursos “modificado” (CARRARO & CHONG, 2006, p. 6, 7 e 8) ................... 24 

Figura 3 – Estrutura de Custos (MELO, 2007b, p. 24) ........................................................................... 30 

Figura 4 – Teoria da Cauda Longa “modificado” (ANDERSON, 2006, p. 89) ...................................... 32 

Figura 5 –  SaaS vs porte das empresas (MELO, 2007b, p. 30) .............................................................. 40 

Figura 6 – Percentual de aceitação do Software as a Service (MELO et. al., 2007b, p. 30) .................... 41 

Figura 7 – Crescimento Previsto para SaaS (IDC, 2007, p.9) ................................................................. 42 

Figura 8 - Modelo de aplicação de software tradicional e SaaS “modificado” (MELO et al., 2007b, p. 
22) .................................................................................................................................................... 42 

Figura 9 – Exemplo de monitoração pró-ativa do SLA (FIREHUNTER, 2008, p. 17) .......................... 50 

Figura 10 – SALESFORCE (http://www.Salesforce.com) ....................................................................... 57 

Figura 11 - Exemplo de Software como um Serviço Talent Management 
(http://www.authoria.com/talent-management) ............................................................................. 58 

Figura 12 – ZOHO (http://www.zoho.com) ............................................................................................ 59 

Figura 13 - Modelos de softwares como serviço Citrix 
(http://www.citrix.com/English/ps2/products/product.asp?contentID=1686856) .......................... 60 

Figura 14 – GOOGLE (http://docs.google.com) ..................................................................................... 61 

Figura 15 – Aplicativos Web 2.0, VESSALI ( 2008, p. 5) ........................................................................ 62 

Figura 16 – Exemplo de SaaS de mídia social (www.linkedin.com) ....................................................... 63 

Figura 17 - Ambiente Second Life (http://www.rit.edu/news/?v=46149) ................................................ 64 

Figura 18 – Ambiente Youtube (http://www.youtube.com) .................................................................... 64 

Figura 19 - O software como um Modelo de Maturidade de Serviço (CHONG, CARRARO & 
WOLTER, 2006, p. 12).................................................................................................................... 68 

Figura 20 – Visão contínua de software como serviço (MELO et al., 2007b, p. 16) ............................... 69 

Figura 21 – Posicionamentos diferentes sobre a extensão do modelo isolado para compartilhado 
(CHONG, CARRARO & WOLTER, 2006, p.2) ............................................................................ 79 

Figura 22 – Banco de dados isolado para cada inquilino (CHONG, CARRARO & WOLTER, 2006, 
p.2) ................................................................................................................................................... 79 

Figura 23 - Conjunto de tabelas numa mesma base de dados (CHONG, CARRARO & WOLTER, 
2006, p.3) ......................................................................................................................................... 80 

Figura 24 – Conjunto de tabelas compartilhadas (CHONG, CARRARO & WOLTER, 2006, p. 5) ..... 81 

Figura 25 – Banco de dados compartilhado, com esquemas compartilhados (CARRARO, 2006, p.23) 82 

Figura 26 – Extensões ao modelo de dados (CARRARO, 2007, p. 20) ................................................... 84 

Figura 27 – Tabela com um conjunto de registros prévios (CHONG, CARRARO & WOLTER, 2006, 
p.13) ................................................................................................................................................. 84 

Figura 28 – Campo customizado em uma página Web, definido pela entrada de uma tabela de 
metadados (CHONG, CARRARO & WOLTER, 2006, p. 22) ....................................................... 85 

Figura 29 - Armazenamento de tipo de dados em uma única tabela de metadados e em tabelas 
separadas para cada campo customizado (CHONG, CARRARO & WOLTER, 2006, p. 23) ....... 86 

Figura 30 – Tabela de extensão para definição de campos customizados arbitrariamente (CHONG & 
CARRARO, 2006, p. 24) ................................................................................................................. 87 

Figura 31 – Linhas customizadas adicionadas sem prejudicar o modelo de outros inquilinos (CHONG, 
CARRARO & WOLTER, 2006, p. 25) ........................................................................................... 89 

Figura 32 - Arquitetura Alto Nível (CHONG & CARRARO, 2006, p. 19) ............................................ 90 

Figura 33 – Serviços de Metadados (CARRARO & CHONG, 2006, on-line) ........................................ 92 

Figura 34 – Controle de acesso (CHONG & CARRARO, 2006, p. 17) .................................................. 94 



 xii

 

Figura 35 – Conexão de banco de dados utilizando personificação (CHONG, CARRARO & CHONG, 
2006, p. 10) ...................................................................................................................................... 96 

Figura 36 – Conexão a um banco de dados por meio de subsistema confiável (CHONG, CARRARO & 
WOLTER, 2006, p. 11).................................................................................................................... 97 

Figura 37 – Modelo híbrido - conexão a um banco de dados utilizando combinação de personificação e 
do acesso confiável por meio de subsistemas (CHONG, CARRARO & WOLTER, 2006, p. 11) .. 98 

Figura 38 - Arquitetura do Gerenciador SaaS ...................................................................................... 105 

Figura 39  - Diagrama de Caso de uso:  Sistema gerenciador SaaS ..................................................... 111 

Figura 40 -  Gerenciar usuário .............................................................................................................. 112 

Figura 41 – Inserir Usuário ................................................................................................................... 115 

Figura 42 – Alterar Usuário .................................................................................................................. 115 

Figura 43 – Remover Usuário ............................................................................................................... 116 

Figura 44 – Autenticar usuário ............................................................................................................. 116 

Figura 45 - Gerenciar Controle de Acesso ............................................................................................ 117 

Figura 46 - Inserir Permissão ................................................................................................................ 119 

Figura 47 - Alterar Permissão ............................................................................................................... 120 

Figura 48 – Remover Permissão............................................................................................................ 120 

Figura 49 - Gerenciar Sistemas ............................................................................................................. 121 

Figura 50 - Inserir Sistema .................................................................................................................... 123 

Figura 51 - Alterar Sistema ................................................................................................................... 123 

Figura 52 - Remover Sistema ................................................................................................................ 124 

Figura 53 - Gerenciar Uso de Sistema ................................................................................................... 125 

Figura 54 - Configurar Log ................................................................................................................... 128 

Figura 55 - Visualizar Log ..................................................................................................................... 128 

Figura 56 - Gerenciar Contrato ............................................................................................................ 129 

Figura 57 - Inserir contrato ................................................................................................................... 132 

Figura 58 - Alterar Contrato ................................................................................................................. 132 

Figura 59 - Remover Contrato .............................................................................................................. 133 

Figura 60 – Finalizar Contrato ............................................................................................................. 133 

Figura 61 - Gerenciar Idioma................................................................................................................ 134 

Figura 62 - Inserir Termos .................................................................................................................... 138 

Figura 63 - Dicionário de Dados ............................................................................................................ 138 

Figura 64 - Configurar Idioma .............................................................................................................. 139 

Figura 65 - Gerenciar Layout................................................................................................................ 140 

Figura 66 - Inserir Modelo .................................................................................................................... 143 

Figura 67 - Configurar Modelo ............................................................................................................. 144 

Figura 68 – Diagrama de caso de uso: Gerenciar relatório por filtro .................................................. 145 

Figura 69 – Diagrama de Classes .......................................................................................................... 148 

Figura 70 - Modelo Pessoas ................................................................................................................... 150 

Figura 71 – Modelo Inquilino ................................................................................................................ 152 

Figura 72 – Modelo Contrato Fornecedor ............................................................................................ 153 

Figura 73 - Estrutura do RBAC ............................................................................................................ 154 

Figura 74 - Acesso Usuário .................................................................................................................... 155 

Figura 75 – Modelo Dicionário Idiomas ................................................................................................ 156 

Figura 76 - Modelo Gerenciamento de Log ........................................................................................... 157 

Figura 77 - Modelo Entidade Relacionamento Unificado ..................................................................... 161 

Figura 79 – Desenvolvimento do banco para teste ................................................................................ 162 

Figura 80 – Criação da publicação do banco para replicar .................................................................. 163 

Figura 81 – Configuração da replicação ............................................................................................... 163 



 xiii

 

Figura 82 – Confirmação da configuração da distribuição .................................................................. 164 

Figura 83 – Escolha do banco a ser replicado ....................................................................................... 164 

Figura 84 – Selecionar o  tipo de replicação .......................................................................................... 165 

Figura 85 – Escolha do tipo de banco de dados .................................................................................... 166 

Figura 86 – Escolha das tabelas do banco a serem replicadas .............................................................. 166 

Figura 87 – Confirmação de criação de coluna ..................................................................................... 167 

Figura 88 – Escolha de colunas ............................................................................................................. 167 

Figura 89 – Criação da publicação ........................................................................................................ 168 

Figura 90 – Banco replicado .................................................................................................................. 168 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

 

 



 xiv

 

LISTA DE TABELAS 
 
Tabela 1 – Tabela de serviços oferecidos ................................................................................................ 39 

Tabela 2– SaaS versus Aplicações Tradicionais “modificado” (CARRARO, 2007, p.7 ) ....................... 44 

Tabela 3 - Comparação de características de software tradicional e SaaS (MELO, 2007a, p. 5). ......... 45 

Tabela 4 – Modelo de documento SLA ................................................................................................... 48 

Tabela 5 – Indenização por indisponibilidade de infra-estrutura da empresa BRASLINK, através da 
URL http://braslink.com/sla.cfm .................................................................................................... 49 

Tabela 6 – Descrição dos atores do sistema de gerenciamento SaaS .................................................... 109 

Tabela 7 - Gerenciar  Usuário ≪CRUD≫ ............................................................................................ 113 

Tabela 8 – Autenticar Usuário .............................................................................................................. 114 

Tabela 9 - Gerenciar  Controle de Acesso ≪CRUD≫ .......................................................................... 118 

Tabela 10 -  Gerenciar Sistema ≪CRUD≫............................................................................................. 122 

Tabela 11 - Configurar Log ................................................................................................................... 126 

Tabela 12 - Visualizar Log ..................................................................................................................... 127 

Tabela 13 - Relatório Log ≪REP≫ ....................................................................................................... 127 

Tabela 14 - Gerenciar Contrato ≪CRUD≫ ........................................................................................... 130 

Tabela 15 - Finalizar Contrato .............................................................................................................. 131 

Tabela 16 - Gerenciar Idioma  ≪CRUD≫.............................................................................................. 135 

Tabela 17 – Configurar Idioma ............................................................................................................. 136 

Tabela 18 – Gerenciar Termos ≪CRUD≫ ........................................................................................... 136 

Tabela 19 – Dicionário ........................................................................................................................... 137 

Tabela 20 - Caso de uso expandido: Inserir Modelo ............................................................................. 141 

Tabela 21 - Caso de uso expandido: Remover modelo .......................................................................... 141 

Tabela 22 - Caso de uso expandido: Configurar Modelo ...................................................................... 142 

Tabela 23 - Caso de uso expandido: ≪REP≫ Relatório por Filtro ....................................................... 145 



 xv

 

LISTA DE ABREVIATURAS 
 
 

Sigla Descrição 
ACLs Acess  Control List 

API Application Programming Interface 

ASP Application Service Provider 

Asp Active Server Pages 

CIO Chief Information Officer 

CPD Central of data processing 

CRM Customer RelationshipManagement 

EAI Enterprise Application Integration 

EUA  United States of America 

HA High Availability 

I/O Input/Output 

IBM International Business Machine 

ID Identification 

IDC International Data Corporation 

KDC key distribution Center 

PC Personal Computer 

REST Representational State Transfer 

RH Recursos Humanos 

RBAC Role-Based Access Control    

SAAS Software as a Service   

SAP Sistema de gestão empresarial 

SAS 70 Statement on Audit Standards nº 70 

SGBD Sistema de Gerenciamento de Banco de Dados 

SLA’s Service Level Agreements 

SOA Service-oriented architecture 

SOAP Simple Object Access Protocol 

TCO Total Cost of Ownership 

TGT Ticket Granting Ticket 
 

 
 



 

 xvi

 

 
 
 
 
 
 
 
 
 

RESUMO 
 

Software as a Service (SaaS) é um modelo utilizado como estratégia para a distribuição de 

software como serviço. Este padrão promete transformar a forma como as pessoas 

constroem, vendem, compram e utilizam software (CHONG & CARRARO, 2006, p. 3). 

SaaS agrega várias vantagens ao cliente e fornecedor, tais como: implementação rápida, 

menor custo inicial, menor custo de manutenção, facilidade de uso, risco reduzido, 

segurança, acordo entre fornecedor e cliente (Service Level Agreements-SLA), entre outras. 

Este trabalho aborda os conceitos e a origem de SaaS, descreve o modelo de distribuição 

de software, comenta as oportunidades para fornecedores e lista exemplos concretos deste 

modelo. Por fim, os conceitos estudados são aplicados no desenvolvimento de uma 

modelagem para um sistema de gerenciamento de aplicações SaaS englobando aspectos de SaaS 

representados em diagramas UML e modelo ER, adequando o banco de dados da aplicação 

para suportar a arquitetura SaaS, além de descrever serviços importantes como escalabilidade e 

segurança para SaaS. 

 
Palavras chaves: Software as a Service, mercado e comercialização de software, 

Modelagem, Gerenciador de Aplicações SaaS. 

 
 
 
 
 
 
 
  

 
 
 
 
 
 



 
 xvii

 

 
 
 
 
 
  

 
 
 
1 INTRODUÇÃO 
 
Software as a Service (SaaS) é uma tendência na indústria de software que se caracteriza 

por ser  um modelo de negócios que oferece às organizações o acesso centralizado de suas 

informações por meio de hospedagem e acesso pela Internet. Permite que a empresa que 

oferece SaaS (provedora do software) tenha clientes (inquilinos), os quais possam vir a ter 

milhares de clientes próprios, utilizando aquele software (usuário final). Caracteriza-se por 

oferecer ao cliente a possibilidade de utilizar o software via Internet, sendo o software 

hospedado em um servidor controlado pelo fornecedor, evitando assim problemas de 

instalação, atualização, hardware e suporte. O modelo é utilizado como estratégia para a 

distribuição de software como serviço. 

 No modelo SaaS, a aplicação é criada e mantida  por quem desenvolve o software, 

ou através de um intermediário, que objetiva juntar as ofertas de SaaS de terceiros e 

anunciar em sua página local, a fim de vender os serviços disponíveis nos softwares. 

Assim, o cliente não compra a licença do software, compra apenas o serviço, sendo o 

pagamento feito, geralmente, por meio de assinatura, continuando com o fornecedor do 

software a responsabilidade pelo gerenciamento total da aplicação. 

 Este modelo é um desafio para os profissionais de Tecnologia da Informação (TI), 

pois é preciso contar com profissionais preparados, ágeis, que desempenhem papéis 

diferentes no negócio e na TI; equipes que tenham visão de mercado, que sejam tão rápidos 

quanto os seus concorrentes, pois a importância de se ter um software está na capacidade 

de expandir a produção e a eficiência do negócio.  

 É importante prestar atenção nesse movimento em andamento para entender e 

avaliar as consequências, pois este modelo incorpora novos mercados, o que possibilita às 

empresas alcançar novos tipos de clientes. Não somente grandes empresas, mas também 

empresas locais, e mesmo futuras empresas terão como desafio buscar um novo modelo 

que lhes permita concorrer no mercado. 



 18

 

 O mercado evolui constantemente e, para operar uma empresa ou uma solução 

baseada neste modelo de sofware como serviço, todos devem estar preparados, tanto do 

ponto de vista técnico quanto do financeiro. O SaaS é um modelo de negócios que afeta a 

maneira de trabalhar os investimentos da empresa, bem como a maneira de se convencer os 

investidores e os clientes a fazer parte do negócio, pois o cliente precisa adaptar sua 

própria estrutura a um determinado nível de controle, bem como confiar no fornecedor de 

soluções de SaaS - para se manter seguro (CHONG, CARRARO & WOLTER, p. 2). 

 Segundo a Gartner (2009c, on-line), são vários os fatores que sustentam o rápido 

crescimento de SaaS, entre eles codificação e retorno do investimento rápido; menor 

investimento inicial de capital, maior concorrência no mercado que reforça a oferta e a 

demanda, a responsabilidade pela operação contínua (backups, atualizações, manutenção 

das infra-estruturas entre outros) são de responsabilidade dos prestadores de serviços. De 

acordo com a IDC (2008) dados publicados na revista MICROSOFT-Magazine (2008, 

p.46) a IDC, empresa multinacional de pesquisa de mercado em TI,  estima que 10% de 

todo o mercado empresarial de software migrará, em 2009, para modelos de SaaS. E, 

segundo estudo da Gartner, o mercado de SaaS deve atingir em 2009 um crescimento de  

US$ 8 bilhões, 21.9 % a mais em relação ao ano anterior. A empresa prevê que SaaS 

permanecerá em constante crescimento até 2013, quando os investimentos em Software as 

a Service chegarão a US$ 16 bilhões (GARTNER, 2009a, on-line). 

Várias empresas já desenvolvem softwares no modelo SaaS, com as mais recentes 

tecnologias e oferecem a seus clientes a opção de experimentar os produtos sem qualquer 

compromisso contratual. Alguns exemplos de empresas que trabalham com este modelo 

são: Salesforce, Google, Zoho, Autoria, IBM, Microsoft, Amazon, Ebay, Kitchenaid e 

Lego, entre outros. 

Outra característica é a possibilidade de oferecer software a vários clientes e 

empresas de forma simultânea. Este é um dos principais objetivos: distribuir o software 

para um maior número de clientes, fundamentado no conceito de Chris Anderson (2006),  

“the long tail” (a cauda longa).  

Este trabalho aborda vários conceitos relacionados ao SaaS, e tem o intuito de 

disponibilizar material teórico para os profissionais interessados no tema abordado. Ao 

final, o objetivo é apresentar uma modelagem englobando aspectos de SaaS, tais como: 

atores, diagramas de casos de uso, casos de uso expandido, diagrama de sequência e 

diagrama de classes. Além disso, apresentar um modelo Entidade Relacionamento 



 19

 

adequando o banco de dados da aplicação para suportar a arquitetura SaaS. Por fim, serão 

apresentados alguns serviços de segurança para sistemas do tipo SaaS, bem como um 

exemplo de escalabilidade utilizando o SQL Server 2005. 

 

1.1 OBJETIVO 
 
O objetivo deste trabalho é oferecer um material de apoio aos profissionais interessados 

sobre os conceitos que envolvem SaaS, referente à sua arquitetura, organização, 

vantagens/desvantagens, custo, exemplos de softwares já desenvolvidos, tendência de 

mercado, aspectos técnicos, entre outros. Posteriormente, estes conceitos serão utilizados 

no desenvolvimento da modelagem de uma aplicação que irá prover o gerenciamento de 

outros sistemas SaaS.  

 

1.2 JUSTIFICATIVA 
 
SaaS  é um modelo utilizado como estratégia para a distribuição de software. Esse modelo 

de negócios provoca mudanças fundamentais no desenvolvimento de software, em direção 

a um modelo centrado na prestação de serviços. Este modelo caracteriza-se por oferecer ao 

cliente a possibilidade de utilizar o software via Internet, sendo o software hospedado num 

servidor remoto controlado pelo fornecedor, evitando assim problemas de instalação, 

atualização, hardware e suporte. Esse tipo de serviço traz vários benefícios ao cliente: 

reduz o custo porque o cliente não precisará adquirir muitos equipamentos de hardware, 

uma vez que o software está hospedado na infraestrutura do fornecedor. Além disso, é 

dispensado o pagamento da licença para contratar o serviço, ou seja, ao invés de uma única 

taxa, o pagamento pela utilização de um software é feita por meio de assinatura ou outros 

meios de cobrança. 

 Em relação à implantação do software, o processo é mais rápido porque o software está 

pronto para uso no servidor do fornecedor. Além disso, o suporte técnico é facilitado, não 

sendo necessário deslocamento de equipe. Quanto à acessibilidade, o serviço poderá ser 

acessado de qualquer local a qualquer momento, via Internet e consequentemente, aumenta 

a integração entre as filiais de uma mesma empresa. Sobre a escabalidade, como o modelo 

permite um número maior de clientes, é indispensável a utilização de técnicas para permitir 

alocação de recursos sob demandas. A aplicação estará mais flexível no sentido de que a 

quantidade de inquilinos e usuários finais de SaaS pode aumentar e diminuir de acordo 



 20

 

com a necessidade do contratante. Isso permite flexibilidade e adequação do custo da 

empresa à sua realidade. No aspecto continuidade, a tendência é que sejam incorporados 

constantemente novos recursos e atualizações de versões no software.  

 
1.3 ORGANIZAÇÃO DO TRABALHO 
 
No capítulo 2 consta a revisão de literatura sobre conceitos relacionados ao SaaS. O 

capítulo 3 apresenta os materiais e métodos utilizados para desenvolver o trabalho. A seção 

4 mostra a discussão e os resultados. No capítulo 5, são apresentadas as conclusões finais 

deste trabalho.  No capítulo 6, apresentam-se as referências bibliográficas citadas no texto. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  

 
 
 
 



 

 21

 

 
 
 
 
 
 
 
 
 

2 REVISÃO DE LITERATURA 
 
Este capítulo apresenta conceitos que integram a estrutura de SaaS. São apresentados 

definição de SaaS, pesquisas e análises dos conceitos de SaaS, aspectos sobre 

desenvolvimento, estrutura de custos, a teoria da a cauda longa, mecanismos de geração de 

receita, mercado para SaaS, comparativos de aplicações tradicionais e SaaS, Service Level 

Agreements (SLA), vantagens e benefícios, desvantagens e dificuldades de utilização, 

exemplos de SaaS horizontal/ vertical,  SaaS corporativo e SaaS e Web 2.0. Na seção 2.2 

apresenta a descrição técnica de SaaS, níveis de maturidade, ciclo de desenvolvimento, 

disponibilidade dos dados, portabilidade, escalabilidade das aplicações, escalabilidade dos 

dados, customização das aplicações, arquitetura multitenant, arquitetura de alto nível, 

serviço de metadados, serviços de segurança, segurança dos dados e extensões ao modelo 

de dados.  

  
2.1 DEFINIÇÃO - SOFTWARE AS A SERVICE (SAAS) 
 
Softwares as a Service (SaaS) pode ser definido como software desenvolvido como um 

serviço hospedado e acessado por meio da Internet. Segundo Chong & Carraro (2006, p. 

4), o SaaS está classificado em duas divisões: serviços de linha de negócios e serviços 

orientados a cliente. A diferença entre as duas categorias se dá pelo fato de que em uma o 

software geralmente é distribuído em larga escala e vendido por assinatura. Na outra, o 

software é oferecido ao público em geral e geralmente o software é distribuído 

gratuitamente e custeado por anúncios.  

 Assim, passar a distribuir esses serviços ao invés de fornecer software pelo modelo 

tradicional, “modifica a forma dos fornecedores pensar” em três aspectos:  modelo de 

negócios, arquitetura do software e estrutura operacional (figura 1) (CHONG & 

CARRARO, 2006, p. 5). 



 22

 

 
 

 
 
Figura 1 – Aspectos da arquitetura de aplicativo do SaaS (CHONG & CARRARO, 2006, 
p. 5)  
 
 De acordo com a figura 1, no modelo SaaS, o modelo de negócios é alterado, pois o 

fornecedor passa a hospedar o software em um provedor externo sob a responsabilidade 

com infraestrutura, implementação e gerenciamento do fornecedor. Essa modificação na 

estrutura de negócios, na ótica do cliente, trará como conseqüência imediata menores 

custos de manutenção, gerenciamento e implementação. Outra enorme vantagem é que o 

cliente que trabalha com a rede de usuários de seu(s) software(s), terá a garantia de 

constante desenvolvimento, garantindo à sua rede de usuários finais um modelo 

tecnológico sempre em top de linha, configurando o beta perpétuo.  

Para o fornecedor, a vantagem está no fato de que o gerenciamento, armazenamento e 

implementação dos softwares se dará não para um único cliente, mas sim para muitos. 

Quanto maior o número de clientes, menores os custos com os serviços oferecidos. Isto é o 

que nos diz Chris Anderson (2006) na teoria da cauda longa. Um fornecedor de SaaS com 

um número grande de clientes significa que cada cliente é considerado responsável por 

somente um percentual do custo de um servidor. De acordo com Chong & Carraro (2006, 

p.7), 
Um aplicativo de SaaS de linha de negócios em um farm1 com cinco 

servidores com carga balanceada poderá dar suporte a 50 clientes de 

tamanho médio, o que significa que cada cliente seria responsável por 

somente um décimo do custo de um servidor.  

                                                           
1
 Farm são várias unidades de servidores. 



 23

 

 Para entender os benefícios do SaaS é indispensável que haja mudanças na forma 

de pensar por parte do fornecedor e do cliente.  

 Já com relação a arquitetura de aplicativos: o objetivo é que o cliente pague pela 

assinatura do serviço e perceba que utilizar o SaaS traz vários benefícios econômicos e 

quantificáveis em relação ao modelo tradicional. Destaca-se no conjunto de benefícios a 

diminuição do esforço de desenvolvimento em marketing na área de TI, já que a tecnologia 

na área desenvolve-se em progressão geométrica. Considere-se, ainda, que proporciona ao 

cliente uma maior flexibilidade na gestão do próprio negócio, já que o software poderá ser 

operado de qualquer local que tenha um computador com acesso à Internet. Além disso, 

pelo fato do sistema ser gerenciado e atualizado no ambiente do fornecedor, é menor o 

custo para a empresa que opte pelo SaaS. 

 O modelo SaaS permite um desdobramento da utilização dos serviços, onde o 

cliente pode disponibilizar o software locado para uso de terceiros, aos quais chamaremos 

de usuários finais. Nesses casos, o cliente desenvolve relações comerciais diversas com os 

usuários finais, podendo utilizar os meios tradicionais de cobrança (assinatura mensal ou 

anual, além de volume de serviços) pela utilização do software ou optar por não cobrar 

especificamente pelo serviço disponibilizado. Neste caso, o uso é gratuito para o usuário 

final, pois o cliente busca outras formas de obter receita. Nessa modalidade, o cliente pode 

buscar parceiros ou cobrar por anúncios, caso tenha um grande fluxo de usuários. Além do 

custo inicial reduzido para o cliente, de acordo com Chong & Carraro (2006, p. 8), “há 

uma porcentagem maior da receita disponível para gastar em software”, normalmente na 

forma de taxas de assinaturas, transações, ou por meio de anúncios. Por fim, a estrutura 

operacional: também é alterada. Geralmente, o investimento com Tecnologia da 

Informação (TI) nas organizações é gasto em três áreas distintas: software, hardware e 

serviços profissionais (CHONG & CARRARO, 2006, p. 6). O software é o que está mais 

envolvido no gerenciamento das informações; os outros aspectos são componentes 

fundamentais e importantes do ambiente de TI, mas percebe-se que o software é o 

resultado esperado no gerenciamento das informações. Geralmente, em modelos de 

software local, a maior parte do investimento é gasto em hardware e serviços profissionais, 

ficando a outra parte disponível para software. A figura 2 apresenta a alocação de recursos  

distribuídos nestas áreas, de acordo com o modelo de desenvolvimento utilizado. 

 



 24

 

 

 
Figura 2- Alocação de Recursos “modificado” (CARRARO & CHONG, 2006, p. 6, 7 e 8) 

 
 A primeira imagem, da esquerda para a direita, apresenta a aplicação cliente-

servidor (tradicional) e mostra o conjunto de recursos necessários para executar a 

aplicação, divididos em software (parte verde), que trata do volume dos recursos; hardware 

(parte lilás), que representa a quantidade de máquinas, servidores e componentes 

necessários para manter o software em rede; pessoas (parte amarela) que são as pessoas 

contratadas para implementar e dar manutenção no software e hardware, incluindo também 

consultores, entre outros. Segundo Chong & Carraro (2006, p. 7) o valor gasto é cerca de 

“20% dos recursos para manter o software ao mês; o restante se divide em hardware e 

pessoal necessário para manter o software em operação”. Nesse tipo de recurso, o 

investimento é gasto especialmente com licenças de software comercial.  

 Na sequência da figura 2, a imagem central representa o modelo de SaaS e 

apresenta uma estratégia de vendas bem diferente. Neste sugere-se que se pague um valor 

mínimo por mês, e o valor gasto com a área de hardware e pessoal certamente diminuirá, 

porque para utilizar o sistema será preciso apenas dispositivos capazes de acessar a Internet 

ou a rede que estiver usando para comunicar-se com os equipamentos do vendedor. 

 Ainda na figura 2, a última imagem apresenta o SaaS detalhado. Os elementos 

(hardware e pessoas) que faziam parte do negócio do cliente (modelo tradicional), agora 

fazem parte dos fornecedores dos softwares como serviço. Desta forma, por causa do 

modelo, a empresa contratante terá um porcentual maior do orçamento para investir em 

software, podendo contratar novos serviços e configurações. Caso o cliente não precise de 

outras soluções de software, todo esse capital, que corresponde a cerca de 40% do 

investimento no modelo tradicional, será economizado.  

 A maioria das empresas fornecedoras não aceita esse modelo de distribuição de 

software porque existem dúvidas sobre qual a vantagem em utilizar o modelo SaaS, se 



 25

 

todas as despesas com software e hardware passam a ser responsabilidade dele, fornecedor. 

Contudo, a estratégia de faturamento se dá principalmente pela economia de escala, pois, 

se o fornecedor obtiver um número X de clientes hospedados centralmente, atenderá todos 

os clientes em um único ambiente, diluindo os custos de armazenagem e compilação entre 

o número de clientes. Isso representa uma economia bem maior quando comparada ao 

modelo tradicional, e à medida que são adicionados mais clientes nessa estratégia, diminui 

proporcionalmente o custo operacional por inquilino. Então, mesmo considerando tantas 

responsabilidades com custo de hardware e serviços profissionais, o fornecedor SaaS pode 

oferecer ao cliente melhores funcionalidades de softwares. 

 Quanto a outras tecnologias é interessante desfazer algumas confusões relacionadas 

ao conceito. Existem algumas siglas parecidas que, às vezes, confundem as pessoas. SaaS 

não é o mesmo que SOA ou WebService. Apesar de que todas essas tecnologias podem ser 

integradas, deve-se entender o que cada uma significa. Existem soluções de SaaS baseadas 

no modelo SOA e é possível combinar ambas, o que não as faz uma só arquitetura. 

A SOA refere-se a uma forma de utilizar recursos e funcionalidades de softwares e 

distribuir seus componentes na rede. Por exemplo, suponha-se que há uma aplicação que 

processa pedidos em uma loja virtual e um componente com cartão de crédito que, ao invés 

de estar embutido na aplicação, utiliza o serviço fornecido pela administradora de cartão, 

como se fosse uma sub-rotina, um procedimento, em termos de linguagem de programação 

tradicional, que é acionado à distância. Este deixa de ser um serviço, mas não é SaaS, 

porque uma parte da aplicação é tradicional, está rodando na máquina de quem está 

usando.  

Porém, existem hoje soluções de SaaS cuja implementação utiliza a estrutura baseada em 

serviços da SOA, porque do ponto de vista da teoria da Ciência da Computação de 

software, a Arquitetura Orientada a Serviços nada mais é do que expor as rotinas da 

aplicação, disponibilizando o código como um serviço, geralmente por meio de 

WebService. De acordo com Josuttis (2008, p.3), “a Arquitetura Orientada a Serviços provê 

o suporte para os processos distribuídos entre diversos sistemas locais, nacionais e 

internacionais. Com centenas de serviços, o sistema suporta milhões de chamadas de 

serviço a cada dia”. O resultado, resumidamente, é o mundo dos objetos distribuídos, 

linguagens, enfim, uma série de padrões novos para tornar viável a operação desses objetos 

já compilados. Fazer esse tipo de aplicação não é a mesma coisa que modificar o modelo 

de operação de venda do software. Na seção 2.2 comenta-se a análise dos conceitos SaaS.  



 26

 

2.2 PESQUISAS E ANÁLISES DOS CONCEITOS DE SAAS 
 
De acordo com Chong & Carraro (2006, p. 2), ainda não existe um consenso em torno do 

conceito de SaaS: “se entrevistar cinco pessoas, possivelmente teremos cinco conceitos 

diferentes”. Contudo, há acordo entre os especialistas a respeito de algumas características 

em relação ao SaaS, dentre elas: o software é implementado e hospedado no local em que 

foi desenvolvido;  são considerados softwares de linha de negócios e  apresentados a um 

número grande de usuários. 

 Percebe-se também que cada vez mais o modelo SaaS vem se ampliando no 

mercado mundial de software. Segundo a Gartner, através de dados publicados na revista 

INFO, (Sposito 2008, p. 35) “o rendimento geral gerado pelo SaaS, deverá atingir cerca de 

11,5 bilhões de dólares em 2011”. Alguns fornecedores de SaaS dizem que SaaS é uma 

evolução do Asp (Internet Information Service). Essa afirmação se dá por que existem 

alguns pontos comuns entre essas tecnologias no aspecto baixo investimento, custo 

previsível, e rápido retorno dos benefícios.  

 A aplicação do conceito de SaaS ainda não funciona para todos os tipos de 

softwares. No caso de sistemas mais complexos, que são de extrema importância para a 

organização, o modelo ainda não é totalmente confiável. De acordo com Sposito (2008, p. 

35), “ele está maduro para softwares básicos, padronizados, que podem ser compartilhados 

por várias empresas e não exigem customização.” Por isso, é importante entender bem o 

modelo antes de adotá-lo.   

 Além disso, a adoção do SaaS ainda causa dúvida em muitos CIOs (Chief 

Information Officer), especialmente quanto à segurança e à confidencialidade dos dados. 

Esse tipo de dúvidas é um dos obstáculos para o crescimento da expansão do modelo SaaS, 

dificultando a decisão entre adotar ou não o conceito.  

 Uma das grandes vantagens em se obter um SaaS, é o fato de a aplicação estar 

distribuída e compartilhada para vários usuários, o que diminui os custos em relação à 

arquitetura cliente-servidor. De acordo com Sposito (2008, p. 36), a empresa Salesforce 

(fornecedora de SaaS), com apenas “três data centers passam 130 milhões de transações 

por dia, realizadas em todo o mundo por mais de 38 mil clientes e um milhão de usuários”. 

Essa empresa possui clientes de peso, como a Merryll Lynch, com 30 mil usuários 

espalhados no mundo inteiro. A empresa opera cobrando uma taxa mensal do cliente pelo 

número de usuários do serviço e tem obtido grandes resultados em seu faturamento. Esse 

sucesso tem estimulado outras empresas a criar softwares neste modelo e aproveitar seus 



 27

 

softwares desenvolvidos. De acordo com Sposito (2007, p. 37), “são mais de 750 os 

aplicativos corporativos que foram desenvolvidos utilizando a plataforma Force.com da 

organização. Cerca de 62 mil profissionais compartilham esse recurso”. Um outro exemplo 

é a Datasul, empresa brasileira que, desde 2001, oferece uma solução de ERP como serviço 

para Asp e em 2008, fizeram acordo com a Salesforce para usar alguns dos seus softwares 

que estavam disponibilizados na plataforma force.  

 A oferta de integração é importante para o modelo SaaS expandir entre as grandes 

empresas. As organizações estão cada vez mais se integrando uma às outras por meio de 

negócios e, nesse caso, as soluções de SaaS podem ser uma opção interessante para 

compartilhar a mesma ferramenta e infraestrutura comum, sem se preocupar com qualquer 

responsabilidade de gerenciamento do software (MELO, 2007a, p. 6). A tendência é que 

aja mais colaboradores não somente com o intuito de faturar, e sim com inovações 

tecnológicas, produção e agilidade na fabricação de softwares como serviço. SaaS é uma 

tendência irreversível, pois vem conquistando mercado e o próprio sucesso dos 

fornecedores de SaaS, força os fornecedores a pensar na possível adoção do sistema. Jack 

Sterenberg, diretor de serviços da Oracle do Brasil diz que “o software como serviço é um 

conceito que ultrapassa a comercialização, pois traz um valor significativo para os 

processos” (SPOSITO, 2008, p. 37).  

 Segundo Sposito (2008, p. 38), “a maioria dos clientes que já utilizam o modelo de 

SaaS está satisfeita. São várias as utilidades concretas que o SaaS opera em várias 

organizações”, dentre elas:  

• Exemplo1: solução que roda no servidor linux do provedor e é utilizada pelos usuários 

do Metrô, via WebServices (a aplicação age integrada a um Data Warehouse do Metrô, 

por meio do banco de dados Postgree, e se encarrega de buscar as informações em 

qualquer local (Companhia 2do Metrô de São Paulo). 

• Exemplo2: execução de projetos que visam a adaptação de sistemas desenvolvidos em 

outros ambientes para plataformas SaaS, embora com o desenvolvimento desta 

funcionalidade o custo aumente (IBM). 

• Exemplo3: utilizam SOA para integração de sistemas entre o SaaS e  outras aplicações 

(TGT Consult).  

                                                           
4 Conectores padrões se refere a um conjunto de protocolos, tecnologias, modelos, plataformas, no qual a 
aplicação deverá ser desenvolvida para se comunicar com o software. Ex. COM, CORBA, RPC, REST 
(MELO, 2007, p. 5). 



 28

 

   Em relação à análise do conceito de SaaS, duas empresas grandes têm 

fundamentos diferenciados. Segundo Melo & Arcoverde (2007, p.18), de um lado a 

Microsoft diz que “a Internet para SaaS é imprescindível”, do outro lado, a IBM, diz que 

“a Internet é tipicamente a rede utilizada para fazer a transferência dos bits, e representa o 

serviço, mas não obrigatoriamente”.  

 Também observou-se que há um equívoco entre conceitos de SaaS e o termo 

computação na nuvem. O fato de SaaS utilizar a nuvem em suas aplicações, não significa 

que é considerada no contexto de computação em nuvem. Segundo Desisto, Plummer & 

Smith (2008, on-line), “computação na nuvem é um tema mais abrangente que não pode 

ser confundido com SaaS, esse utiliza a computação na nuvem apenas em sua arquitetura.” 

O tema computação em nuvens ainda não está totalmente conceituado. O autor diz que 

ainda poderão surgir várias modificações e o termo mudar para "computação galáctica". 

O conceito fundamental de SaaS é que ele se baseia no valor que os negócios podem 

proporcionar às sua organizações, em torno da distribuição, faturamento e arquitetura. 

Independentemente de os fornecedores de SaaS quererem alavancar suas publicidades 

utilizando o termo computação nas nuvens,  o mais importante é focar no resultado que o 

provedor de SaaS  traz para sua organização. 

 No modelo de SaaS, o objetivo não é desenvolver um novo aplicativo, e sim 

modificar o software existente para que este seja distribuído via Web e lançado no mercado 

sem custo de licença para o cliente. Acredita-se que com o passar dos anos, SaaS deve 

conquistar cada vez mais o espaço no mundo dos negócios e na TI. SaaS ainda tende a 

passar por muitas mudanças para melhor atender às necessidades do mercado e trará vários 

tipos de ofertas. Cada empresa deve ter sua visão de futuro, adaptar seus negócios ao 

modelo para competir no mercado e, consequentemente, lucrar com essa oportunidade de 

negócio. Na seção 2.3 aborda aspectos sobre desenvolvimento do modelo.  

 

2.3 ASPECTOS SOBRE DESENVOLVIMENTO DO SAAS 
 
Para desenvolver software baseado no modelo SaaS é necessário entender seu ambiente, 

quais são os cuidados, as questões técnicas e o que realmente muda neste processo em 

relação ao desenvolvimento tradicional. Assim, de acordo com Chong, Carraro & Wolter 

(2006, p. 4), para adotar este modelo, “a confiança, ou a ausência dela, é a principal causa 

para a não utilização do SaaS”. As bases de construção dessa confiança do cliente estão 

alicerçadas em fatores como: uma arquitetura de dados robusta e segura o bastante que 



 29

 

possibilite um eficiente controle dos dados empresariais e ao mesmo tempo que apresente 

uma boa relação de custo/benefício no gerenciamento e administração. 

 Os dados certamente são uma das coisas mais importante de uma organização, por 

isto, a forma como serão organizados e protegidos, sem dúvida, são a essência do SaaS. O 

modelo SaaS de distribuição de software oferece aos clientes acesso abrangente às suas 

informações com um custo mais acessível que o modelo tradicional. Mas para desenvolver 

neste ambiente, devem-se entender quais os cuidados, as questões técnicas e o que muda 

no processo em relação ao desenvolvimento tradicional e, principalmente, confiar no 

fornecedor de soluções. 

Existe uma série de detalhes técnicos nesse processo e duas decisões: o que pode 

ser compartilhado e o que pode ser isolado dos recursos da aplicação. O banco de dados é 

um setor que pode sofrer mudanças significativas, relacionadas ao nível de otimização para 

o modelo SaaS. Vai depender das exigências do cliente. Profissionais mais experientes 

podem oferecer uma série de sugestões para resolver determinado problema. Deve-se 

pensar em soluções não apenas para o modelo de dados, mas em tudo o que está envolvido 

no processo.   

Para a empresa fornecedora de solução SaaS, o ideal é que a base de dados seja 

única para todos os clientes, porém, o cliente pode exigir que seus dados estejam separados 

dos demais clientes, e no mundo dos negócios deve-se sempre fazer a vontade do cliente 

para não perder o negócio (CHONG, CARRARO & WOLTER, 2006, p. 6). No entanto, 

caso isto ocorra, o custo será maior e isso deverá estar claro para o cliente. Na seção 2.4 

explica a estrutura de custos de SaaS.  

 

2.4 ESTRUTURA DE CUSTOS 
 
Utilizar a estrutura de SaaS apenas para distribuir a aplicação na rede não é motivo para a 

adoção; antes deve haver uma estratégia comercial para garantir a receita. É necessário ter 

público. O cliente deve fazer um estudo dos gastos envolvidos e estimativas de uso das 

funcionalidades que serão oferecidas. SaaS proporciona oportunidades para que as 

empresas, de vários tipos deixem de enfrentar os riscos da compra de software e transfiram 

o departamento de TI de um centro de custo estático para outro, dinâmico, como uma parte 

da empresa que produz valor (CARRARO & CHONG, 2006, on-line).  

            Quando se compra a licença de um software, o custo total, propriedade chamada de 

TCO (Total Cost of Ownership), o valor da licença acaba sendo a menor parte. Porque para 



 30

 

implementar e customizar o software é necessário obter vários hardwares de porte melhor 

no qual se vai executar o software; além disso, há custos com pessoal para operação e 

manutenção do software, tempo disponível e, por último, o treinamento dos usuários. De 

acordo com Carraro & Chong (2006, on-line),  
Todos esses fatores representam um risco significativo para a 

organização de qualquer porte e, repetidamente, fazem com que esse 

software fique fora do alcance de empresas menores que poderiam se 

assim não fosse, obter dele grande proveito em todos os sentidos. 

               Na figura 3 é apresentado um dos argumentos de vendas utilizados pela empresa 

de venda de software - Salesforce. Percebe-se uma comparação dos softwares da empresa à 

(direita) com software tradicional à (esquerda). 
 

 

 
 

Figura 3 – Estrutura de Custos (MELO, 2007b, p. 24) 

 

 Se o valor investido para a obtenção de um software tradicional representar, por 

exemplo, 80% (oitenta porcento), 91% (noventa porcento) ou 95% (noventa e cinco por 

cento) do total, não importa, a licença é sempre a menor parte. As áreas da parte escura da 

figura 3, relacionada à criação/manuntenção de software, desaparece no modelo de SaaS, 

porque grande parte desses fatores são de responsabilidade do fornecedor. O total a ser 

gasto é muito menor, notadamente a parte oculta. Os custos ocultos são menores e, ao 

mesmo tempo, o valor que se paga pela licença é semelhante. Para quem está operando 

neste modelo, lado direito da figura, o cliente verá, a longo prazo, se o modelo é mais 

viável do que o modelo tradicional. Na próxima seção será comentado sobre a teoria da 

cauda longa. 



 31

 

2.5 A TEORIA DA CAUDA LONGA 
   
No mercado tradicional, quando se tem uma indústria que fornece um produto de consumo, 

normalmente se obtém a economia de escala, vendendo o menor número de produtos para 

o maior número possível de consumidores. Esta é a base do processo industrial, porque 

quanto mais variedades de cor ou matéria-prima, maior será o custo, e nem sempre esse 

custo pode ser cobrado do cliente (CHONG & CARRARO, 2006, p. 2). A evolução da 

tecnologia de negócios orienta para uma nova postura em relação ao mercado e propõe 

uma dinâmica em que aquele conceito de massa transforma-se em atendimento 

personalizado. Tal tendência exige novas posturas e novas ferramentas. Anderson (2006, p. 

6), diz que: 
Agora, numa nova era de consumidores em rede, na qual tudo é digital, a 

economia da distribuição está mudando de forma radical, à medida que a 

Internet absorve quase tudo, transmutando-se em loja, teatro e difusora, 

por uma fração mínima do custo tradicional.     

 O autor utiliza o termo “cauda longa” para descrever essa situação no livro “The 

Long Tail" (A longa cauda) na edição de outubro de 2004 (Best-Seller Internacional), o 

qual, desde então, tem sido citado com ênfase pela alta direção das empresas e pelos meios 

de comunicação em todo o mundo. O autor observa que a Internet é a responsável por um 

novo universo, no qual novas tecnologias causam impacto nos negócios atuais. Segundo 

Anderson (2006, p. 33), a tendência é que o mercado de hits, onde os consumidores eram 

direcionados pelas listas de sucesso impostas, seja desestruturado. E com a introdução das 

novas tecnologias, esse modelo gradualmente perde espaço. Essas novas tecnologias 

liberaram as pessoas para que elas pudessem trafegar entre os nichos fazendo suas 

descobertas, permitindo que as pessoas possam escolher o que elas querem fazer, deixando 

de lado os hits impostos (ANDERSON, 2006, p. 33).      

 Observa-se que os fornecedores de soluções de SaaS defrontam com uma curva de 

negócio semelhante ao da cauda longa. A figura 4, lado esquerdo da curva (flecha amarela) 

é o lado tradicional, onde se trabalha com poucos clientes. Na medida em que se consegue 

diminuir o preço do produto, mais pessoas vão poder comprar (flecha vermelha) e, 

consequentemente, começa a conquistar o cliente gradativamente (flecha preta, lado direito 

da imagem).  

 A cauda longa significa que não existe limite à direita da figura, como mostra a 

figura 4. Ao invés de se ter algumas dúzias de empresas que vendem milhões de unidades 



 32

 

de softwares, lucrando com economia de escala, é possível, neste modelo, uma empresa 

gerenciar, no sistema SaaS, muitos softwares para os quais só se tinha uma dúzia de cliente 

interessados e obter lucro, ao mesmo tempo em que diminui custos para os usuários. Nessa 

nova arquitetura de negócios, pode-se substituir a realidade de "algumas empresas que 

vendem milhões de unidades de software" por "milhares de empresas que gerenciam 

alguns softwares como serviço". Na soma acumulada dos produtos de nichos3, o volume 

gerado pode superar o volume dos produtos de massa hits e consequentemente, o 

faturamento e o lucro do mercado de nicho da cauda são maiores.   

Grandes clientes 

Clientes típicos 

Novos clientes  

 
 

Figura 4 – Teoria da Cauda Longa “modificado” (ANDERSON, 2006, p. 89) 
 

 A figura 4 mostra que, ao oferecer softwares com custo menor, há uma tendência de 

um número maior de clientes adotar esse tipo de modelo. Esse número é ilimitado, “uma 

vez que a curva não toca o eixo "x" “(ANDERSON, 2006, p. 15).  Assim, os fornecedores 

de SaaS podem oferecer recursos a um valor menor em relação aos fornecedores 

tradicionais, não apenas pelo custo mas também pelo fato de os clientes não precisarem 

investir como antes em infraestrutura relaciona à TI. Desta forma, os fornecedores de SaaS 

passam a ter acesso exclusivo a uma faixa inteiramente nova de clientes que antes não 

conseguiam alcançar porque talvez não fosse economicamente viável servi-los (CHONG & 

CARRARO, 2006, p. 9). O novo sistema passa a oferecer aplicações de recursos por um 

preço menor para um número maior de clientes, a fim de alcançar um público que antes 

não se atingia. 

                                                           
3
 Nichos - cultura dominante vs subculturas,  

 Hits - mercado da tendência dominante (PRIMO, 2007, p. 7). 



 33

 

 Para que esse fenômeno da cauda longa ocorra é fundamental a redução dos custos. 

Por isto preconiza-se a presença de três forças que cria esse processo: a democratização das 

ferramentas de produção, a informatização e a popularidade da Internet e dos meios que 

permitem a divulgação do material comunicativo. De acordo com Primo (2007, p. 8), 
No contexto da cauda longa, os testemunhos em sites de recomendação e 

a reputação desses resenhistas online criam um novo modelo 

promocional. Não é um garoto-propanda bem remunerado que insiste 

que tal produto é de qualidade, mas um consumidor comum como todos 

nós, e a custo zero. Vale lembrar que blogueiros e podcasters buscam 

muito mais construir uma reputação junto às suas micro-audiências do 

que sonhar em ser uma celebridade. 

  Esses fatores são baseados principalmente na recomendação de pessoa para pessoa 

possuem um importante papel no mercado de cauda longa porque exercem o papel de 

filtros, ou seja, ocupam a maior parte do nicho que está presente na rede e deixa somente o 

que é mais relevante, cria um atalho para que as outras pessoas possam ver na rede 

(ANDERSON, 2006, 116). Os filtros são meios que as comunidades utilizam para eleger o 

que é relevante no meio de tantas informações distribuídas na rede. Porque a coleta de 

informações não é mais o foco - a questão agora é tomar decisões com base nessas 

informações. As recomendações, fóruns e comunidades agem como filtros e incentivam 

usuários a conhecer novos produtos e conceitos. 

  Por isso o fornecedor vai precisar criar uma estratégia diferente para atingir de 

forma eficaz os clientes menores, porque eles estão habituados a depender de contatos 

pessoais, relacionamentos entre fornecedor e cliente “a maioria dos fornecedores não será 

capaz de abastecer serviços individuais a uma quantidade de clientela muito maior em uma 

condição de preços que essa base irá suportar” (ANDERSON, 2004, p. 20). O autor prevê 

que vender Softwares será como comercializar variedades de opção de toques de celular,  

música, entre outros, e fazer a compra sem a utilização de vendedores presenciais da parte 

do fornecedor. Mas isso não quer dizer que deve ser eliminada a presença de vendedores 

para clientes que necessitam de uma atenção mais pormenorizada (ANDERSON, p. 180). 

 O mercado de cauda longa prospera excepcionalmente bem com produtos virtuais. 

Entretanto, esse conceito é mais difícil de acontecer com produtos físicos, devido ao custo 

para oferecer a mesma variedade e as formas de se buscar esses produtos em uma loja 

física. Segundo Anderson (2004, p. 5), as mudanças de cultura de massa para cultura de 

nichos é percebida com maior ênfase no meio de comunicação. Hoje qualquer pessoa com 



 34

 

acesso à Internet pode escrever e ser lida por qualquer outra pessoa em qualquer parte do 

mundo. 

 O autor ainda discute o impacto da TV a partir do Google vídeo. Anderson (2006, 

p. 191) diz que “ninguém imaginou que o futuro da TV seria assim”. Assim que o Google 

vídeo foi lançado não havia a mesma popularidade que o Youtube tem hoje, mas o autor 

comenta que vários programas de televisão pela Internet já atingem os mesmos níveis de 

audiência da televisão tradicional. Dessa forma a TV também poderá se beneficiar das 

mesmas novidades tecnológicas e encontrar nicho para absorver a grande diversidade de 

produção ou com um conteúdo menos comercial. Por fim, o autor classifica cinco 

empresas fora do segmento de entretenimento que utilizam o mercado de cauda longa. As 

empresas citadas são E-bay, Salesforce, Kitchenaid, Lego e Google.  

O autor aponta dois elementos importantes para o sucesso no mercado de cauda 

longa: tornar o produto disponível e criar mecanismos de busca mais eficiente para que os 

consumidores consigam chegar até esses produtos. O livro ainda fala sobre novas 

tecnologias e como eles interferem nos negócios atuais provocando uma nova dinâmica no 

mercado, onde empresas, principalmente as de Internet consigam faturar com produtos 

marginais tanto ou até mais do que com os seus principais produtos de sucesso.  A próxima 

seção 2.6 será abordado mecanismos de geração de receita. 

 
2.6 MECANISMO DE GERAÇÃO DE RECEITA 

 
No modelo SaaS, a cobrança dos serviços prestados (oferecidos) pode ser feito mensal, 

trimestral, anual, por meio de cobrança de assinatura ou pelo volume de transação na qual 

se cobra por unidade processada. No entanto, esse último tipo tem um risco maior, porque 

se houver um número pequeno de transações, pode ser que o fornecedor do serviço não 

alcance a verba necessária para manter a empresa. Por outro lado, se houver um volume 

muito grande, os descontos podem ser maiores e o lucro será compartilhado com os 

clientes. Por último, existe o modelo gratuito, no qual a empresa que fornece o serviço não 

o vende para quem usa o serviço diretamente, e sim para as empresas que o patrocinam, na 

forma de publicidade. O que interessa atingir, como meio publicitário, são os usuários 

destes serviços.  

 Outra questão que precisa ser verificada é a área de recursos humanos. Quando o 

SaaS é introduzido na empresa produtora, o perfil de uso dos recursos tende a se modificar. 

Com esse modelo, cada vez mais as funções que são executadas manualmente, serão 



 35

 

processadas automaticamente. Há também uma mudança no perfil dos profissionais, com o 

emprego de equipes geralmente pequenas, mais qualificadas e de maior custo (CHONG & 

CARRARO, 2006, p. 9).  

 Todas essas mudanças causam, de certa forma, impacto sobre as vendas, porque o 

valor da venda individual vai ser muito menor e a forma de trabalhar o cliente vai mudar. 

Portanto, as características do profissional de vendas também sofrerão mudanças. Existem 

empresas que preferem abolir a área de vendas, porque o valor individual é tão baixo que o 

funcionário terá que vender muito para ter uma comissão razoável. Por isso, certamente é 

melhor que a venda seja feita de forma direta, ou seja, os clientes compram pela Web. 

Segundo Chong & Carraro (2006, p. 10) “com um serviço de marketing, divulgação e 

posicionamento, com recomendações, indicações, mas não com o vendedor tradicional”, 

torna-se possível oferecer um serviço mais automatizado simplificando o trabalho de 

suporte. 

Segundo (POMERANZ, 2008, p. 7), Stann Rapp e Thomas L. Collins em 1986, 

propuseram uma estratégia de marketing baseada no relacionamento individualizado entre 

a marca e os clientes. Eles defendem que ao invés de focar na diferenciação do produto, os 

fornecedores devem concentrar-se na diferenciação dos clientes. Existem três tipos de 

clientes: o de maior valor, o de valor negativo e o cliente da faixa média. O de maior valor 

é responsável pela parte maior do lucro da empresa por um período significativo, por isso, 

o objetivo é conquistá-los. Os de valor negativo resultam em prejuízo, porque o custo para 

mantê-los supera o valor recebido. Segundo Pomeranz (2008,*pag.8), em vez que focar na 

diferenciação dos produtos, as empresas deveriam se concentrar na diferenciação dos 

clientes. Os profissionais de marketing devem dar mais importância a alocação de recursos 

nos indivíduos que geram maior valor e que têm maior potencial, em vez de aplicar 

uniformemente sobre toda a base de clientes.  

Uma das vantagens de aderir ao modelo de marketing de relacionamento é a de 

garantir a fidelidade dos consumidores. Geralmente as empresas criam laços fortes com os 

clientes, para que os mesmos não migrem para empresas concorrentes. Essa fidelização 

pode ocorrer de duas maneiras: uma é a financeira, que busca a redução dos preços dos 

serviços e a outra inclui componentes de produto, serviço e comunicação de marca. É 

necessário que antes seja verificado se o serviço está de acordo com o que foi prometido. A 

imagem da empresa é um dos quesitos fundamentais, sendo extremamente importante 



 36

 

saber qual é a visão que o cliente tem da empresa, como, por exemplo, se a marca da 

empresa lhe transmite alguma mensagem positiva, etc.  

Os serviços que a empresa oferece devem ser personalizados para os interesses dos 

clientes. Outro fator desejável é manter um canal de comunicação integrado para 

relacionamento com o cliente. Para conquistar clientes leais, também é interessante criar 

programas que oferecem brindes, descontos, acúmulo de pontos, além de atendimento 

diferenciado, tudo no sentido amplo de valorizar o cliente.  

De acordo com Pomeranz (2008, pag. 17) “engana-se quem pensa que o único 

objetivo dos consumidores é pagar menos”. Apesar de que o preço é um fator muito 

importante para a aquisição do serviço, não é o suficiente para garantir os benefícios 

esperados pelo cliente. Ao unir as duas técnicas o financeiro com componentes do produto, 

geralmente, conquistam-se cliente fieis ao serviço oferecido. Esses clientes não podem ser 

esquecidos, devem estar em constante conquista. Conforme Pomeranz (2008, pag. 18),    
A estratégia de alocar maiores investimentos na busca de novos clientes, em 

detrimento dos clientes já existentes, desconsidera os enormes retornos que podem 

ser atingidos com esse último grupo. Mais do que isso, descarta o fato de que 

adquirir um novo cliente pode custar várias vezes mais caro do que manter um 

cliente atual. 
Mas, isso não significa que a empresa não deva mais conquistar novos clientes, 

sendo que o investimento nesta busca é fundamental. No entanto, a forma na busca desses 

novos clientes deve ser revista. Isso porque a maioria aplica grandes investimentos em 

anúncios com o intuito de vender o produto e, geralmente, o volume de clientes esperado 

não é alcançado, e mais recursos são alocados. Esse tipo de estratégia assume apenas que 

existem os clientes interessados e os não interessados. 

 

2.6.1 ESTRATÉGIA DE COBRANÇA DE SERVIÇO 
 
Conforme Pomeranz (2008, pag. 19) “o perfil dos potenciais clientes é bastante 

mais complexo que a simples dualidade aceita”. O programa de relacionamentos com foco 

no produto para estratégias no cliente pode incidir por meio de marketing, vendas, 

atendimento ao cliente ou de uma maneira mais abrangente. De acordo com Pomeranz 

(2009, pag. 20) para desenvolver esse programa é necessário considerar 5 áreas de atuação: 

conhecimento ao cliente, definição da comunicação, estabelecimento das métricas, 

implantação da infraestrutura e mudança organizacional, as quais serão apresentadas a 

seguir:   



 37

 

• Conhecimento do cliente: é essencial analisar qual o público alvo que se pretende 

atender. Os clientes serão todas as empresas, órgãos e profissionais autônomos que 

trabalham com desenvolvimento de sistemas. É importante escolher qual o público a  

alcançar. Como o sistema foi projetado para configurar vários idiomas, o sistema pode 

atender vários países.  

• Definição da comunicação: o fornecedor deve tornar seu produto ou serviços 

conhecidos ao cliente. Para isso, é importante que o fornecedor crie uma marca e 

slogan para diferenciar a empresa entre as demais. É esperado que seja um nome forte 

e que traga uma mensagem positiva para o público alvo e, por isso, deve ser associado 

ao mercado que pretende atender. É, também, importante que o fornecedor tenha em 

mãos cartão de visita, foldere banner para a divulgação do produto com marca e 

slogan. O fornecedor deve despertar no cliente o desejo de adquirir o sistema. Devem 

ser mostradas todas as funcionalidades do sistema aos clientes, gerenciamento de 

sistemas, de inquilinos, de contratos, de interface,etc. Para atingir as principais 

empresas de advocacia por meio de publicidade, sugere-se que sejam feitos formulários 

de cadastros com informações a serem preenchidas,tanto de pessoas físicas como 

jurídicas. Com as informações coletadas, os fornecedores podem desenvolver ações de 

comunicação relevantes para cada cliente. Essas informações podem ser coletadas 

virtualmente. Cada informação possui um significado diferente para a empresa, e os 

fornecedores devem entender quais são os gastos dos clientes, qual o custo para mantê-

los, e qual será o tempo para obtenção de lucro. Esses dados devem ser agrupados 

conforme o grau de importância para o negócio, e deve promover-se um diálogo com 

esse público alvo por meio de comunicação relevante, sendo que cada mensagem deve 

ser personalizada para cada cliente. E os investimentos devem ser proporcionais ao 

valor que cada cliente retorna para a empresa. O autor diz que é um ciclo virtuoso 

suportado pela utilização inteligente das informações da audiência (POMERANZ, 

2008, pag. 24). O marketing de relacionamento focado no cliente aproveita a 

autorização do público alvo, para cobrir sua participação no processo de comunicação e 

sua interação com o serviço. 

Outra estratégia para adquirir clientes é incentivar parcerias entre as empresas de 

desenvolvimento de softwares para utilizarem um tipo de sistema, a fim de diminuir o 

preço da assinatura mensal. É viável também organizar um workshop com outras 



 38

 

empresas parceiras para a divulgação do produto e convidar as empresas e/ou 

profissionais de informática para participar do evento.  

• Estabelecimento das Métricas: os fornecedores devem utilizar indicadores de 

resultados para avaliar o desempenho dos programas de relacionamento. As métricas 

utilizadas geralmente são: variação da satisfação dos clientes, variação na antecipação 

dos problemas, variação na melhoria do relacionamento, número de atendimentos de 

suporte, de contatos com os clientes, de demandas geradas, de produtos vendidos, 

retorno sobre o investimento etc. Quanto mais métricas melhor, para analisar a eficácia 

do programa de relacionamento focado no cliente. 

• Implantação da Infraestrutura: é indispensável que o fornecedor crie um site para 

oferecer o produto, o cliente pode solicitar uma senha e login para testar o sistema. O 

armazenamento das informações vai auxiliar na identificação de comportamentos do 

cliente. Além disso, pode disponibilizar central de atendimento online. Se possível, é 

viável desenvolver um sistema de telemarketing simples e criar uma abordagem para 

apresentação de seu escritório pelo telefone. É importante que os profissionais passem 

por treinamento para conseguir bons resultados. Também pode ser criado o sistema de 

correspondência por correio ou e-mail para enviar para os clientes. Para estruturar a 

área de vendas, é viável que a empresa esteja preparada para a solicitação de uma visita 

do profissional para firmar o contrato entre cliente e fornecedor. Caso o cliente não 

solicite a visita o contrato deverá ser preenchido e enviado pelo correio. E a assinatura 

pode ser feita por meio de cartão de crédito, boleto bancário ou transferências. O valor 

pago mensal da assinatura varia com a quantidade de clientes. Quanto mais cliente, 

mais barato a assinatura. E pelo fato do sistema rodar na Internet comentar sobre a 

disponibilidade de operar o sistema em qualquer local que tenha acesso à Internet. É 

importante o fornecedor definir uma estratégia de marketing após entender as 

necessidades dos clientes para não investir mais do que o necessário. 

 

Serviço Oferecido  
O serviço oferecido é do tipo software horizontal esse tipo de software é de uso geral, a 

distribuição geralmente é feita em “larga escala”. Essas são soluções de negócios grandes 

que servem públicos direcionados para facilitar processos de negócios, neste caso, as 

empresas e profissionais autônomos que desenvolvem softwares ou que queiram modificar 

o modelo de negócio da empresa. O fornecedor de SaaS será responsável pela distribuição 



 39

 

do software, a operação e a manutenção da infra-estrutura de TI. A distribuição será feita 

por meio da Internet, a forma de distribuir esses dados vai depender da preferência de 

quem contrata o serviço, dados separado será cobrado mais caro do cliente por oferecer 

uma segurança maior. Abaixo tabela (1) segue tipo de serviço oferecido pelo fornecedor. 

 
Tabela 1 – Tabela de serviços oferecidos 

Tipo de Cobrança Descrição 

Conexões Cobra-se a quantidade de conexões simultâneas. No contrato 
simultâneas terá um limite de usuários permitidos em conexão simultânea. O 

sistema deverá alterar o valor em quantidade atual de acessos. O 
controle será incrementar ou decrementar o valor em 
"quantidade Atual de Acessos" na tabela inquilino. Será 
limitada uma senha por vez por uso, não será permitida mais de 
uma conexão com a mesma senha. O que exceder será cobrado 
à taxa da assinatura + o excesso de acesso. O cliente recebe uma 
senha administrativa, a qual possibilitará  criar a quantidade de 
usuários que foi estipulado no contrato, se exceder o número de 
acessos, o cliente paga um valor X a mais. 

Uso da CPU Cobra-se o número de horas que o inquilino usar a CPU. 
Quantidade de gigas Cobra-se a quantidade de gigas trafegados no gerenciador. 
Tamanho do banco Cobra-se pela quantidade de dados no banco de dados. 
Fixo mensal de Cobra-se um valor mensal da hospedagem por  número de 
assinatura clientes do inquilino. 
Número de usuários Cobra-se pela quantidade de usuários que vão utilizar a 

aplicação. 
Número de licenças Cobra-se do inquilino por quantidade de licença compradas. 
compradas 

 
 
Forma de 4Precificação  

O tipo de cobrança deverá ser genérico, será criada uma tabela para inserir todas as 

possibilidades de assinatura aos inquilinos. O valor será cobrado de acordo com a forma de 

negociação com o inquilino. Pois, o valor final da assinatura, depende do tipo do sistema 

que será hospedado e da quantidade de clientes do fornecedor da aplicação. Essas regras 

poderão ser modificadas de acordo com a preferência do inquilino. A seção seguinte 2.7 

será apresentado o mercado para SaaS. 

 

                                                           
4
 Precificação - É a atividade de marketing preocupada com a colocação de preços para novos produtos e o 

ajuste de preços para produtos existentes (ARAÚJO, 2009, online). 



 40

 

2.7 MERCADO PARA SAAS 
 
Sobre o mercado de SaaS, o volume de dinheiro que gira é significativo. Pesquisas da IDC 

(2008, on-line) revelam que “nos últimos 5 anos o negócio cresceu 150%”. De acordo com 

Gruman (2008, on-line),  
O software como serviço é possível hoje, porque há cada vez menos código 

customizado nas empresas do que no passado. Há vinte e cinco anos atrás, tudo 

nas grandes empresas era código customizado. Há quinze anos atrás, as 

aplicações de ERP foram empacotadas e reduzia o volume de código customizado, 

o código customizado hoje, está em torno de 60% do software corporativo. O que 

significa que, muitas empresas ainda não podem migrar para o modelo de SaaS. 

 De acordo com algumas estatísticas de uma pesquisa de mercado feita pela AMR 

Research nos Estados Unidos em 2005, as empresas em geral, conforme mostra a figura 5, 

planejam utilizar SaaS de uma forma geral. As empresas menores são em quantidade 

maior, e geralmente elas têm pouco código customizado, porque tiveram menos capital 

para investir no desenvolvimento desse código.   

 

 
 

Figura 5 –  SaaS vs porte das empresas (MELO, 2007b, p. 30)  
 
 
 A imagem abaixo (figura 6) apresenta o que já foi realizado no universo de grandes 

empresas em relação ao SaaS. De acordo com a figura 6, apenas 26% disseram que não 

planejam usar; 35% estão ainda na fase de avaliação e aprendizado e 39% estão já de 

alguma forma envolvidas, seja porque já tenham um software implementado, ou porque 

estão na fase de implementação.     

 



 41

 

 
 
Figura 6 – Percentual de aceitação do Software as a Service (MELO et. al., 2007b, p. 30) 

 
 
No caso do Brasil, esse crescimento pode significar uma grande mudança no 

mundo do software, novas oportunidades, apesar de que o país ainda tem poucas empresas de 

desenvolvimento de software, e comercializa mais produtos de softwares (customização do 

código fonte). O software como serviço reduz as barreiras, porque não existe dificuldade 

em colocar em outros locais o software produzido aqui no país. Se a globalização era 

possível antes para grandes empresas, agora passa a ser possível para médias e pequenas, 

ou seja, um mundo globalizado. Acredita-se que é uma grande oportunidade para pequenas 

e grandes empresas em qualquer lugar do mundo. A figura 7 apresenta a previsão de 

crescimento do SaaS de algumas empresas pesquisadas pela IDC. Com tal resultado, 

observa-se que até 2011 o crescimento de SaaS seja de 25% e até 2013, desenha-se um 

cenário de crescimento de 30 bilhões de dólares.  

 
 



 42

 

 

 

  
 

Figura 7 – Crescimento Previsto para SaaS (IDC, 2007, p.9) 
 
 
 A seção 2.8 aborda comparativamente os aspectos de  SaaS. 
 
 
2.8 COMPARATIVO DE APLICAÇÕES TRADICIONAIS E SAAS 
 
A ideia de se usar a Internet como meio de distribuição de software modifica o ciclo de 

desenvolvimento de software. Melo et al. (2007b, p. 20) apresenta um comparativo entre o 

processo de desenvolvimento da aplicação de software tradicional e o de SaaS, o qual pode 

ser visualizado através da figura 8. 

 

 

 
 

Figura 8 - Modelo de aplicação de software tradicional e SaaS “modificado” (MELO et al., 
2007b, p. 22) 

 
 Na parte superior à esquerda (cor verde) é apresentado o modelo tradicional de 

desenvolvimento e distribuição de software. Pode-se notar que primeiramente o software é 



 43

 

codificado pelos programadores, depois passa por uma fase de testes para identificar os 

erros, e quando tiver alcançado razoável desenvolvimento, gera-se um release e, a partir 

desse momento, é feita a distribuição do software. A palavra “instalação”, na figura, é a 

chave do processo que começa fora da equipe de desenvolvimento. O software é inserido 

em outra dimensão, como mostra a figura 8 (lado laranja). Neste ponto, o ambiente que 

receberá o software é preparado para a instalação, sendo que, em muitas situações, 

necessitará ser customizado, porque praticamente todo software tende a sofrer mudanças 

com o passar do tempo. Por último, o usuário poderá começar a operar o software, no qual 

o cliente possivelmente vai solicitar melhorias, aperfeiçoamentos que remetem ao início do 

processo de desenvolvimento. Neste modelo, que é tradicional, se gasta muito tempo para 

obter um novo release a partir das modificações solicitadas, diferentemente de SaaS, onde 

ao receber um novo cliente, o fornecedor traça seu perfil e já inicia a composição do 

cenário de desenvolvimento do software a fim de prever futuras necessidades. 

 Já na parte inferior (cor azul) é apresentado o modelo de SaaS. Percebe-se que as 

duas primeiras fases são as mesmas em relação ao desenvolvimento tradicional, porque  

tem-se que desenvolver a aplicação e testá-la. A diferença está onde a aplicação será 

operada. Note-se que o próximo passo é a última fase do modelo tradicional, porque o 

software é operado na máquina em um ambiente controlado pelo desenvolvedor. O usuário 

acessa normalmente a Internet utilizando o software que foi disponibilizado pelo servidor, 

reduzindo os passos deste ciclo pela metade. Na medida em que houver demandas por 

melhorias e a equipe de desenvolvimento atualizar o sistema, automaticamente toda a base 

de clientes fará uso da versão mais recente do software. Com isso, resolve-se o problema 

de distribuição.  

 Na tabela 2 é apresentado um comparativo inicial do ponto de vista tanto de quem 

compra como de quem vende, substituindo o modelo de software tradicional cliente-

servidor para SaaS.  Hoje, a maioria dos fornecedores de SaaS permitem que o cliente 

experimente o software antes de contratar o serviço. Os consumidores de SaaS são 

beneficiados pela versatilidade do sistema, podendo avaliar o software e sua aplicabilidade 

antes do contrato.  

 

 

 

 



 44

 

Tabela 2– SaaS versus Aplicações Tradicionais “modificado” (CARRARO, 2007, p.7 ) 
 

Tipo Aquisição Implementação Gerenciamento 
Cliente    
Tradicional Avaliações longas Customização Equipe interna de TI 
   

Cliente    
SaaS Use antes de contratar Configuração SLAs (contrato entre 

fornecedor e cliente) 

Fornecedor Experimente antes de Configuração (sem Monitoramento/ 
contratar código extra) cumprimento do SLA 

  
 No modelo de desenvolvimento de software tradicional, a fase de aquisição ocupa 

um tempo maior da empresa na escolha de um software, porque além de esperar os 

módulos a serem implementados, há também o custo com testes, que é, praticamente, o 

mesmo que uma instalação completa. De acordo com Leal (2009, p. 2) “as verbas 

destinadas ao projeto são finitas, mas a possibilidade de cobertura dos testes não tem fim, 

ou seja, deve ser definido até que ponto a cobertura de testes ainda é viável ao projeto”. No 

modo tradicional, depois da avaliação do software, geralmente o cliente solicita uma 

customização da aplicação, isto é, adaptações específicas para o ambiente do cliente, 

alguma funcionalidade ou forma de operação da empresa que não coincida com a 

implementação original do software. Este é um problema que se constata com a maioria 

das empresas nacionais de software, as quais afirmam ter produtos, mas quando a 

customização é feita na mesma linguagem de programação em que foi desenvolvido o 

software originalmente, gera muita mão de obra em trabalho de customização.  

 Quando se fala de software como serviço, o trabalho de customização se dá em 

momento anterior àquele da real necessidade do cliente, portanto passa a ser configurável, 

porque a execução do software se dá na máquina da empresa que fornece a aplicação. Se 

for feito uma customização no código fonte, certamente esta alteração vai repercutir para 

todos os usuários de todas as redes. O desenvolvedor tem que ter a capacidade de prever, 

dentro do conjunto de clientes que se queira atender, quais são as “customizações” que 

poderão ocorrer e ter a previsão dentro do software já feito para que, conforme os usuários 

solicitem, a ação se resuma a uma configuração. Essas “personalizações” podem ser desde 

algo simples, como uma opção de menu que marca ou desmarca, ou funcionalidades mais 

complexas. Isso exige um bom nível de qualificação dos profissionais de desenvolvimento 

que vão implementar o software, o que pode ser um problema para as empresas produtoras. 



 45

 

Se na empresa não houver profissionais com este perfil, é necessário investir em 

qualificação profissional para melhorar a qualidade dos softwares produzidos.  

 Existe uma parte do processo de SaaS que se chama “gerenciamento”, no qual se 

faz o acompanhamento da aplicação que está sendo utilizada pelos usuários. No modelo 

tradicional, geralmente quem faz o trabalho de acompanhamento é a equipe interna da 

empresa que vai ter que melhorar a aplicação, se necessário. Por isso, muitas empresas 

ficam tentadas a adotar soluções do tipo SaaS, pois ao fazê-lo, não há necessidade de 

manter esse quadro de profissionais nas mesmas proporções. Por outro lado, percebe-se 

que as empresas fornecedoras vão precisar de profissionais das diversas áreas de TI como 

mão-de-obra altamente qualificada. Abaixo apresenta-se a tabela 3, que mostra as 

diferenças entre o modelo de SaaS e o modelo cliente-servidor.  
 

Tabela 3 - Comparação de características de software tradicional e SaaS (MELO, 2007a, p. 5). 
 

Pacotes de software tradicional Software como Serviço 
Projetado para os clientes instalarem, gerenciarem e Projetado para ser distribuído como serviço pela 
manterem. Internet. 
A solução é arquitetada para ser executada por uma Projetado para executar em milhares de clientes 
companhia individual em uma infraestrutura diferentes em um único código. 
dedicada. 
Pouco frequente, atualizações principais a Frequente atualizações "digeríveis" a cada 
cada 18-24 meses, vendido individualmente para 3-6 meses para minimizar o impacto no cliente e 
cada base de cliente instalada. melhorar a satisfação. 
Controle de Versão Taxa de Upgrade. Ao corrigir um problema para um cliente, é 

corrigido para todos. 

Funcionalidade repetível via WebServices, APIs5 Pode usar APIs abertas e WebServices para facilitar 
abertas e conectores padrões6. a integração, mas cada cliente tipicamente tem que 
 par pelo trabalho de integração. 
 
De acordo com Paul (2007, on-line), ao optarem pelo SaaS as empresas devem se 

preocupar com eventuais problemas que “na maioria das vezes são ignorados pelo modelo 

SaaS, antes de firmar qualquer acordo”. O autor descreve algumas precauções que a 

empresa deve tomar antes de assinar o contrato, tais como: 

• primeiro, é viável discutir com os gestores quais são as metas finais da empresa. É 

importante também, antes de se escolher o provedor para a hospedagem e o software, 

envolver a seção de TI. O autor diz que, a “equipe de tecnologia de informação deve 

participar ativamente do processo de decisão para compreender melhor as perspectivas 
                                                           
5 API aberta significa que há um suporte ao desenvolvimento de aplicações integradas ao software, ou seja, 
um pacote de código em alguma linguagem é disponibilizado para tal (MELO, 2007a, p. 5 ). 
 

 



 46

 

de futuro da empresa” (PAUL, 2007, on-line). Depois do processo de decisão, cabe ao 

gestor da empresa decidir se deve ou não manter toda a equipe de TI na empresa. Além 

disso, é viável pesquisar se o fornecedor tem problemas do tipo gargalo, lentidão de 

resposta, quebra de contrato, entre outros. Essas medidas são necessárias para evitar 

problemas futuros.  

• segundo, identificar quais serviços de segurança são necessários para a empresa. Deve 

ser informada ao fornecedor a lista de serviços que a empresa necessita para proteger 

sua organização, como serviços de criptografia, autenticação, confidencialidade, 

recuperação, entre outros.  

• terceiro, o responsável pela seção de TI e o provedor de serviços devem procurar 

manter um bom relacionamento entre si. O gerente de TI deve solicitar documentos da 

oferta do serviço e comprometimento, bem como procurar estar sempre em 

comunicação para sanar qualquer dúvida. De acordo com Paul (2007, on-line), é 

importante também que as duas partes promovam um ambiente de colaboração, ou 

seja, que a empresa fornecedora seja uma expansão do departamento do cliente. 

• quarto, os responsáveis da seção de TI devem descobrir qual a condição de obter de 

volta o software que foi hospedado (PAUL, 2007, on-line). Para sua segurança, o 

cliente tem de ter suficiente confiança em que os dados de sua empresa não serão 

manipulados por outrem nem que sejam perdidos. Pode ainda resolver mudar de 

ambiente de fornecedor, o que exige pronta disponibilidade para resgate de seus dados. 

Além disso, pode ser necessário integrar alguns aplicativos que estão na máquina do 

cliente, e se faz necessário remeter o aplicativo de volta para a empresa contratante.  

Além desses fatores, conforme Paul (2007, on-line), na aquisição do SaaS, a 

empresa vai precisar de um fornecedor confiável, incluindo “contratos de serviço e práticas 

de segurança”, pois os clientes normalmente exigem o que se chama de Service Level 

Agreements (SLA). Na seção 2.9, serão explicados os procedimentos em SLA. 

 

2.9 SLA – SERVICE LEVEL AGREEMENTS 
 
O aumento da terceirização na área da TI vem provocando uma nova alteração no 

relacionamento entre os compradores de softwares e fornecedores de serviços por meio da 

aplicação entre contratos e acordos Service Level Agreement (SLA). Com esse acordo, os 

clientes passam a ter garantias de serviço de qualidade, prazo e estrutura oferecidos por 

seus fornecedores.  



 47

 

 De acordo com Ferreira & Quadros (2008, p. 13), quase 59% das empresas no 

Brasil aderiram ao conceito de SLA para a garantia do nível de serviços em TI. Nos 

Estados Unidos, pesquisa realizada pela PricewaterhouseCoopers (empresa que presta 

serviços de auditoria e consultoria) revelou que 85% das empresas utilizam aplicativos 

para gestão informatizada de  SLA, sendo que, destas, 76% são empresas da área de 

telecomunicações.  

 Uma SLA é um acordo entre o fornecedor de serviços e um cliente sobre nível de 

serviços, onde o fornecedor se compromete a ressarcir o cliente pelo tempo em que a 

aplicação não estiver disponível. De acordo com Ligocki (2008, p. 37) o objetivo do SLA 

“é indicar detalhadamente a qualidade mínima dos serviços a serem prestados, 

especificando penalidades que devem ser aplicadas no caso de não se atingir os níveis de 

qualidade acordados”. Esse acordo proporciona várias vantagens tanto para o cliente como 

para o fornecedor. Do lado do cliente, contribui para a escolha dos custos e diferentes 

empresas de tecnologia, garantia nos serviços de segurança, redução do ciclo de 

desenvolvimento, entre outros. Do lado do fornecedor, o SLA permite o monitoramento do 

serviço aos clientes, produz confiabilidade do fornecedor ao cliente, conquista clientes e 

consequentemente gera lucros maiores. Ligocki (2008, p. 38), comenta que um SLA deve 

possuir diversas informações, tais como:  

• serviços a serem disponibilizados; 

• suporte a ser fornecido; 

• desempenho esperado; 

• disponibilidade; 

• antecedência de aviso em caso de manutenção; 

• relatórios a serem fornecidos com as informações do funcionamento do serviço de 

acordo com as métricas definidas; 

• gerenciamento e recuperação do serviço em caso de falhas; 

• decisão em caso de assuntos não previstos no contrato; 

• penalidades previstas e quaisquer outras informações que se fizerem necessárias. 

 
 Há dois tipos de serviços de fundamental importância para a implantação de um 

SLA. De acordo com Ligocki (2008, p. 39), esses serviços são referentes “à própria criação 

do contrato e um aplicativo de auxílio para geração do SLA”. O contrato deve ser o mais 

detalhado possível, com o intuito de atender e favorecer tanto o cliente quanto o 



 48

 

fornecedor. O documento SLA (tabela 4) deve ser simples e objetivo, se houver algum tipo 

de cobrança diferente deve ser cadastrado no sistema utilizando a funcionalidade inserir 

regras na tabela contrato. Basicamente um contrato deve ter a descrição do serviço, o 

acordo do nível de serviço, a descrição de todos os itens, a disponibilidade do sistema no 

ar, a disponibilidade dos dados caso o cliente queira trocar de fornecedor, enfim, uma série 

de itens para deixar claro para ambas as partes (fornecedor) e (cliente). 
 

Tabela 4 – Modelo de documento SLA 

 
 

 

Serviço: (Descrição do Serviço, ex: Fornecimento de sistema de advocacia pela 
Web). 

Acordo de Nível de Serviço entre (Empresa X) e (Cliente X), referente ao 

serviço descrito acima fornecido através do (contrato nº XXX) de (data 

XX/XX/XXXX), nas seguintes condições:  

(descrever os índices de forma sucinta) 

 

 

Este acordo firmado entre as partes tem validade a partir de sua 

assinatura, enquanto o contrato de prestação de serviço for vigente entre 

as partes, e representa o acordo comum entre elas para reger o nível de 

eficiência dos serviços oferecidos. 

A mínima alteração em eficiência, uso ou qualquer outra informação, 

somente terá validade após a alteração, e assinatura, deste acordo entre 

as partes e de comum acordo. 

As partes abaixo assinadas aceitam os termos aqui descritos e oferecidos, 

como regra de fornecimento, aceitando estes indicadores como validadores 

para penalidades e multas em caso de falhas no fornecimento. 

Assinam: 

Fornecedor: ____________________________________ 

Cliente:________________________________________ 

Data: XX/XX/XXXX 

Exclusões e Limites de uso: 

 

 



 49

 

 Para exemplificar apresenta uma formula de SLA utilizada para cobrança de 

serviços da empresa Braslink Network (www.http://braslink.com/sla.cfm), que se 

compromete com 99,9% de disponibilidade mensal de acordo com a fórmula ID = {[(DR + 

IJ ) / DP ] x 100}, onde: ID = índice de disponibilidade, DR = disponibilidade real no mês, 

IJ = indisponibilidade justificada no mês (que decorre de períodos de manutenção, paradas 

acordadas, motivos de força maior, entre outros) e DP = disponibilidade prevista = 24x 

(número de dias do mês).  

 A tabela 5 apresenta o valor a ser indenizado por indisponibilidade do fornecimento 

do software ao cliente. Geralmente este valor é estabelecido de acordo com uma tabela de 

descontos e aplicado sobre o valor mensal contratado, concedido uma única vez, no mês 

subsequente ao da confirmação da ocorrência. 

 
Tabela 5 – Indenização por indisponibilidade de infra-estrutura da empresa BRASLINK, através da URL 
http://braslink.com/sla.cfm 
 

Diferenças % Descontos % 
0 < DC = < 2.0 2.0 
2.0 < DC = <4.0 6.0 
4.0 < DC = < 6.0 10.0 

6.0 < DC = < 10.0 16 
Dobro do DC 

DC > 10.0 
(limitado a 100% da mensalidade) 

 

 Ao final, o valor do desconto é calculado de acordo com a fórmula DC = SLA – ID, 

onde: DC = Desconto Calculado, SLA = Percentual Compromissado e ID – Índice de 

Disponibilidade. O principal objetivo do SLA é garantir que o serviço fornecido seja de 

qualidade e, caso o SLA não seja cumprido, o cliente possa aplicar multa à empresa que 

vende o serviço. Por isso, o fornecedor deve estar preparado para cumprir as metas porque 

deve cumprir o contrato acordado, tendo que estar estruturado para manter o acordo, e não 

simplesmente assinar o contrato. Em termos de custos, especificam-se os fatores 

requeridos para atender aos objetivos do negócio do cliente, pois, se tiver cliente que aceita 

99% de tempo online e outro que exige 99,999%, esses últimos três noves após a virgula, 

em termos de custos reais de operação do sistema, significa várias ordens de grandezas. 

Então, ao projetar o modelo de negócios da empresa tem-se que levar isso em conta. Ou 

seja, conforme o grau de disponibilidade que é garantido pela empresa fornecedora, varia o 

valor que o cliente paga. 



 50

 

 Além da criação do contrato, é viável utilizar ferramentas para auxiliar no processo 

de gerenciamento do SLA. De acordo com Ligocki (2008, p. 39) “o acordo definido em um 

SLA precisa ser monitorado de algum modo para garantir que o que foi prometido esteja 

sendo cumprido”. Conforme Ligocki (2008, p. 40), no mercado de software as ferramentas 

para esse fim ainda não estão totalmente contempladas, e na “maioria das vezes é 

necessária a intervenção humana para obter o resultado dos relatórios da prestação de 

serviços”. Mas, mesmo com a escassez de ferramentas de qualidade o autor afirma que 

essas ferramentas facilitam muito no gerenciamento do SLA e que a tendência é que 

apareçam novos softwares para gerenciamento de contrato. A figura 9 mostra um modelo 

de ferramenta para o monitoramento do nível de performance de serviços da empresa 

Agilente Tecnologia. O sistema é útil para acompanhar a performance do SLA como uma 

medição e executa ações pró-ativas antes que um SLA seja violado. Ou seja, o aplicativo 

permite fazer comparações para ver se o SLA que foi prometido poderá falhar antes do 

período de conformidade, e mostra a situação presente da performance bem como onde 

deveria estar para garantir o SLA prometido. 

 
 

 
 

Figura 9 – Exemplo de monitoração pró-ativa do SLA (FIREHUNTER, 2008, p. 17) 
 

 Com o fornecimento do SLA ao cliente, para o vendedor, esse serviço passa a ser 

um trabalho novo, diferentemente do desenvolvedor da aplicação cliente-servidor, porque 

o gerenciamento da aplicação em operação é problema do cliente, da empresa que comprou 

a licença do software. Já no SaaS, o problema passa a ser da empresa fornecedora. É claro 



 51

 

que existe a opção de terceirizar esta parte, subcontratando um data center ou um 

profissional especializado. Mas para o cliente, se o contrato não for cumprido, as multas 

passam a ser problema do desenvolvedor subcontratado. A seção 2.10 comenta as 

vantagens e benefícios que SaaS traz. 

 

2.10 VANTAGENS E BENEFÍCIOS 
 
De acordo com Chong & Carraro (2006, p.9), existem várias vantagens ao se adotar o 

SaaS. Dentre elas destaca-se o fato de o valor do software ser, geralmente, mais baixo do 

que o tradicional (desktop), ou software de prateleira. De acordo com Amorin (2008, p. 

21), 
Na era da Web 2.0 usuários pensam em termos de serviço de aplicativos, 

não em termos de software de prateleira. Esses aplicativos, diferentes dos 

softwares de prateleira, ficam instalados num servidor e os usuários 

podem utilizá-los a partir de browsers. Os usuários esperam que os 

serviços estejam disponíveis e sejam melhorados com o tempo. Nada de 

versões, instalações ou upgrades para o usuário se preocupar. Estes 

aplicativos são rotulados pelos seus próprios fornecedores como beta. 

Essa tendência é chamada por Tim O'Reilly [O’REILLY 2005] de beta 

perpétuo. Isso quer dizer que, a todo o momento o software está 

evoluindo, novas funcionalidades são inseridas e novos bugs são 

corrigidos. Tudo ocorrendo de maneira totalmente transparente para o 

usuário. 

 Obter um software seguro com todas as características necessárias e que garanta a 

estabilidade de operação, possivelmente é muito mais caro do que utilizar os serviços de 

um software compartilhado com outras empresas que tenham o mesmo interesse. Isto 

porque, ao invés de uma empresa arcar com custos elevados ela passa a dividir 

sistematicamente esses custos com outras empresas que atuam no mesmo ramo e que 

tenham as mesmas necessidades. Ou seja, do ponto de vista macroeconômico, esse 

argumento leva à conclusão de economia de escala. Esse processo é nomeado por Chong, 

Carraro & Wolter (2006, p. 4) como sendo “multi-tenant ou mult-inquilino”, no qual aluga-

se o mesmo software para vários clientes ao mesmo tempo e as despesas passam a ser 

rateadas. Este é um forte argumento de venda, uma das razões pelas quais o modelo de 

SaaS vem crescendo em demanda no mercado.  

 Além de dinheiro, os clientes vão economizar tempo, porque a implementação de 

uma solução de porte médio se desenvolve normalmente em 6 (seis) meses, sendo que 



 52

 

algumas podem demorar décadas. A vantagem se dá não somente por causa do prazo 

menor para a implementação, mas também porque este modelo de distribuição, de acordo 

com Chong & Carraro (2006, p.11), “em vez de customizar o software, o cliente vai 

utilizar metadados para configurar o aplicativo”, ou seja, basta fazer a configuração que já 

foi prevista antes pelo desenvolvedor. 

 No quesito segurança, de acordo com Chong, Carraro & Wolter (2006, p.13), os 

sistemas desenvolvidos como SaaS devem ser projetados para altos níveis de segurança a 

fim de garantir uma série de fatores como: segurança dos dados, confiabilidade de acesso, 

entre outros, e garantir a funcionalidade do sistema que terá de, muitas vezes, manipular 

100 (cem) vezes mais dados e continuar sustentando um tempo viável de resposta. Este 

processo envolve mão de obra, novas tecnologias, custo de manutenção, entre outros. Os 

custos que incidem sobre o software são altos, então, ao usar o SaaS, o cliente não vai mais 

se preocupar com os fatores de manutenção, pois o fornecedor de SaaS vai tratar desses 

serviços para o cliente. 

 Na questão atualização tecnológica, no modelo tradicional, o tempo de 

implementação normalmente garante que, quando o projeto, por mais rápido que seja, 

atingir seu final, poderá estar obsoleto tecnologicamente, porque um dos componentes 

utilizados já terá sido modificado por outras soluções tecnológicas. Diferentemente, no 

modelo SaaS, o cliente fará uso com frequência da versão mais recente do software. De 

acordo com Pecego (2007, on-line), “o arquiteto tem a função de desenvolver com 

antecedência uma arquitetura que diminua o impacto das futuras customizações.”  

  Outro aspecto é que às vezes, por uma questão de custo, opta-se por tecnologia 

menos evoluída, e no modelo de SaaS são utilizadas as inovações tecnológicas de um 

modo muito mais rápido, com custos menores já que diluídos pela totalidade de cliente. 

Por causa da concorrência e da economia de escala, acredita-se que as empresas vão querer 

oferecer softwares com mais qualidade e preços acessíveis ao cliente. Assim, uma empresa 

pequena poderá fazer uso das mesmas tecnologias das empresas grandes, usufruindo 

ambos os aspectos: atualização e disponibilidade.  

 Outro fator é o suporte técnico. Se existem várias empresas utilizando o mesmo 

software, essas empresas não ficam na dependência apenas dos profissionais de suporte 

que trabalham na empresa desenvolvedora, porque os usuários, os clientes do software, são 

incentivados, inclusive pelos fornecedores, a formarem fórum e grupos de discussão, 

porque na medida em que as comunidades criam fóruns, listas, entre outros, diminui a 



 53

 

demanda de suporte pela equipe de profissionais do próprio fabricante do software, o que 

serve como elementos para orientação de desenvolvimento de cenários futuros. Quanto 

mais os usuários se apoiarem mutuamente, menor o custo de suporte técnico dentro do 

ambiente do fornecedor. Além disso, pelo fato de o código ser compartilhado, a atualização 

será feita apenas em um código e vai repercutir em centenas ou milhares de cópias 

espalhadas em diversos locais. Imagine-se se cada um dos clientes tivesse de fazer a 

customização em separado. O custo se multiplicaria pelo número de cliente. E isso é bom 

para todos porque tem-se um conjunto de pessoas habilitadas a lidar com determinado tipo 

de tecnologias, o que traz vantagens para as empresas. Na metodologia designada pela 

famosa expressão “o pai do sistema”, onde as aplicações são customizadas, muitas vezes o 

grau de customização é tão grande que chega-se a um momento na empresa em que apenas 

uma pessoa de fato entende do código. Se essa pessoa vir a faltar, a empresa certamente 

terá dificuldades para fazer a atualização do software. No universo do modelo de SaaS é 

mais difícil a entronização de tais personalidades. 

  Ainda, em termos de suporte, obviamente o gerenciamento da aplicação sendo 

feito em um lugar centralizado é muito melhor, porque é mais fácil administrar um 

conjunto de recursos, todos num mesmo ambiente, seja na casa do desenvolvedor, seja no 

Data Center, do que espalhados em vários locais. Neste modelo é altamente possível que a 

qualidade do suporte seja bem melhor.  

 Finalmente, o último argumento: não existe o risco de o modelo de SaaS ter um 

software pirata na empresa, porque é uma das preocupações dos CIOS e dos fornecedores 

evitar que os usuários instalem cópias ilegítimas. Primeiramente, o software não é 

instalado. Em segundo lugar, existe um sistema de segurança, administrado pelo 

desenvolvedor do software, que se encarrega de distribuir as senhas e garantir a qualidade 

da segurança. De fato, a administração de sistema de quem pode ou não acessar as 

funcionalidades é agora de responsabilidade do desenvolvedor. A seção 2.11 aborda as 

desvantagens, os problemas da utilização do SaaS. 

 

2.11 DESVANTAGENS E DIFICULDADES DE UTILIZAÇÃO 
 
A segurança é um item fundamental que deve ser bem trabalhado em qualquer software 

comercial. Porém, em uma aplicação desenvolvida no modelo SaaS, existem alguns 

problemas que não se encontram no modelo tradicional. Por exemplo, uma das 

dificuldades para a maioria das soluções que estão disponíveis no mercado é a questão da 



 54

 

segurança dos dados. Quando o CIO opta por transferir os dados que estavam na máquina 

interna da empresa para o computador do fornecedor, certamente o fornecedor terá que 

garantir algumas certezas. Uma delas está relacionada à garantia de não perder os dados. 

Por isso, é muito importante fazer backups da aplicação, pois se o disco rígido onde está 

hospedada a aplicação sofrer danos, o fornecedor não terá muito tempo para colocar a 

aplicação no ar novamente, e se não garantir o SLA, certamente a empresa será multada.  

 Outro problema está relacionado à Internet, pois como os dados trafegam pela 

mesma, como garantir que um concorrente ou um hacker não obtenha esses dados? A 

solução apresentada é a utilização de criptografia em alto nível para promover a 

transmissão segura dos dados.  

 Além disso, pelo fato de ser um ambiente compartilhado, um conjunto de 

problemas de segurança que não existia no ambiente tradicional, passa a existir.  A palavra 

“outsourcing” (provimento externo) é a chave de novos requisitos para a segurança do 

sistema. O cliente provavelmente vai exigir que o fornecedor comprove o isolamento dos 

seus dados, e que ninguém, a não ser os funcionários da empresa, tenha acesso a esses 

dados. A qualidade do serviço de segurança tem que ser eficiente.  

 Quando se projeta um software para ser comercializado no modelo SaaS, deve-se 

ampliar a concepção de segurança para garantir a confidencialidade das informações. Isto 

porque o software é o mesmo para todos os clientes, mas os dados de cada cliente são 

únicos e particulares. Por causa disto, os dados que irão trafegar pela Internet não podem 

utilizar criptografia com base em chaves pequenas, pois será fácil quebrar esse protocolo 

de criptografia. Cada caractere possui aproximadamente 2,5 bits de segurança, essas 

chaves pequenas podem ser facilmente quebradas. Por outro lado, existe a possibilidade de 

utilizar as chaves grandes. O sistema RSA7, por exemplo, utiliza dois números primos para 

criptografar chaves de grandes dimensões ex: 100 dígitos. Para um nível maior de 

segurança é sugerido que o tamanho da chave seja de 3072 bits semelhante a da cifra 

simétrica de 128 bits (MIGLIORINI, 2003, p.3).   

 O custo se torna aparentemente maior. Contudo, na medida em que a aplicação está 

sendo usada por muitas pessoas, o investimento nestas questões se viabiliza pela diluição 

entre todos os usuários dos serviços. Isso não acontece quando a aplicação pertence a um 

único cliente, porque a maioria das vezes o custo não compensa o benefício.  

                                                           

7 RSA (Ron Rivest, Adi Shamir e Len Adleman) – Algoritmo de criptografia de dados para 
chaves assimétricas. 



 55

 

 Outra questão importante é a da confiabilidade, já que os clientes colocam em mãos 

do fornecedor todo o seu desenvolvimento alcançado em TI, sem saber se a qualidade dos 

serviços de segurança são compatíveis. Segundo Carraro & Chong (2006, on-line), existe 

uma norma de auditoria internacional denominada SAS 70, que permite às empresas 

fornecedoras de serviços elaborar um relatório confiável de suas práticas de controle 

interno. Essas auditorias são realizadas por auditores independentes terceirizados e 

resultam no relatório SAS 70, que é entregue ao prestador de serviços. O relatório possui 

dois tipos de documentos:  

• Tipo I*-*Relatório sobre os controles de operação: apresenta os controles e 

processos colocados em operação pelo provedor de serviços em uma determinada data. 

• Tipo II*-*Relatório sobre os controles em operação e testes de efetividade: aprova 

os objetivos do Tipo I e, adicionalmente, contempla o detalhamento dos testes de 

efetividade dos controles. Ou seja, executa os testes de controles que determinam se 

estavam em operação com eficiência suficiente para garantir que os objetivos foram 

atingidos durante um período especifico.  

A norma não é obrigatória, mas algumas organizações exigem que os fornecedores 

apresentem o relatório SAS 70. Então, é ideal que o fornecedor SaaS tenha em mãos esse 

documento de auditoria, para apresentar aos clientes suas práticas de controle interno da 

organização. Para isso, a única forma de convencer os clientes de que o software produzido 

atende as normas, é contratar uma empresa de auditoria a fim de auditar o sistema, porque 

a empresa não pode auditar a si mesma. E não basta fazer a auditoria, tem-se que provar 

que o sistema é de qualidade, sendo que a responsabilidade da garantia da qualidade do 

software é da empresa auditora. A função do auditor consiste em avaliar os controles de 

uma empresa que presta serviços. Ele avalia se os controles desenvolvidos alcançam seus 

objetivos específicos.   

 Começam a aparecer no mercado empresas especializadas em garantir o 

“compliance8” e fazer auditoria de empresas de software que comercializam SaaS. E cada 

vez mais os clientes passam a exigir que todos esses recursos façam parte dos contratos. 

Exemplos de empresas que oferecem a certificação de SAS 70 são KPMG International, 

<http://www.kpmg.com.br/>;*Deloitte,*<http://www.deloitte.com>;*PricewaterhouseCoo

pers, < http://www.pwc.com/> e Ernst & Young , <www.ey.com/>. 

                                                           
8
 Compliance é o dever de cumprir, de estar em conformidade e fazer cumprir regulamentos internos e 

externos impostos às atividades da Instituição” (FEBRABAN, p. 8, 2004 ). 



 56

 

 Outra preocupação que o cliente tem é com a questão dos dados, não apenas no 

aspecto segurança, mas na migração dos dados. Suponha-se que o cliente optou em trocar 

de fornecedor, porque surgiu uma empresa que tem a solução, com funcionalidades, preços 

ou quaisquer outros argumentos, melhores que o fornecedor atual. O cliente certamente irá 

exigir uma funcionalidade tal que, a qualquer momento, permita a exportação dos dados 

para um formato externo, a fim de garantir a possibilidade de migrar esses dados para outra 

aplicação.     

 Esse problema também pode ser visto em uma escala diferente. Por exemplo, é 

possível criar softwares como serviço que em um determinado momento se comunique 

com outras aplicações e, certamente, o software que permitir maior sincronicidade para as 

aplicações do cliente terá vantagens em relação às empresas concorrentes. É uma 

complexidade adicional, e uma das formas de integração mais complicadas refere-se a 

utilizar uma solução de Software como Serviço, integrada a uma solução do modelo 

tradicional que já esteja implantada na empresa. Geralmente os desenvolvedores utilizam 

WebServices para resolver esse tipo de problema. 

 Outra questão refere-se à escalabilidade, isto é, a capacidade de manter a 

performance da segurança e todos os outros elementos que colocamos como requisitos da 

aplicação, na medida em que o volume de dados evolui e que o número de usuários 

aumenta. Por isso, antes de lançar-se no mercado, é bom se preparar para esse tipo de 

problemas, porque no modelo de SaaS, é muito maior a tendência de esses problemas 

acontecerem em menos tempo. Dependendo do software, pode passar de 5.000 (cinco mil) 

para 50.000 (cinquenta mil) usuários em relativamente pouco tempo. Na próxima seção 

2.13, apresenta exemplos de software como um serviço do tipo vertical e horizontal. 

 
2.12 EXEMPLOS DE SAAS VERTICAL E HORIZONTAL 
 
SaaS pode ser classificado em duas categorias serviços de linha de negócios e serviços 

orientados a cliente. Os serviços de linha de negócios, também chamados de software 

vertical, são distribuídos à diversas empresas e organizações de todo tipo. Os softwares 

verticais são aplicações que contém conhecimentos de uma ou mais especialidades. A 

venda é feita sob a forma de encomendas e geralmente são comercializados a setores 

específicos de algum ramo. São aplicativos de interesses grandes e personalizáveis com o 

intuito de facilitar processos de negócios. Já o software horizontal é de uso geral, a 

distribuição geralmente é feita em larga escala e a preferência dos consumidores se dá pela 



 57

 

marca e reputação das empresas. Ou seja, esses softwares servem para qualquer segmento 

de mercado. O software horizontal também é chamado de serviços orientados a cliente, é 

uma aplicação oferecida a todos os públicos. Esse tipo é normalmente “vendido sem custo 

e financiado por anúncios” (CHONG & CARRARO, 2006, p. 5). A seguir serão 

apresentados alguns softwares que podem ser classificados em uma destas categorias de 

SaaS.   

 
2.12.1 AppExchange 
 
Na figura 10 é apresentado um exemplo de software como serviço do tipo vertical. Trata-se 

de um portal desenvolvido pela Salesforce, denominado de AppExchange (I), cujo objetivo 

principal é vender e distribuir SaaS de terceiros e, em troca, a Salesforce ganha uma 

comissão sobre cada venda. Essa é uma grande oportunidade para os desenvolvedores 

incluírem seus softwares à venda no mercado. 

 
 

 
 
 

Figura 10 – SALESFORCE (http://www.Salesforce.com) 
 
 A Salesforce é considerada a empresa que mais opera no modelo de Software como 

Serviço, e somente no ano de 2008, ela teve um faturamento de US$ 850 milhões de 

dólares (IDC, 2008). Segundo Anderson (2006, p. 207) esta empresa tem como mérito ser 

a primeira empresa no mundo a desenvolver no modelo de SaaS e de ultrapassar o 

faturamento de $1 bilhão de dólares na transição do ano de 2008 para o ano de 2009 (IDC, 

2008).  



 58

 

2.12.2 On DemandTM 
 

A IBM comercializa um conjunto de aplicações chamado “on Demand™” e que fornece 

aos clientes, no formato hospedado, aplicações próprias da empresa e também 

disponibiliza aplicações de terceiros. Significa que, ao invés de o software estar no 

computador do cliente, ele está no computador da IBM, que gerencia a disponibilidade uso 

dos softwares a clientes. É necessário ter linhas privadas de comunicação. Um dos 

objetivos da IBM é administrar o pessoal técnico que vai manter o ambiente onde estas 

aplicações vão rodar, a fim de garantir performance, segurança e disponibilidade. A seguir 

a figura 11 apresenta um exemplo de empresa que hospeda seu software, neste modelo de 

negócios da IBM.  

  
 

 

 
 

Figura 11 - Exemplo de Software como um Serviço Talent Management 
(http://www.authoria.com/talent-management) 

 
 
 A figura 11 apresenta um exemplo de Software como Serviço do tipo vertical para 

gerenciamento de carreira. Trata-se de uma empresa de RH, especializada em fazer 

acompanhamento de carreiras para profissionais nos EUA, à qual o cliente paga um 

pequeno valor mensal. São mais de 10 milhões de profissionais administrados pela 

empresa, que cobra, em média, 5 dólares por profissional.  

 

 



 59

 

2.12.3 Zoho Work  
 
A figura 12 apresenta um exemplo de SaaS horizontal. O sistema ZOHO foi desenvolvido 

na Índia, contém uma linha de produtos completa de SaaS, oferece aplicativos de 

produtividade como editor de texto, planilha, ferramentas gráficas, e-mails, chats, banco de 

dados, diários, entre outros. Tudo gratuito. 
 

 

 
 

Figura 12 – ZOHO (http://www.zoho.com) 
 
 O pacote do software foi desenvolvido pela pequena empresa indiana AdventNet, a 

qual comercializa o produto desde 1996. Hoje já conta com dezenas de milhares de clientes 

em todo o mundo.    
 

2.12.4 A Citrix Acess Suite 
 
A figura 13 apresenta um modelo de SaaS horizontal da empresa Citrix que oferece serviço 

de conexão remota. A empresa detém uma grande quantidade de produtos fornecidos como 

SaaS. O sistema possibilita aos usuários acessar o computador de outros usuários. 

 

 



 60

 

 

 
 

Figura 13 - Modelos de softwares como serviço Citrix 
(http://www.citrix.com/English/ps2/products/product.asp?contentID=1686856) 

 
 
 A empresa Citrix é líder global para a infraestrutura de entrega de aplicativos. 

Cerca de 230.000 organizações de clientes no mundo utilizam soluções da Citrix para 

oferecer qualquer aplicativo para usuários localizados em qualquer lugar com o melhor 

desempenho, eficiência, mais segurança e menor custo. A receita da empresa no ano de 

2008 atingiu $ 1,6 bilhão (CITRIX, 2009, on-line). 

 

2.12.5 Google Doc’s 
 
A figura 14 apresenta um dos mais conhecidos SaaS (horizontal), da empresa Google, cujo 

objetivo é oferecer a possibilidade de criar arquivos de texto, planilha, apresentações. 

Além disso, os arquivos são armazenados com segurança no servidor do fornecedor e é  

gratuito.   



 61

 

 

 
 

Figura 14 – GOOGLE (http://docs.google.com) 
 

A Google é uma empresa que desenvolve e oferece diversos softwares online 

gratuitamente. A empresa tem vários modos de lucrar com seus produtos. A empresa não 

tem patrocinadores e o pagamento é administrado em nível de cliques sobre os anúncios 

publicitários. Segundo Anderson (2006, p. 211) “qualquer pessoa pode tornar-se 

anunciante do Google, basta comprar uma palavra-chave num processo de leilão 

automático, no qual o lance mínimo é de US$ 0,05 por clique”. Esse tipo de serviço é mais 

barato para o anunciante e para o Google, além de produzir anúncios mais eficazes. Isso 

explica o fato de a Google faturar US$ 5,51 bilhões no primeiro trimestre de 2009.  

 
2.13 SAAS CORPORATIVO 
 
Os softwares corporativos são de uso exclusivo de empresas. A maioria das organizações 

sofre com o fato de que o acesso a algumas informações produzidas não são integradas a 

outros softwares da empresa, o que dificulta a localização desses dados. Hoje em dia, a 

Internet tornou-se uma ferramenta eficaz para a distribuição de informações e a maioria 

das empresas busca obter maior eficiência operacional dos dados, seguindo a tendência de 

modificar o local da utilização dos softwares.  

O surgimento de SaaS traz mais oportunidades para o negócio em geral. Ao tornar-

se um provedor SaaS, a empresa poderá disponibilizar softwares personalizados aos 

clientes, tais como controle de estoque, contabilidade, bancário, entre outros. É uma 

vantagem para as empresas oferecer esses serviços a outras empresas, principalmente se o 

software desenvolvido for de qualidade. De acordo com Carraro & Chong (2006, p. 5), “os 



 62

 

mesmos princípios que permitem à organização utilizar benefícios da nuvem Internet 

também admitem oferecer serviços à mesma”. De acordo com (SANGWELL, 2008, on-

line), “um software do tipo coorporativo distribuído como SaaS representa serviço de 

integração significativa". Ou seja, a integração dos dados não deixa de ser um serviço 

complexo para incorporar os dados ao SaaS. Acredita-se que o futuro do software 

corporativo não se apoiará, simplesmente, em recursos instalados na máquina local ou na 

Internet, e sim, que haverá uma relação de integração entre ambas. 

 
2.14 SAAS E WEB 2.0 
 
A maioria dos aplicativos de Web 2.0 faz parte do universo de software como serviço. Por 

exemplo, quando o consumidor final navega em sistemas do tipo apresentado na figura 15, 

o conceito base utilizado é o existente no SaaS, uma vez que se utiliza um software que foi 

desenvolvido por um fornecedor qualquer e está rodando na máquina de quem o produziu. 

Por isto, podem ser considerados como Softwares como Serviço. Neste caso, vale ressaltar 

que cada um tem o seu próprio mecanismo de cobrança pelos serviços ‘contratados’. 

Alguns cobram diretamente: o iTunes (http://www.apple.com/itunes) que cobra pelos 

downloads; o Ebay (http://www.ebay.com/), é uma empresa que, além de disponibilizar  

um site de leilão, também possui o sistema de transferência de valores on-line, ligado 

diretamente à empresa, e ainda cobra comissão sobre o que os clientes compram ou 

vendem. A Amazon (http://www.amazon.com/), vende diversos tipos de produtos, em locais 

onde o comércio é livre, sendo considerada uma das maiores redes de comércio no mundo. 

 

 

  
 

Figura 15 – Aplicativos Web 2.0, VESSALI ( 2008, p. 5) 
 
 



 63

 

 Outro grupo de aplicações que faz parte da Web 2.0 são as mídias sociais e também 

utilizam os conceitos de SaaS em seu modelo de negócios. São exemplos desta categoria 

sites como o Linkedin (www.linkedin.com), que é a maior rede mundial para profissionais 

e o Orkut (www.orkut.com), rede de relacionamentos. O Linkedin foi desenvolvido em 

2002 e possui cerca de 38 milhões de membros em 200 países. Hoffman (2009, on-line) 

diz que “a expectativa para o ano de 2009 é de atingir 25% da população mundial”.  A 

inscrição é gratuita. Mas, para ter acesso a uma pessoa fora de seus contatos, é necessário 

par a assinatura. A cobrança é feita de acordo com a quantidade de mensagens enviadas e 

consultas realizadas. Segundo Namour (2009, p. 26), “a empresa fatura com o Linkedin 

Corporate Solutions, um aplicativo voltado para head-hunters (caçadores de executivos)”. 

Ao pagar a taxa de assinatura anual, com o custo de aproximadamente US$ 100 mil a US$ 

250 mil, o software oferece ao cliente um sistema de gerenciamento para a busca de 

profissionais. Esse é o diferencial do Linkedin em relação a outras redes de relacionamento 

e que o mantém concorrente com as demais empresas de tecnologia.” A figura 16 

apresenta um profile de profissional do Linkedin. 

 
 

 
 

 
Figura 16 – Exemplo de SaaS de mídia social (www.linkedin.com) 

 
 Outra comunidade neste ambiente é o Second Life. Trata-se de uma ambiente 

virtual que simula a vida do ser humano. O criador do software percebeu que o ambiente 

daria oportunidade aos usuários de vender suas próprias criações e produtos anunciados e 

ganhar dinheiro com desenhos de terrenos, textura de pele e acessórios virtuais. Os preços 

variam porque o vendedor é livre para pedir o preço que quiser pelos produtos que 

desenvolveu.  E se a ideia desse certo ele poderia cobrar uma comissão de cada usuário. 



 64

 

Vieira (2007, p. 32) diz que “foi criada a moeda virtual, denominada linden dollar, e 

acoplada à cotação do dólar.” A empresa fatura por meio de comissão sobre cada transação 

efetuada. Hoje tem investidores como a Mitch Kapor, Amazon.com e E-Bay. Esse tipo de 

software tem despertado cada vez mais o interesse dos internautas pela quantidade de 

usuários (figura 17). 

 
 

 
 

Figura 17 - Ambiente Second Life (http://www.rit.edu/news/?v=46149) 
 
 Por fim, um último exemplo (figura 18) é o YouTube (www.youtube.com), um site 

disponibilizado por meio da Internet que permite aos usuários copiar, comentar, ver e 

compartilhar vídeos digitais. É considerado o site mais popular relacionado a vídeos. Além 

disso, qualquer vídeo pode ser direcionado em qualquer site pessoal por meio de recursos 

(APIs) desenvolvidos pelo site.  

 
 

 
 

 Figura 18 – Ambiente Youtube (http://www.youtube.com) 



 65

 

 De acordo com Serrano (2008, p. 9), “o site foi vendido em 2006 para a empresa 

Google por 1,65 bilhão de dólares”. E a forma de cobrança ainda está em fase de análise. 

De acordo com Serrano (2008, p. 12) “os usuários do youTube nos Estados Unidos, ao 

adquirir faixas musicais de vídeos são conduzidas para o site de empresas patrocinadoras 

como a  Amazon.com, iTunes, Apple”. Em troca, a empresa repassa para o youtube uma 

porcentagem do total obtido com as vendas. Na seção 2.15 será apresentado a descrição 

técnica de SaaS. 

 
 
2.15 DESCRIÇÃO TÉCNICA  
 
Nesta seção apresenta os níveis de maturidade, ciclo de desenvolvimento de SaaS, 

disponibilidade dos dados, escalabilidade dos dados, escalabilidade as aplicações, 

customização das aplicações, arquitetura multitenant, arquitetura de alto nível, serviços de 

metadados, serviços de segurança e segurança dos dados.  

 
2.15.1 NÍVEIS DE MATURIDADE 
 
Segundo Carraro & Chong (2006, on-line), “os departamentos de TI têm enfrentado nas 

últimas décadas grandes evoluções que fazem a diferença no negócio.” Com isso houve a 

necessidade de entender essas transformações por meio de níveis de maturidade que 

descreve o modelo como as empresas se beneficiam com os recursos tecnológicos. A 

seguir apresenta quatro níveis de maturidade de uma solução de SaaS:   

• o primeiro nível (ad-hoc/personalizado) cada cliente tem a sua própria versão 

personalizada do aplicativo hospedado e executa a sua própria instância do aplicativo 

nos servidores do host9. O cliente neste nível tem um atendimento diferenciado, mas 

com um custo maior, uma vez que o software não é compartilhado e a customização é 

elevada. É semelhante ao modelo utilizado nos anos 90, denominado ASP. O que 

acontece tecnicamente, é que há uma quantidade maior de clientes. Dentro do servidor, 

tem-se partições separadas ou até mesmo servidores diferentes que estarão sendo 

disponibilizados de forma individual para cada cliente. De acordo com Melo (2007a, 

p.1), “o fornecedor é responsável pelo fornecimento, a operação, e a manutenção da 

                                                           
9
 Host é um computador central que controla e armazena programas e dados, sendo acessado por 

outros computadores conectados à Internet.  

 



 66

 

Central de Processamento de Dados (CPD), atua caracteristicamente em uma exclusiva 

instância da aplicação e possui o controle de todas as atualizações”. E a cada cliente 

novo, cria-se uma nova instância de execução da aplicação. O fato de apenas mudar a 

aplicação de local, já caracteriza a aplicação como Software as a Service. É natural que 

os aplicativos tradicionais sejam levados para o nível 1 de maturidade com poucas 

alterações no código e na base de dados. Porém, este nível fornece poucas 

características da solução SaaS, apenas proporcionando aos fornecedores dos produtos 

a redução dos custos através da integração da administração e hardware. É uma boa 

forma de começar a usar esse novo modelo de negócios. Embora possa haver uma série 

de limitações, uma delas é a escalabilidade.  

• no segundo nível de maturidade (configurável) as instâncias continuam separadas como 

no nível anterior; a diferença neste nível em relação ao outro é que no anterior cada 

instância é individual e neste nível, o código fonte será compartilhado e o fornecedor 

oferece aos inquilinos opções de configuração para serem alterados no software. Essa 

passagem não exige serviços de customização, pois neste nível qualquer mudança no 

código pode ser distribuída rapidamente para todos os clientes do fornecedor ao mesmo 

tempo. Isso diminui o custo com manutenção e elimina a necessidade de atualizar todas 

as instâncias individuais, pois a mesma solução abrange todos os clientes hospedados.  

No entanto, a transição de um aplicativo tradicional para o segundo nível de 

maturidade requer do fornecedor uma rearquitetura mais eficiente do que o primeiro 

nível, ou seja, exige mais hardware e armazenamento necessário para mais inquilinos.  

• no terceiro nível de maturidade (configurável e eficiente para vários inquilinos), o 

fornecedor executa uma única instância que serve a todos os inquilinos. Nesta etapa, o 

tratamento de metadados, manutenção de configuração e modelagem do banco de 

dados estão fortemente presentes. Como a solução passa a ser multi-tenant (mult-

inquilino), oferece um compartilhamento total dos recursos e uma única instância para 

os clientes. Na medida em que a empresa vai amadurecendo, consegue–se avançar cada 

vez mais no contexto de “cauda longa”. O custo agora é dividido e mais pessoas são 

atendidas. Políticas de acesso, autenticação e segurança passam a ser requisitos básicos 

neste nível; deve-se garantir aos clientes que seus dados vão ser mantidos separados 

dos de outros clientes e que, da visão do usuário final, não exista qualquer 

possibilidade de que a instância do aplicativo esteja sendo compartilhada entre vários 



 67

 

inquilinos. O gasto com hardware neste nível tende a diminuir, porque não será mais 

necessário espaço no servidor para tantas instâncias, agora é uma apenas.  

• finalmente, o quarto nível (escalonável, configurável e eficiente para vários inquilinos), 

passa a atender um volume bem grande de clientes com instâncias idênticas, porém, os 

dados dos clientes são mantidos separados com metadados configuráveis e 

personalizados para cada cliente. Conforme Chong & Carraro (2006, p.15), um sistema 

como serviço é considerado escalável para uma grande quantidade de inquilinos 

quando “o número de servidores e instâncias no lado do vendedor pode ser adicionada 

ou retirada quando necessário para satisfazer à demanda sem a necessidade de 

modificar a arquitetura do aplicativo”. Este nível exige do fornecedor um nível mais 

elevado de hardware; ele deve estar preparado para as futuras demandas logo, como 

parte desse processo de administração do gerenciamento da aplicação. O fornecedor 

hospeda múltiplos clientes num conjunto de instâncias baseadas em múltiplos 

servidores, com balanceamento de carga. Ou seja, uma bateria com mais ou menos 30 

(trinta) servidores, todos fazendo o mesmo serviço. E, conforme cheguem as demandas 

dos usuários, essas demandas são delegadas a um ou outro servidor, conforme o nível 

de carga que tenha no momento, de forma a maximizar a resposta. Isso traz 

consequências enormes sobre a aplicação. Para poder migrar de um servidor para outro 

instantaneamente, a estrutura do software muda rapidamente. Neste nível, a 

escalabilidade é garantida, porque o número de servidores e instâncias pode ser 

modificado conforme a demanda, sem a necessidade de modificações na aplicação.  

 A figura 19 mostra, resumidamente, os quatro níveis de maturidade de SaaS. O 

primeiro nível iniciou-se com o modelo ASP, ad-hoc/customizado, modelo de aplicação 

hospedada (lado 1), onde o que estava no cliente foi trazido para dentro da empresa do 

fornecedor, com um ambiente separado para cada cliente. No segundo nível, começa-se a 

utilizar o alocamento de recursos e cada cliente continua tendo a sua base de dados 

separada dos demais, configurável (mas mono-tenant), isolamento físico ou virtual (lado 

2). No terceiro nível, o ambiente começa a ser compartilhado sem que o cliente perceba, 

configurável, multi-tenant (lado 3). E, por último, quarto nível, é introduzido o sistema de 

balanceamento de carga, escalável, configurável, multi-tenant (lado 4). 

 



 68

 

 
 
Figura 19 - O software como um Modelo de Maturidade de Serviço (CHONG, CARRARO 
& WOLTER, 2006, p. 12) 
 
 Os níveis que foram comentados nesta seção são características importantes do 

SaaS. O software pode conter alguns desses níveis e continuar competindo no mercado, 

caso o fornecedor opte por não aderir aos demais níveis, se o processo não for viável 

economicamente.  

 A princípio, pode se pensar que o nível mais apropriado para um SaaS é o nível de 

maturidade quatro, mas se deve levar em consideração que a maturidade do SaaS se dá em 

uma sequência contínua: de um lado, códigos e dados separados e, de outro lado, códigos e 

dados compartilhados. A continuidade do software vai depender das necessidades dos 

clientes (CHONG & CARRARO, 2006, p.11).  Na seção 2.15.2 explica o ciclo de 

desenvolvimento de SaaS. 

 
 

2.15.2 CICLO DE DESENVOLVIMENTO    
 

Melo et al. (2007a, p.3) explica que as características que definem o modelo SaaS, estão 

embasadas em três princípios básicos: “licenciamento, localização e gerenciamento do 

ciclo de vida da aplicação”. A figura 20 apresenta a visão continua do modelo SaaS.  

 
 
 
 



 69

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 

Figura 20 – Visão contínua de software como serviço (MELO et al., 2007b, p. 16) 
 

 A figura 20 mostra algumas questões técnicas e cuidados que se deve ter ao 

desenvolver neste modelo, e o que muda nesse modelo em relação ao desenvolvimento 

tradicional. Na imagem há duas cores (vermelho) e (azul) que se interagem. Isso significa  

que ao desenvolver nesse ambiente, não existe um ambiente inflexível, único, e sim que se 

pode imaginar, do ponto de vista técnico, misturas de características que estejam mais 

próximas do modelo tradicional, baseado no licenciamento por um valor fixo por prazo 

indeterminado, da localização do software no CPD, no Data Center do cliente ou uma 

equipe própria gerenciando o software. E no outro extremo da figura, o SLA que tem como 

base a garantia do fornecedor do software ao cliente, onde o cliente não sabe onde o 

sistema estará hospedado. Qualquer combinação desses fatores gera uma alternativa de 

fazer desenvolvimento de algo que pode ser chamado de software como serviço. A não ser 

que o desenvolvedor escolha os três elementos da esquerda. Ao mesmo tempo percebe-se 

que há um processo de aprendizado no desenvolvimento das aplicações. Provavelmente, a 

transição da esquerda para a direita dessas características na figura se dará gradativamente.  

O valor das opções de “licenciamento” no modelo SaaS são semelhantes quando 

comparadas ao modelo tradicional porque, no licenciamento tradicional apesar de o valor 

da licença ser único, o cliente ainda terá que investir em customização para acompanhar o 

avanço da tecnologia. No modelo SaaS o pamento é por assinatura, mas o cliente não vai 

precisar se preocupar com customização, hardware, implementação, entre outros. Melo et 

al. (2007, p. 4), explica que a inscrição (subscription), transação (transaction) e baseado 

em anúncio (adfunded), são meios que facilitam a aquisição do software por menor custo, 

pois fazem parte de uma mesma transação, possibilitando aos produtores de SaaS 



 70

 

beneficiar-se com a economia de escala ao adotar uma única instância, isto é, aplicação 

como um local multi-inquilino. A expectativa é que, a longo prazo, os fornecedores de 

SaaS forneçam cada vez mais aplicações com custos de assinaturas menores. 

O princípio de “localização” refere-se ao local onde o software está hospedado e o 

meio pelo qual se é feito o acesso. Nesse sentido, infelizmente, ainda não se tem uma 

conexão de banda e velocidade necessárias ao bom desempenho e não dá para ignorar a 

lentidão da rede quanto ao desempenho da aplicação. Em SaaS existem duas formas de 

localização, que são:  

• os softwares são hospedados por terceiros e acessados por meio da Internet, e de 

acordo com a aplicação e o número de acessos de usuários, a organização pode 

necessitar de mais investimentos para possuir uma rede local que atenda a demanda. 

• outra alternativa de desenvolvimento de aplicação de SaaS que contribui para amenizar 

a questão da distância da rede e largura de banda, é distribuir o serviço por meio de 

“appliance”. Conforme Melo et al. (2007a, p. 5),  
nesse modelo uma aplicação pré-configurada é arrendada e instalado no 

cliente. Normalmente, os dados são processados e colocados em cache no 

appliance para diminuir o número de micro-transações e aumentar a 

velocidade do acesso do usuário. 

Periodicamente,*partes*dos*dados*são*sincronizados*com*os dados 

localizados no provedor de serviço de software.   

A empresa que fizer uso do serviço precisa confiar no mecanismo de segurança dos 

dados e políticas de segurança estabelecidos pelo fornecedor do serviço, no qual o 

cliente não sabe onde o sistema está hospedado. 

 Em relação ao fator “gerenciamento do ciclo de vida da aplicação”, as empresas 

precisam desenvolver mais o setor de gerenciamento da informação para manter e operar 

as aplicações de SaaS. Precisam conhecer o ambiente do cliente, prezar pelas ações 

operacionais no sentido de resolver problemas de segurança, performance, disponibilidade, 

entre outros. O objetivo é que realmente os fornecedores de SaaS cuidem da gerência de 

TI, pois a empresa não possui mais a aplicação. A próxima seção 2.15.3 comenta sobre a 

disponibilidade dos dados em SaaS.   

 

 

 

 



 71

 

2.15.3 DISPONIBILIDADE DOS DADOS 
 
A principal diferença do SaaS é o local em que os algoritmos da aplicação estão 

localizados, como é desenvolvido e acessado. Esse serviço inclui uma diversidade de 

serviços e softwares que atende vários critérios do cliente por meio da Internet. Na teoria é 

muito fácil lançar uma aplicação no mundo da Internet, o problema é que a rede local tem 

velocidade superior em relação à Internet. Esse fator da baixa velocidade da rede, 

certamente modifica a forma de desenvolver software, porque localmente o usuário não 

percebe a execução de determinadas ações (busca, cadastro, inserção e alteração), mas por 

meio da Internet, certamente percebe. Segundo Carraro & Chong (2007, on-line),  
A largura de banda da Internet fica muito aquém dos links Ethernet de 

gigabits, normalmente encontrados nas LANs corporativas e as 

transmissões de dados que levam poucos minutos na transferência entre 

servidores, podem levar horas para transmitir de/para um aplicativo 

SaaS localizado em local remoto, na sua central de dados. Por isso, 

talvez seja mais sensato analisar uma solução que considere a latência 

da rede.  

 Exemplo de latência na rede é a solução encontrada pela empresa IBM, que prefere 

rodar o sistema em uma rede privada. Então, diante deste contexto, nota-se que a 

tecnologia Web não é necessariamente fundamental para SaaS. Observa-se que na opção 

da IBM há espaço para SaaS rodar em rede privada, por uma necessidade de negócios. 

Outro problema refere-se à questão da disponibilidade, porque dizer que o sistema 

vai estar disponível 99,9%, quer dizer que o sistema pode falhar por 5 (cinco) minutos ao 

ano. Deve-se levar em consideração que pode haver redundância; tem-se ainda que 

considerar a possibilidade de ocorrências outras, tais como: incêndio, roubo, ataques de 

hackers, pois tudo pode acontecer e as empresas devem estar tecnologicamente preparadas 

para fazer com que o sistema volte a funcionar em no máximo 5 (cinco) minutos, a fim de 

atender o contrato firmado com o cliente. De acordo com Hirschman (2008, on-line), essas 

questões envolvem “exigências de backup e restauração, valor gasto em espaço para 

hospedar, energia por servidor, clientes que exigem maior volume de dados e capacidade 

de infra-estrutura do fornecedor, segurança dos dados e gerenciamento geral.” Na seção 

2.15.4 aborda sobre a portabilidade dos dados.  

 

  

 



 72

 

2.15.4 PORTABILIDADE DOS DADOS 
 
De acordo com ABNT-SC10 (1999, p. 60), “portabilidade é um conjunto de elementos que 

evidenciam a capacidade do software de ser transferido de um ambiente para outro”. Ou 

seja, é um recurso que permite portar um sistema ou aplicação de uma plataforma pra 

outra.  As aplicações SaaS são executadas em servidores conectados à Web. Os usuários os 

acessam por meio de browsers, de forma que não há qualquer questão relacionada à 

portabilidade do lado do cliente. Do lado do servidor, aplicam-se os mesmos critérios e 

técnicas de portabilidade correspondentes a qualquer outro tipo de software. Mas a 

tendência é que os usuários cada vez mais façam uso de máquinas burras (sem 

processamento local, ou seja, todo o processamento ocorre no servidor acessado) que está 

se tornando uma alternativa para vários sistemas, pelas vantagens em custos e 

portabilidade, inclusive em sistemas de segurança (MACAGNANI, 2009, on-line).  

 Segundo a Gartner, a tendência de TI para os próximos anos é que os usuários vão 

gastar 40% da sua infraestrutura em hardware como serviço, ao invés de gastar com 

equipamentos (GARTNERb, 2009, on-line).   

Serviços SaaS têm os mesmos desafios de portabilidade que qualquer aplicativo on-

premises software: basicamente depende da plataforma de desenvolvimento escolhida para 

o serviço ser portável ou não. Com relação à portabilidade de dados, serviços SaaS podem 

utilizar a arquitetura SOA para integração dos seus processos. Desta forma, observa-se que 

soluções SaaS devem fornecer suporte a mecanismos de integração para os serviços SOA 

sem precisar de grande esforço de desenvolvimento. A seção 2.15.5 será apresentado sobre 

a escalabilidade das aplicações. 

 
2.15.5 ESCALABILIDADE DAS APLICAÇÕES  
 
Segundo Chong, Carraro & Wolter (2006, p. 17) “para uma aplicação SaaS, a 

escalabilidade é ainda mais importante, porque deve suportar informações vindas de todos 

os inquilinos”. Para que os profissionais passem a construir softwares desse tipo, apesar 

das regras serem familiares, tolerar esse tipo de base de dados de inquilinos muda 

significantemente a forma de modelar, pois esses aplicativos são desenvolvidos para 

funcionar na Internet, e geralmente têm que suportar, simultaneamente, milhões de 

usuários.  

 A escalabilidade é um atributo desejável para qualquer aplicação, em uma rede ou 

em um processo, que indica a habilidade de manipular uma quantidade crescente de 



 73

 

serviço de forma uniforme, ou estar preparado para expandir o sistema de acordo com o 

aumento do tráfego, sem modificar sua arquitetura (BONDI, 2001, p. 195). Quando um 

sistema não é escalável, o custo adicional para lidar com o tráfico dos dados é enorme e, 

além disso, pode-se perder clientes por causa da qualidade do serviço. Segundo Bondi 

(2001, p. 196) “a escalabilidade de um sistema é crucial para seu processo futuro a longo 

prazo”. Ao mesmo tempo, garantir que a escalabilidade melhora ou diminui o tráfego é 

vago e subjetivo. Muitos analistas de desempenho têm o dom intuitivo para a 

escalabilidade, mas os fatores de sucesso a fim de adquirir a escalabilidade podem variar 

de um sistema para outro, pois, a habilidade para aumentar um componente de sistema 

pode depender dos tipos de estrutura de dados e algoritmos implementados ou dos 

mecanismos de componentes que o sistema utiliza para comunicar (BONDI, 2001, p. 197).  

 A escalabilidade é um aspecto que é preciso levar em consideração, porque 

tecnicamente é diferente do ponto de vista do negócio, no qual existem várias técnicas de 

particionamento. Uma delas é trabalhar com uma aplicação sem estado, significa que não 

há informação na memória do computador para lembrar o que o usuário já fez em um 

determinado instante, essas informações podem ficar na base de dados. Quando a aplicação 

tem estado do lado do cliente cada transação de cada usuário é processada por outro 

servidor do cluster, o estado fica armazenado na base de dados. Isso melhora o uso da 

memória e a capacidade de balancear a carga. A vantagem disso é que, se tudo o que se 

precisa para fazer o processamento da próxima transação que um determinado usuário 

solicita está na base de dados, então isso pode ser executado por qualquer um dos 

servidores, mas se na memória de uma dessas máquinas tem um flag10 para controlar o que 

o usuário já fez, então tem que ser a mesma máquina que vai continuar atendendo o 

usuário, independentemente do nível de carga que ela tiver quando o usuário retornar para 

a próxima transação (BONDI, 2001, p. 198). Ou seja, consiste na capacidade de que 

qualquer um dos servidores possa ser usado para dar continuidade ao trabalho para o 

cliente, pois, melhora a capacidade de balanceamento de carga. E, se por acaso, a carga 

aumentar acima do esperado, é só adicionar outro servidor para reescalonar a capacidade 

do cluster. Se um servidor apresentar problema, haverá outros para continuar atender os 

usuários.  

                                                           

10 Flag é um tipo de referência usado para indicar o evento de alguma condição. 

 

 



 74

 

 Outra técnica envolve a Unidade de Processamento de Dados (CPU) com os meios 

de armazenamento. A maioria dos sistemas operacionais utilizam chamadas de I/O 

Input/Output - Entrada/Saída) assíncrono (oferece a possibilidade de fazer algo útil 

enquanto aguarda que o I/O termine), ou seja, manda o comando de leitura ou gravação 

para o dispositivo de armazenamento, mas a CPU fica liberada para utilização. Ou seja, o 

SO salva seu contexto e o coloca na fila de “pronto”, liberando a CPU para o processo 

prioritário. Suponha-se que uma impressora demore 10 ms para tratar os dados que chegam 

entre uma impressão e outra.  Nesse tempo de 10 ms a CPU estará liberada e poderá 

atender outros processos. Essa técnica permite que a aplicação seja mais escalada, porque 

não depende do IO enquanto ele estiver processando e, assim, a CPU não fica parada. Mas, 

requer que o desenvolvedor saiba manipular as threads, que são execuções concorrentes 

dentro da própria aplicação. Ao trabalhar com esse tipo de comando, os desenvolvedores 

geralmente criam uma para cada usuário, e executar, por exemplo, dez views em uma 

threads pode ser pesado. Enquanto há uma demanda pequena de usuários, a outra demanda 

maior fica parada. Daí que, uma forma de melhorar o performance da máquina e aumentar 

a escalabilidade é fazer o compartilhamento das threads, isto é, criar um conjunto possível 

de metadados no código que descreve o que terá que ser executado e as mesmas threads 

para usuários diferentes. Isso não quer dizer que tenha uma apenas, mas cada uma delas 

pode atender o usuário que for utilizar a aplicação. Essa técnica também pode ser utilizada 

para compartilhar conexões de usuários de rede, TCP/IP, HTTPS ou conexões de bancos 

de dados (BONDI, 2001, p. 199).  

 Por fim, outra técnica que pode ser utilizada é o bloqueio (lock11) exclusivo na 

tabela. Esse comando controla o acesso concorrente à tabela durante o tempo de execução 

da transação. Segundo Barros et. al (2008, p. 14),  
Bloqueios (Locks) são usados em ambientes multi-usuário para garantir 

a preservação da consistência do banco de dados. Ou seja, os locks não 

permitem que mais de um usuário altere ou acesse um mesmo dado. 

Mas, recomenda-se não utilizar bloqueios no banco, salvo em último caso, porque a 

maioria dos usuários vai ficar aguardando, e isso prejudica definitivamente a 

escalabilidade, por menor que seja o tempo considerado (BONDI, 2001, p. 200). Por 

exemplo: se o cliente tiver uma tabela de pedido de venda e essa for utilizada por vários 

inquilinos ao mesmo tempo, criar lock na tabela inteira não é indicado porque se um cliente 
                                                           
11

 lock é uma funcionalidade de segurança para evitar que um dado seja alterado por mais 
de uma sessão na mesma unidade de tempo. 



 75

 

estiver alterando um pedido, o outro fica esperando ele terminar a atualização. Outra 

questão ainda relacionada à escalabilidade dos dados que será vista na próxima sessão. 

 
2.15.6 ESCALABILIDADE DOS DADOS   
 
À medida que o usuário utiliza a aplicação, o espaço no banco de dados pode ficar 

pequeno. Segundo Chong, Carraro & Wolter (2006, p. 23), “há duas ferramentas para 

modificação no banco de dados: a replicação e o particionamento”. Replicar dados 

significa criar uma cópia do banco de dados para outro local, e manter uma cópia 

sincronizada com a original. É uma técnica que possibilita aumentar a disponibilidade da 

base de dados. Pode ser usada com uma aplicação tradicional ou com SaaS 

indistintamente. Geralmente, esse mecanismo é utilizado quando se necessita implementar 

um sistema de missão crítica no qual seja preciso implementar HA - High Avaiability (alta 

disponibilidade). Sistema de missão crítica refere-se a um ambiente tecnológico instalado 

para evitar a interrupção dos serviços relacionados ao software e à perda de dados e é 

utilizado para tornar o software confiável e tolerante a falhas. 

 Segundo Oliveira (2006, p. 17), “existem dois tipos de modelos de replicação a ser 

adotada, a replicação síncrona e assíncrona”. A replicação síncrona é utilizada no momento 

em que uma determinada cópia é alterada. Nesse tipo, as replicações serão criadas no 

instante da sincronização e consistência. E se alguma cópia do banco for alterada, a 

atualização será imediatamente aplicada a todos os outros bancos dentro da transação. Esse 

modelo de replicação não tolera atrasos na propagação das atualizações.  

 Parte-se do princípio que uma determinada máquina será a principal, da qual todas 

as outras deverão ser espelhadas. Isso evita erros de sincronia, porque a referência será 

sempre a máquina principal, ou original. É partindo dela que as outras fazem a sincronia. 

Já a replicação assíncrona, significa ter cópias em real-time do seu ambiente principal e 

somente a cópia alterada é tratada em tempo real, ou seja, a cópia dos dados fica fora de 

sincronia entre os bancos de dados. Se a base de dados for modificada, a atualização será 

propagada e aplicada para outra base de dados em segundo plano dentre uma transação 

separada, e essa pode levar segundos, minutos, horas ou até mesmo dias. A réplica poderá 

ficar temporariamente fora de sincronia pela interrupção de comunicação entre as cópias, 

mas quando a sincronização ocorrer, os dados convergirão para todos os locais 

especificados. Numa única replicação, neste caso, apenas a replicação principal pode ser escrita 

para gerenciar uma replicação com o esquema múltiplo-mestre, nos quais algumas, ou todas, as 



 76

 

cópias podem ser escritas para um tipo de mecanismo de sincronização, utilizado para atualizar 

mudanças entre as diferentes versões desses dados (CHONG, CARRARO & WOLTER, 2006, 

p. 24). 

 Segundo Chong, Carraro & Wolter (2006, p. 24), “particionar significa dividir os 

dados em subsistemas de banco de dados, e transferir esses dados para outras tabelas, 

particionadas num mesmo banco de dados”. Porém, para particionar, como o I/O 

(Input/Output - Entrada/Saída) geralmente é lento, uma forma de ganhar performance é 

dividir os dados dos assinantes em partições menores para garantir as metas de 

performance, e acessar os dados em paralelo. Estes são divididos em subsistemas de banco 

de dados e esses dados particionados são levados para outras tabelas particionadas num 

mesmo banco de dados. Este mecanismo é uma forma utilizada para o usuário não 

perceber que o sistema tem uma performance diferente. Além de se dividir os dados, é 

importante prever, ao desenvolver o software, o que poderá acontecer quando o esquema 

de particionamento chegar no limite. A decisão do que fazer se isso vier a acontecer deve 

estar prevista no software, o que é chamado de reparticionamento dinâmico. O banco de 

dados é particionado realocando as tabelas ou dividindo-as em uma ou mais tabelas 

menores verticalmente ou horizontalmente, onde: 

• o particionamento vertical significa que uma ou mais tabelas são divididas em tabelas 

menores, com um mesmo número de linhas. Segundo Wada et. al (2003, p. 14), “a 

partição vertical de uma relação R produz R1, R2, …RR, cada um dos quais é um 

subconjuntos dos atributos de R.” O objetivo é dividir as linhas da tabela original 

verticalmente em tabelas com menos campos, a fim de minimizar o tempo de execução 

das aplicações. E cada linha da tabela dividida tem que coincidir com a mesma linha 

das outras tabelas. Considera esse tipo de particionamento mais complicado de 

implementar devido à necessidade de análises de estatísticas sobre os acessos 

realizados a cada atributo da relação. Porque deve-se auxiliar replicando as chaves 

primárias da relação para poder reconstruir a relação original (WADA et. al, 2003, 

p.14). 

• já no particionamento horizontal, o banco de dados é dividido em outros bancos 

menores, utilizando-se a mesma estrutura do banco original. Tal particionamento tem o 

objetivo de diminuir a tabela, com poucas linhas. Esse tipo deve ser utilizado quando o 

banco não atender mais as métricas de desempenho ou quando há um número enorme 

de inquilinos que acessam simultaneamente o banco, ou também se ocorrer lentidão 



 77

 

nas funcionalidades em decorrência do excesso de dados no banco, o que afetará a 

disponibilidade dos dados (CHONG, CARRARO & WOLTER, 2006, p. 25).  

 O particionamento horizontal é o tipo mais simples para modificar o banco de 

dados compartilhado, porque, como o inquilino possui um conjunto de dados, torna mais 

fácil a transferência dos dados. Porém, deve-se ter cautela ao subdividir o banco; é 

necessário planejar com atenção para evitar criar muitas partições, enquanto outras não são 

utilizadas. Então, o tipo de particionamento escolhido pode ter grande influência no 

desenvolvimento de aplicações. Porém, independente da escolha do método é 

recomendado pesquisar com cuidado e verificar quais são as métricas desejadas a fim de 

tomar decisões relacionadas ao particionamento. Segundo Chong, Carraro & Wolter (2006, 

p. 26), “desenvolver uma espécie de monitoramento dentro do sistema ajuda obter uma 

visão ampla das funcionalidades utilizadas pelos inquilinos e suas necessidades”. Além 

disso, é viável que periodicamente seja necessário reparticionar os dados em intervalos 

regulares à medida que o cliente evoluir e modificar a forma de trabalhar, sendo que este 

pode solicitar a transferência para um servidor de banco exclusivo devido à grande 

quantidade de dados armazenados. A seção 2.15.7 apresenta sobre customização das 

aplicações. 

  
2.15.7 CUSTOMIZAÇÃO DAS APLICAÇÕES  
 
Segundo Genena (2004, p. 16) “customizar significa adaptar as aplicações e processos às 

necessidades do cliente. A palavra vem do inglês customer, que significa cliente”. E de 

acordo com Pecego (2007, on-line) “customizar uma aplicação não apenas expressa 

modificação para aderir às necessidades particulares de uma empresa, mas também 

significa um enorme empenho de implementação.” Além disso, a customização pode trazer 

fonte de renda ou prejuízo para a empresa fornecedora. O lucro é geralmente obtido 

quando a customização pode ser comercializada e incorporada em novas versões do 

software, ou quando for viável associar uma rede de serviços capaz de implementá-las sem 

alterar o produto. O prejuízo pode ser desde uma versão diferente do software para cada 

cliente, que pode causar problemas de manutenção, até uma exigência solicitada que não 

pode ser atendida por causa das limitações de recursos, o que pode acarretar a perda do 

cliente para a concorrência. 

 Portanto, nem todos os tipos de softwares podem ser oferecidos como SaaS. Por 

exemplo: um sistema operacional não tem como rodar na Web com os recursos que estão 



 78

 

disponíveis hoje. É mais fácil trazer para o modelo SaaS modelos menos complexos, 

porque o grau de customização certamente será menor. E se houver um aplicativo que 

necessite de personalização além do limite, talvez seja melhor não oferecer o software 

como um serviço, por causa do grande índice de customização. 

 Outro fator que vale observar, é que neste modelo não existe mais lançamento de 

software, porque este está em permanentemente customização/personalização, em curtos 

intervalos. Segundo Pecego (2007, on-line) “é trabalho do desenvolvedor projetar com 

antecedência uma forma que torne mínimo a decorrência de futuras customizações”. Isso 

pode gerar economia tanto ao consumidor como ao produtor. Existem algumas técnicas 

que auxiliam o profissional a apoiar as mudanças em um software, como: metamodelos, 

metadados e pontos de extensão; mecanismos (como herança e interface), patterns de 

extensão; avaliação de regras e linguagens de customização. Enfim, são vários os tipos de 

mecanismos que um arquiteto/projetista pode utilizar para customizar. A próxima seção 

2.15.8 apresenta a arquitetura que melhor de SaaS.  
 
2.15.8 ARQUITETURA MULTITENANT  
 

Arquitetura multitenant é um modelo utilizado no compartilhamento de 

processamento de aplicações e recursos de armazenamento de dados em um ambiente um-

para-muitos (DESISTO, PLUMMER & SMITH, 2008, on-line). Essa arquitetura é 

considerada a mais eficiente para o fornecimento de SaaS, pois possibilita que os 

fornecedores de software alcancem a economia de escala ao gerenciar os custos de 

infraestrutura para servir a muitos consumidores, grandes e pequenos. Todos os usuários e 

aplicativos compartilham uma única instância e a base de códigos é mantida centralmente. 

Em uma arquitetura onde todos os clientes têm seus serviços rodando na mesma instância 

de software, é necessário que a arquitetura da aplicação esteja preparada para isolar os 

dados de cada cliente, de forma que o usuário final não faça ideia que seus dados estão 

sendo disponibilizado por um serviço utilizado por usuários de outras empresas. Na seção 

seguinte 2.15.8.1, apresentam-se os 3 modelos para gerenciamento de dados nessa 

arquitetura.  

 

 



 79

 

2.15.8.1 MODELO DE DADOS MULTITENANT 
 

De acordo com Chong, Carraro & Wolter (2006, p.4), “três pontos de vista que devem ser 

analisados sobre a dimensão de um modelo isolado para um modelo compartilhado”. Entre 

eles: banco de dados separado, banco de dados compartilhado, extensões fixas e banco de 

dados compartilhado, extensões variáveis. 

A figura 21 apresenta aspectos sobre a dimensão do modelo isolado para um 

modelo compartilhado.  

 
 

 
 

Figura 21 – Posicionamentos diferentes sobre a extensão do modelo isolado para 
compartilhado (CHONG, CARRARO & WOLTER, 2006, p.2) 

 
  

O banco de dados separado (figura 22), que utiliza um banco de dados para cada inquilino 

(tenant), é considerada a solução mais simples. Cada aplicação continua sendo uma só; o 

que diferencia é que o desenvolvedor mantém um banco de dados separado para cada 

cliente (CHONG, CARRARO & WOLTER, 2006, p. 2). Ou seja, as funcionalidades do 

software, geralmente, são compartilhadas entre todos os clientes que utilizam o mesmo 

servidor, mas cada inquilino possui suas informações isoladas dos demais.  

 
 

 
 

Figura 22 – Banco de dados isolado para cada inquilino (CHONG, CARRARO & 

WOLTER, 2006, p.2) 
 

Esse isolamento se faz necessário para atender as necessidades individuais do 

cliente. Além disso, torna-se mais fácil recuperar algum dado do cliente, caso haja falhas. 

Certamente esse tipo de serviço gera custos maiores na hora de gerenciar os backups e o 

custo com hardware, na medida em que houver mais clientes hospedados no servidor, o 



 80

 

qual pode sofrer limitações quanto ao número de bases de dados suportados. Alguns 

servidores de banco de dados têm recursos para manter os bancos na memória por um 

determinado tempo. Quando a aplicação não tem nenhum cliente ativo, ocorre o 

fechamento automático do banco de dados, retirando-o da memória do servidor (figura 22). 

Geralmente os clientes que solicitam banco de dados isolado são aqueles que 

trabalham com dados bancários, fichas de pacientes, entre outros, que necessitam 

realmente ter uma proteção maior com seus dados e estão dispostos a investir em 

segurança. Porque ao optar por este modelo esses clientes devem gastar mais com custos 

adicionais relativos ao hardware, gerenciamento, segurança e customização.   

 Banco de dados compartilhado, com tabelas separadas (figura 23), abrange o 

armazenamento de informações de vários clientes no mesmo banco de dados. O banco de 

dados é compartilhado e todos os clientes operam na mesma base de dados, porém, cada 

inquilino possui seu próprio grupo de tabelas, e nestas são criadas colunas adicionais para 

cada um dos campos. O desenvolvedor cria previamente todos os campos que um dia o 

cliente possa vir a solicitar e nos metadados o desenvolvedor determina para cada cliente 

quais são os campos em que ele vai trabalhar. Chong, Carraro & Wolter (2006, p. 3) 

explica que assim que o cliente adota o serviço pela primeira vez, “o sistema temporário 

produz um grupo de tabelas para o cliente e o agrega ao seu próprio projeto”. Na prática 

não é considerado complicado de implementar em relação ao modelo anterior, mas por 

outro lado, permite que o número de clientes de uma única base de dados, seja maior.   

 
 

 
 

Figura 23 - Conjunto de tabelas numa mesma base de dados (CHONG, CARRARO & 
WOLTER, 2006, p.3) 



 81

 

 De acordo com Chong, Carraro & Wolter (2006, p. 4), “para criar um esquema e 

liberar a conta do cliente para acesso, pode ser utilizado o comando SQL CREATE, ex: 

CREATE SCHEMA ContosoSchema AUTHORIZATION Contoso”. Após a 

implementação do comando, pode-se criar e acessar tabelas com o esquema do inquilino 

utilizando a combinação  SchemaName.TableName:  

 CREATE TABLE ContosoSchema.Resumes (EmployeeID int   
 identity primary key, Resume nvarchar(MAX)) 
 
 Após o esquema ser criado, o mesmo torna-se padrão para a conta do inquilino. 
 ALTER USER Contoso WITH DEFAULT_SCHEMA = ContosoSchema  
 
 Essas instruções basicamente criam um esquema por cliente no banco de dados, 

setam esse esquema como esquema default do usuário, e então a aplicação fica 

transparente. Quando o usuário acessar vai fazer “select” de tabelas do esquema “default”, 

só loga no banco de dados o usuário do cliente e ele só terá acesso às tabelas do esquema.  

 Esse tipo de esquema oferece um grau moderado da lógica de isolamento de dados 

e da segurança para os clientes, embora não seja igual ao modelo de isolamento geral, e 

possibilita uma ampla quantidade de inquilinos por banco em relação ao outro (banco 

isolado). Assim, pode oferecer um serviço mais barato, se os clientes não se importarem de 

ter seus dados juntos com os de outros inquilinos (CHONG, CARRARO & WOLTER, 

2006, p. 5). 

 Por fim, no tipo de banco de dados compartilhado, com esquemas compartilhados, 

todos os inquilinos utilizam o mesmo banco de dados e conjunto de tabelas para a 

hospedagem dos dados. Os dados são adicionados aleatoriamente, e um ID para cada 

inquilino associa-o aos seus próprios registros. A figura 24 representa esse tipo de 

esquema. 
 

 

 

Figura 24 – Conjunto de tabelas compartilhadas (CHONG, CARRARO & WOLTER, 
2006, p. 5) 

 



 82

 

 Este esquema possui um custo menor em hardware e backup, porque serve um 

número maior de inquilinos. Mas, por causa desse compartilhamento, esse tipo requer mais 

gastos em segurança, para evitar que inquilinos tenham acesso aos dados uns dos outros. 

Para a restauração dos dados, segundo Chong, Carraro & Wolter (2006, p. 7), “as linhas 

específicas dentro de um banco de dados da produção deverão ser deletadas e então re-

inseridas no banco de dados provisório”. E se tiver muitas linhas nas tabelas afetadas, pode 

causar queda de performance a todos os inquilinos que utilizarem o banco. Esse tipo de 

modelo de dados é mais viável de ser utilizado para um número maior de inquilinos, com 

menos servidores.  

 A figura 25 mostra um problema que pode surgir neste esquema com os valores dos 

campos preenchidos com “null”, o que significa que este campo não tem valor em 

determinado registro. Observe a coluna C1 da figura. Somente um registro de determinado 

cliente terá valor na coluna; os demais clientes que não usam esse campo customizado não 

vão ter valor, pois o campo não vai aparecer na interface dos usuários desse cliente, então 

nunca será preenchido. Alguns valores serão preenchidos, mas a grande maioria dos 

registros será preenchida com valores null. E quanto maior o número de campos e maior o 

número de clientes, o grau de preenchimento do banco de dados vai ficar cada vez mais 

baixo. Ou seja, há uma estabilidade melhor que a solução anterior, mas tende a utilizar 

muito mais espaço. É o percentual dos possíveis valores que de fato não são nulos, é assim 

que se mede.  

 

 
 

Figura 25 – Banco de dados compartilhado, com esquemas compartilhados (CARRARO, 
2006, p.23) 



 83

 

 O problema considerado na figura refere-se ao fato da administração do banco de 

dados se basear nos valores para fazer a gestão dos dados. Por exemplo: em um sistema de 

indexação existem muitos valores iguais, nulos ou não, dificultando o processamento dos 

índices.  É viável utilizar essa combinação quando o cliente concorda que os seus dados 

sejam residentes na mesma base dos outros clientes. Ou também, uma situação em que é 

fácil prever quais vão ser os campos customizados. Depois que o banco estiver preenchido 

é fácil fazer essa análise. Mas, é mais importante antes entrar no domínio do problema e 

determinar o que realmente o software pretende resolver para conhecer a razão de ser de 

cada um dos campos. E, para prevenir o que o cliente poderá solicitar, quanto mais 

alternativas o desenvolver buscar, tanto mais fácil atender as necessidades dos clientes. 

Cada uma das três abordagens descritas acima possui vantagens e desvantagens; a escolha 

do tipo de dados que será utilizado vai depender do negócio em questão e do investimento 

que o cliente está apto a realizar. Pode ser que haja alguma necessidade que esse tipo de 

modelo não consiga atender. Se o cliente necessitar adicionar diversos tipos de campos 

customizado nas tabelas, por exemplo, é necessário utilizar outra alternativa, “a 

extensibilidade”. A seção 2.15.8.2 apresenta esse modelo de dados extensível. 

 
2.15.8.2 MODELO DE DADOS EXTENSÍVEL 
 
De acordo com Chong, Carraro & Wolter (2006, p. 21), “os clientes têm diferentes tipos de 

necessidades, que não conseguirão ser atendidas se não for pelo modelo de dados 

extensível”. O modelo de dados extensível talvez seja a parte mais delicada na 

implementação de SaaS, porque tudo o que é configurável deixa de ser customizado e vai 

gerar metadados, que terão de ser armazenados em um banco de dados. Por causa das 

necessidades dos clientes, a aplicação, além de ter elementos normais, incluindo a 

instalação do banco, tabelas, campos, views, procedures, entre outros elementos, terá 

também que estender e criar recursos que, no modelo tradicional de banco de dados não-

extensível, não seria possível. O desenvolvedor terá que descobrir e implementar meios 

nos quais os clientes possam estender o modelo original de dados para garantir suas 

necessidades, sem afetar o modelo utilizado por outros clientes. 

 Um dos grandes desafios de SaaS é fornecer uma arquitetura que atenda 

necessidades diversificadas do cliente. Por exemplo, um cliente que precisa de um campo 

string e outro de um campo integer, que não tenha no sistema, sendo que nenhum dos dois 

tenha acesso ao campo do outro (CHONG, CARRARO & WOLTER, p. 21, 2006). Um 



 84

 

cliente A pode querer que no catálogo de produtos tenha um campo para identificar a 

categoria para os pertences, e o cliente B quer que haja um código classificatório padrão 

para classificar e agrupar em categorias (figura 26). Vale ressaltar que são dois clientes 

distintos, com problemas distintos, mas tudo deve ser feito em uma só aplicação, em um só 

código. Isso significa não apenas definir os campos das bases de dados, mas também, na 

lógica de negócios, saber a hora e o que mostrar para cada cliente, adaptando a interface do 

usuário de acordo com o que foi solicitado pelo mesmo. Isso significa fazer com que a 

camada de apresentação tenha conhecimento desse fato.  

 

 
 

Figura 26 – Extensões ao modelo de dados (CARRARO, 2007, p. 20) 
 
 Existem várias formas de desenvolver esse serviço, cada uma com suas vantagens e 

desvantagens. A forma mais simples é manter instâncias de bases de dados separadas e as 

customizar normalmente. Outra alternativa é criar os campos que cada cliente quer na 

mesma tabela. E, por último, há formas de fazer com que a base seja compartilhada e cada 

cliente possa criar quantos campos precisar. A figura 27, apresentada abaixo, mostra a 

criação prévia de um determinado número de registros. 

 

 

 
 

 
Figura 27 – Tabela com um conjunto de registros prévios (CHONG, CARRARO & 

WOLTER, 2006, p.13) 
 



 85

 

 A figura 27 mostra uma tabela criada com determinados campos a serem estendidos 

(definidos) pelos clientes. Os registros de vários clientes se misturam numa mesma tabela e 

o campo contendo o “ID” (TenantID) do cliente faz a associação individual. Cada cliente 

pode optar por qualquer campo, desde que o campo tenha o mesmo tipo de dado que o 

cliente pretenda utilizar. No entanto, os clientes podem ter preferências por diferentes tipos 

de dados e uma quantidade de colunas maior que o normal, o que dificulta a utilização 

desta solução. Para tentar amenizar esse problema, os profissionais optam por utilizar tipo 

de dados “string” para os campos customizados, e para a busca do tipo de dado desejado 

utilizam metadados. 

 A extensibilidade dos dados é um recurso do sistema que permite que o cliente 

insira campos customizados, que não fazem parte do sistema e serão válidos apenas para 

este cliente. A solução para o problema citado acima é criar todos os dados no tipo 

“string” para cada campo customizado, utilizar o modelo de “banco de dados 

compartilhado, com esquema compartilhado” junto com metadado para rastrear o tipo de 

dado escolhido pelo cliente.” (CHONG, CARRARO & WOLTER, 2006, p. 22) 

 A figura 28 mostra a implementação dessa extensibilidade, sendo que o exemplo 

representa um inquilino utilizando a extensibilidade da aplicação para acrescentar uma 

caixa de texto chamada “Originating ZIP Code” para entrada de dados no campo (C1).  

 
 

   
 

Figura 28 – Campo customizado em uma página Web, definido pela entrada de uma tabela 
de metadados (CHONG, CARRARO & WOLTER, 2006, p. 22) 

 

 Quando a caixa de texto foi criada o inquilino usou um tipo de validação lógica 

(não identificada) para solicitar que essa caixa de texto contenha um dado do tipo “int”.  

Logo após a implementação, esse campo customizado é definido por um registro na tabela 

de metadados, que adiciona o número ID do inquilino (registro 1017), a classificação 

escolhida pelo inquilino para o campo "Originating ZIP Code" e o tipo de dado que o 

inquilino precisa usar para esse mesmo campo “int”. As definições de todos os campos 

customizados de uma aplicação podem ser verificadas em uma única tabela de metadados 



 86

 

ou utilizar uma tabela para cada campo (CHONG, CARRARO & WOLTER, 2006, p. 22). 

Ou seja, o campo será sempre string e terá outra tabela pra definir o tipo de dados que o 

cliente irá utilizar. Se for um campo “int”, esse será do tipo “string”, porém na tela do 

usuário, só ira aceitar “int”. Na prática, tem várias formas de ser implementado. Vai 

depender da arquitetura, linguagem, entre outros. Uma forma de implementar é colocar 

máscara de edição no campo que só aceita números inteiros se o cliente configurou um 

campo do tipo inteiro. 

 A vantagem de usar tabelas separadas refere-se ao fato de que cada campo 

exclusivo na tabela conterá registros para os inquilinos que usam o campo. Isso vai 

economizar espaço no banco. A desvantagem de fazer uso de tabelas separadas é na 

complexidade de implementação das operações em campos customizados (figura 29). Será 

necessário utilizar comandos para pesquisar todas as definições do campo para um único 

inquilino (CHONG & CARRARO, 2006, p. 23).  

 
.   

 

Figura 29 - Armazenamento de tipo de dados em uma única tabela de metadados e em 
tabelas separadas para cada campo customizado (CHONG, CARRARO & WOLTER, 

2006, p. 23) 
 
 Quando um usuário final inserir valores no campo e salvar o registro, a aplicação 

lança o valor para uma string, antes de criar ou atualizar o registro no banco de dados. E a 

aplicação devolve o registro, compara a tabela de metadado para o tipo de dado a ser 

utilizado e lança o valor no campo customizado com o seu tipo original (CHONG & 

CARRARO, 2006, p. 23). 

 Os tipos de campos pré-alocados abordados são formas simples de oferecer 

extensibilidade aos inquilinos. Porém, elas possuem algumas restrições. O gerenciar tantos 

campos customizados em uma mesma tabela envolve o desenvolvimento de regras de 

negócios, o que pode gerar restrições por parte do cliente, pois com essa quantidade de 

campos definidos para a customização, os clientes podem não gostar da limitação imposta 



 87

 

pelo fornecedor. Além disso, pode haver situações nas quais um campo possa ser mais 

utilizado pelos inquilinos enquanto outros campos ficam vezes sem uso, tornando-os sem 

importância no banco. Uma forma de resolver esse problema é oferecer ao cliente a 

possibilidade de ele próprio estender o modelo de dados de acordo com sua necessidade, e 

armazenar os dados customizados em uma tabela, utilizando metadados para incluir as 

definições e os tipos de dados para cada campo customizado do inquilino. 

 A figura 30 apresenta uma tabela de metadados que contém dados sobre cada 

campo customizado determinado por cada cliente, incluindo nome do campo e tipo. 

Internamente, quando o usuário final inclui um registro em um campo customizado, o 

registro é criado ou atualizado na tabela primária e os valores são atualizados em campos 

pré-definidos, e não para campos customizados. Ao contrário, o sistema cria uma 

referência para o registro e atualiza o campo do ID. Depois uma nova linha é criada na 

tabela de extensão, que contém os seguintes dados sobre o ID do registro com referência à 

tabela primária: ID de extensão acompanhada com a correta definição do campo 

customizado e o valor do campo customizado no registro que foi salvo, lançado em uma 

string (CHONG & CARRARO, 2006, p. 24).   

 
  

 

Figura 30 – Tabela de extensão para definição de campos customizados arbitrariamente 
(CHONG & CARRARO, 2006, p. 24) 

 
 Essa técnica descrita acima é muito útil porque possibilita que cada cliente crie 

quantos campos customizados necessitar e a ideia é fazer com que as extensões (as coluna 

customizáveis) possam ser em número variável. O exemplo da figura 30 mostra apenas 1 

tabela de extensibilidade, mas se o cliente quiser este recurso em várias tabelas, isso 

significa que, para cada tabela onde o cliente possa ter campos variados, terá que usar o 



 88

 

mesmo conceito novamente. Segundo Chong, Carraro & Wolter (2006, p. 25), “assim que 

a ferramenta devolve um campo customizado, a aplicação busca na tabela de extensão, 

seleciona todas as linhas associadas ao ID do campo e devolve um valor para cada campo 

customizado”. O nome dos campos variáveis deixa de ser de fato uma coluna. Para isso 

deve-se criar uma tabela separada e guardar os valores variados. E para associar o valor ao 

campo customizado com o tipo de dado correspondente, a aplicação busca informações 

desse campo nos metadados, utilizando o ID da extensão correspondente com cada valor 

da tabela extensão.  

Esse tipo de técnica faz com que o banco seja dinamicamente extensível, além de 

usufruir do custo/beneficio ao utilizar o banco de dados compartilhado. Na tabela superior 

(data tables) é criado um campo com identificação do registro (o “id”) ou uma chave 

primária. Perceba que o registro nº 564 tem dois valores customizados na tabela extensão 

(o cliente é ouro e a validade é uma data), já o cliente seguinte (registro nº 777) não tem 

valor customizado nenhum. Isso significa que não há limite e o cliente pode utilizar 

quantos campos customizados necessitar, até mesmo porque agora os dados não são 

gerados de forma esparsa, e a tabela complementar (extension table) só guarda os valores 

que existem (na tabela não existe mais o campo “null”). 

  Porém, a maior desvantagem desta técnica refere-se ao desenvolvimento das 

funções do banco, pois toda vez que tiver que acessar esses campos, ao invés de usar uma 

tabela, serão necessárias duas. No entanto, o banco de dados facilmente máscara isso, basta 

trabalhar com views12, mas, certamente vai fazer com que a administração, a complexidade 

dos índices, a busca, a atualização no banco de dados possa ser mais complexo e, na 

maioria das vezes, é necessário utilizar indexação, consulta e atualização de registro.  

 Assim, a forma mais simples de estender um modelo é permitir que o inquilino 

acrescente tabelas diretamente. Essa técnica é mais apropriada para o tipo de modelo com 

bancos e esquemas separados, porque cada cliente tem um conjunto de tabelas separadas 

que podem ser modificadas independentemente do modelo de outros clientes. Dos três 

modelos de extensibilidade, este é o mais simples por não necessitar de rastreamento de 

extensões de dados separado. Porém, pode ser o tipo mais complicado para implementar, 

porque oferece ao inquilino a possibilidade de variar o número de colunas em uma tabela. 

Segundo Chong, Carraro & Wolter (2006, p. 26) esse tipo permite também que o inquilino 

                                                           
12 Uma View é um objeto que pertence a um banco de dados, definida baseada em declarações SELECT´s, 
retornando uma determinada visualização de dados de uma ou mais tabelas. 



 89

 

modifique o padrão de colunas customizadas, permitindo escrever códigos para a 

aplicação, sendo essa capaz de considerar números de campos em uma tabela. A figura 31 

apresenta o esquema desta técnica. 

.   
  

 

Figura 31 – Linhas customizadas adicionadas sem prejudicar o modelo de outros inquilinos 
(CHONG, CARRARO & WOLTER, 2006, p. 25) 

 
  O código criado para o modelo de dados precisa ser compatível com o mecanismo 

de integração de campos acrescentados às funcionalidades de uma aplicação. Porém, 

qualquer codificação do campo customizado requer modificação associada na lógica de 

negócios e na lógica de apresentação.  A seção 2.15.9 apresenta a arquitetura de SaaS em 

alto nível. 

 
2.15.9 ARQUITETURA DE ALTO NÍVEL 
 
A estrutura da arquitetura dos aplicativos SaaS é muito parecida à de outros softwares que 

são criados com a utilização de princípios de projeto orientado a serviços. A figura 32 

demonstra o contexto técnico de software como um serviço. A maior parte dos 

componentes representados na figura possivelmente não são nenhuma novidade para os 

profissionais de TI. A figura 32 mostra que o acesso dos elementos do cliente pode ser 

feito por meio do navegador que roda no PC ou o dispositivo de smart cliente. Os outros 

componentes que aparecem na figura são elementos que terão que estar disponíveis o 

tempo todo na aplicação. Os serviços de processo na figura mostra a interface que os 

clientes ou a camada de apresentação da Internet podem chamar e dar início a um fluxo de 

trabalho síncrono ou uma transação de longa duração que chamará outros serviços de 

negócios, o que interage com os armazenamentos de dados respectivos para ler e gravar 

dados de negócios (CHONG & CARRARO, 2006, p. 13). Ou seja, os serviços de processo 

demonstram o ambiente de interface responsável em interagir com a camada de dados para 

interpretar e salvar os dados. 

 



 90

 

 
  

Figura 32 - Arquitetura Alto Nível (CHONG & CARRARO, 2006, p. 19) 

 
 O conjunto de serviços de segurança é utilizado para controlar o serviço de 

software do usuário e do fornecedor. Este serviço deve estar separado do restante da 

aplicação. O componente mais diferente em relação à arquitetura de software tradicional é 

a adição de serviços de metadados, que são responsáveis pelo gerenciamento da 

configuração do aplicativo para inquilinos específicos. De acordo com Chong & Carraro 

(2006, p. 14), “os serviços e os smart client interagem com os serviços de metadados para 

restaurar informações que descrevem configurações e extensões que são exclusivas de cada 

cliente”. Os serviços e os clientes inteligentes (smart client) interagem com os serviços de 

metadados para recuperar informações que descrevem configurações e extensões que são 

específicas de cada inquilino. A seção 2.15.10 comenta sobre os serviços de metadados na 

utilização do SaaS. 

 
2.15.10 SERVIÇOS DE METADADOS 
 
O serviço utilizado para personalizar e configurar o software refere-se ao recurso de 

metadados, que são os dados que descrevem a aplicação. Segundo Chong & Carraro (2006, 

p. 15) os clientes podem fazer modificações na configuração de três áreas amplas: interface 

do usuário e identificação de marca, fluxo de trabalho e regras de negócios, extensões para 

o modelo de dados e controle do acesso. 



 91

 

 A alteração na interface do usuário ou na identificação da marca é necessária para 

diferenciar a marca corporativa do cliente. O fornecedor deve estar atento em desenvolver 

recursos que possibilitem aos usuários alterar logomarcas, gráficos, cores, fontes, entre 

outros. A modificação no fluxo de trabalho e regras de negócios pode ser útil para os 

clientes com potencialidade maior de mercado. O software deve estar apto a configurar a 

forma como o fluxo de trabalho do aplicativo interage com os processos de negócios do 

cliente. Ou seja, deve ter a capacidade de adequar as diferenças do fluxo de trabalho. O 

modelo de dados extensível oferece aos clientes a possibilidade de obter um aplicativo 

mais flexível à sua realidade. E no controle de acesso geralmente os clientes são os 

responsáveis em criar e administrar o acesso das contas dos usuários  

 Para oferecer ao cliente meios para configurar o software, todas as opções de 

configuração são organizadas em pastas de configuração hierárquicas chamadas de escopo. 

Cada uma das configurações contém opções para fazer alterações em cada uma das quatro 

áreas citadas acima. Cada inquilino tem um escopo de grau superior que pode configurar e 

pode instituir um ou mais escopos abaixo do nível superior em uma hierarquia arbitrária 

(CHONG & CARRARO, 2006, p. 18). De acordo com Chong & Carraro (2006, p. 19) 

“uma estratégia de relacionamento determina como e se os nós filhos herdam e substituem 

as definições de configuração dos nós pais”. Ou seja, um inquilino que adquire uma 

aplicação pode necessitar de configurações distintas. Ao mesmo tempo, todas essas 

funcionalidades devem seguir o padrão do seu negócio, além de permitir modificar 

algumas funcionalidades do aplicativo individualmente. Podem também existir, dentro de 

cada grupo organizacional, suas próprias necessidades de modificação particular. E para 

cada grupo dentro da organização, o cliente pode indicar um escopo que ofereça distinto 

acesso aos tipos de configuração, que o grupo possa determinar ou modificar. 

 Chong & Carraro (2006, p. 16), comenta que “desenvolver a interface de 

configuração é tão importante quanto criar a interface do usuário final”. Os clientes vão 

poder modificar a aplicação facilmente através de opções acessíveis, sem sobrecarregar as 

informações.  

 A figura 33 mostra a quantidade de serviços que pode ser necessário modificar para 

atender a vontade do cliente, como o formato visual da interface do usuário/marca, os 

workflow, modelo de dados, regras de negócios, extensões específicas a certos domínios, 

descrição do aplicativo, entre outros. Isso pode ser oferecido para cada cliente sem 

modificar a lógica de negócio. As regras de negócios e os modelos de dados podem 



 92

 

também sofrer alteração de um cliente para outro e, mesmo assim, pode-se trabalhar com 

apenas uma aplicação. 

 
 

 
 

Figura 33 – Serviços de Metadados (CARRARO & CHONG, 2006, on-line) 
 
 

 Do ponto de vista do escopo dos metadados, a orientação a objetos é uma ótima 

referência para raciocinar na hora de os definirem/construírem. Todas as informações que 

são geradas a mais, ou seja, que não são comuns para todos os usuários, terão que fazer 

parte dos metadados. Este é o meio para transformar a customização em configuração. Na 

seção posterior será informado quais diretrizes podem ajudar os inquilinos a manter seus 

dados protegidos. A seção seguinte 2.15.11 apresenta os serviços necessários para a 

segurança em SaaS. 

 
2.15.11 SERVIÇOS DE SEGURANÇA 
 
Segundo Lipner & Howard (2005, p. 1), “a segurança é um elemento essencial para 

fornecedores de software, e é influenciada pela necessidade de proteger infra-estruturas 

críticas, de criar e preservar uma confiança geral no ambiente de computação”. Um dos 

desafios para os fornecedores de SaaS é a criação de sistemas mais seguros, que necessite 

de menos atualizações e permita um gerenciamento de segurança com menos problemas. A 

seguir serão apresentados basicamente os elementos necessários para o serviço de 

segurança.  

2.15.11.1 AUTENTICAÇÃO 
 
 No modelo SaaS geralmente os fornecedores dão a possibilidade para cada cliente 

administrar suas próprias contas. Por isto, o cliente torna-se o responsável pela criação dos 



 93

 

login de seus usuários. Porém, o fornecedor continua tendo que autenticar essas contas. 

Assim, para administrar esse modelo de autenticação, os fornecedores usam dois tipos: 

serviço de autenticação: centralizado e descentralizado. Para o tipo centralizado, o 

fornecedor administra o banco de dados principal que serve a todos os inquilinos do 

sistema. Desta forma, o responsável por cada cliente tem a permissão de gerenciamento 

total das contas dos inquilinos no diretório de contas do usuário. De acordo com Chong & 

Carraro (2006, p. 16), “o usuário que assina o aplicativo fornece as suas credenciais para o 

sistema, o qual autentica as credenciais no diretório central e concede acesso ao usuário se 

as credenciais forem válidas”. O único problema nesse tipo de autenticação é que é mais 

difícil desenvolver um login único, em que o sistema aceita as credenciais que o usuário já 

inseriu para utilizar a sua rede corporativa. E se o login não for único, os usuários podem 

receber mensagens indesejadas.  

 No tipo de autenticação descentralizado, o cliente desenvolve um serviço de 

federação que faz interface com o próprio serviço de diretório de usuário do inquilino. 

Quando um usuário final tentar acessar o aplicativo, o serviço de federação autentica o 

usuário localmente e emite um token que o sistema de autenticação do provedor de SaaS 

aceita e permite ao usuário o acesso ao aplicativo (CHONG & CARRARO, 2006, p. 16). 

 O tipo de autenticação descentralizada é o modelo ideal se houver a necessidade de 

se utilizar login único, porque a autenticação é administrada em outro ângulo e não exige 

que o usuário digite um conjunto específico de credenciais. Percebe-se que a abordagem 

descentralizada é mais complicada para desenvolver, mas o fornecedor de SaaS deve estar 

preparado para as exigências dos clientes, no sentido de possibilitar a autenticação 

individual a cada um dos milhares de serviços do conjunto de inquilinos. Os fornecedores 

de SaaS, geralmente utilizam o tipo de autenticação centralizada para autenticar e 

administrar usuários de clientes menores e o tipo descentralizado para empresas maiores 

que, certamente, vão par pelo custo de ter um login único. 

 Para o serviço de autenticação haverá sempre um par de chaves com nome e senha 

de usuário; o que pode variar é a forma de autenticação. Se o usuário estiver em uma rede 

controlada, a comunicação pode ser feita por um domínio de uma rede local, mas se o 

acesso for pela Web, é necessário um sistema independente e, para se garantir uma 

segurança com um certo nível, tem-se que passar a usar criptografias e certificados digitais 

sobre o par de chaves. Sem esses serviços é impossível  passar em auditorias de segurança.  



 94

 

2.15.11.2 AUTORIZAÇÃO 
 
 A autorização dos dados é o serviço responsável por administrar quais partes da 

aplicação será liberada para o usuário. Essa parte terá que ser baseada em regras que 

poderão, eventualmente, envolver alguns metadados. Geralmente o acesso aos recursos de 

negócios de SaaS é administrado por meio de funções que direcionam para locais de 

trabalho exclusivas dentro da organização, e para cada função são cedidas as permissões 

necessárias aos usuários. 

 A figura 34 mostra que as funções são administradas dentro do próprio SaaS, 

podendo conter contas de usuários particulares e também grupos de usuários. As contas de 

usuários particulares e os grupos podem ter atribuições de várias funções, de acordo com 

as necessidades. Para determinar quais partes da aplicação estão disponíveis nas bases do 

usuário, é recorrente o uso da tabela chamada Role (papel). Ela pode ser usada 

individualmente, mas fará mais sentido se estiver usando no modelo de objetos uma 

referência, uma hierarquia, e, claro, pode ser personalizado. Cada um dos inquilinos vai 

poder customizar o software para que essa parte funcione como ele quer e não como o 

fornecedor acha que deve ser. Isto porque cada cliente fica responsável em criar as contas 

pessoais para os usuários finais e indicar quais funcionalidades estarão disponíveis para o 

acesso do usuário. Para oferecer a configuração de controle de acesso aos clientes, “deve 

organizar as opções em unidades de configuração hierárquicas denominadas escopos“ 

(CHONG & CARRARO, 2006, p. 14).  

 
 

 

 
Figura 34 – Controle de acesso (CHONG & CARRARO, 2006, p. 17) 

 
 De acordo com as funções dadas a um determinado usuário, ele recebe as 

permissões necessárias para executar operações ou ações específicas. Por exemplo, uma 

aplicação de compras poderá autorizar usuários a criar, incluir, admitir e recusar pedidos. 



 95

 

A mesma permissão poderá ser atribuída a uma ou várias funções, conforme necessário. 

Ou seja, todo usuário terá um grupo de permissões que lhe são específicas. 

 Assim, a aplicação deve ser desenvolvida com funcionalidades que possam incluir 

um grupo de funções, permissões e regras para todos os inquilinos e que os mesmos 

possam configurar essas regras e criar mais regras por meio da interface do usuário. 

 

2.15.11.3 AUDITABILIDADE 
 
 Na auditabilidade da aplicação, devem ser implementadas as ocorrências de eventos 

nas aplicações. Informações do tipo: qual o primeiro e último acesso do usuário, tempo de 

permanência, quais informações serão disponibilizadas para o cliente. Pode, inclusive, ser 

cobrado de forma diferenciada, mas a aplicação tem que ter esta capacidade para o 

assinante.   

 Os metadados fazem a associação dos dados do banco com cada inquilino, e a 

segurança desse banco de dados evita que qualquer inquilino, acidentalmente, acesse os 

dados de outro. O privilégio e as restrições de acessibilidade de cada usuário são 

gerenciados com o uso de políticas de segurança, configuradas para cada inquilino. A 

seção 2.15.12 explica os tipos de acesso seguro aos dados. 

 
2.15.12 SEGURANÇA DOS DADOS   
 

No modelo SaaS é necessário que o fornecedor utilize os mais sofisticados meios de defesa 

para proteger os dados de possíveis ataques e perdas. Para tanto, deve-se testar várias 

circunstâncias de possíveis ataques contra o servidor e aprimorar continuamente o sistema 

de defesa.  

 O modelo de segurança envolve quatro padrões que são utilizados para oferecer 

serviços apropriados de segurança, tais como: filtragem, permissões, conexões de banco de 

dados confiáveis e criptografia (CHONG & CARRARO, 2006, p. 9). Na filtragem é 

utilizada uma camada intermediária entre o cliente e o banco de dados para separar os 

dados de determinado inquilino e apresentá-los em sua base, como se não tivesse dados de 

outros inquilinos na mesma base. Na permissão é utilizada uma lista para controlar o 

acesso e determinar quais funcionalidades os usuários poderão acessar. A criptografia 

protege todos os dados sigilosos do cliente, a fim de impedir que usuários não autorizados 

tenham acesso a esses dados.  



 96

 

 Para garantir o acesso seguro aos dados armazenados em um ambiente com vários 

inquilinos, os profissionais normalmente criam três tipos de funções: a personificação, 

subsistema confiável e o modelo híbrido.  

O modelo da personificação é desenvolvido para que o banco seja configurado e possa 

permitir que inquilinos diferentes tenham acesso a diferentes recursos como: tabelas, 

views, procedures e outros elementos referentes à base de dados (figura 35). Esse tipo de 

acesso consiste basicamente na ação de um usuário se passar por outro. Nesse caso, a 

aplicação que precisa acessar o banco de dados deve fornecer as credenciais para poder ter 

acesso às tabelas, views, etc. Assim, ao fornecer as credenciais de um usuário do banco de 

dados, a aplicação se passa por ele, tendo permissão para acessar no banco tudo aquilo que 

tal usuário tem direito. No entanto, quem se responsabiliza por identificar e autenticar os 

usuários é um mecanismo de autenticação externa. Existe um tipo de serviço de segurança 

chamado kerberos que é utilizado para que, quando existir uma conexão no processo da 

aplicação ao banco de dados, a chamada venha em nome do inquilino que a solicitou. O 

Kerberos é utilizado, por exemplo, em domínios windows para autenticar os usuários. Toda 

vez que o usuário logar num computador em uma rede windows, esse computador repassa 

a operação de autenticação ao controlador de domínio, que possui um servidor Kerberos 

em execução e dá a resposta em relação a se o acesso pode ser feito ou não. Ou seja, não é 

a máquina acessada a responsável final pela autenticação e sim o servidor Kerberos da 

rede. 

  

 

Figura 35 – Conexão de banco de dados utilizando personificação (CHONG, CARRARO 
& CHONG, 2006, p. 10) 
 



 97

 

 Já na figura 36 é apresentado um tipo de serviço mais simples, onde pode ser 

observado que a aplicação sempre vai se conectar à base de dados por meio do seu próprio 

artifício de identificação, sem se importar com a identidade do usuário, pois o servidor 

garantirá o acesso da aplicação pelos objetos do banco de dados que poderão ser 

entendidos e manejados pela mesma, e qualquer serviço de segurança adicional será 

desenvolvido utilizando-se a aplicação para evitar que usuários finais tenham acesso a 

qualquer elemento do banco de dados não autorizado para o mesmo. Assim, o processo de 

identificação é responsabilidade da aplicação, o que não permite a utilização de um serviço 

como o Kerberos. Portanto, ficará com a aplicação toda a complexidade de controlar quem 

pode e quem não pode acessá-la e a quais tabelas, views. Os usuários da aplicação podem 

visualizar as informações (ainda que o banco de dados ofereça esse acesso). Portanto, se 

voltarmos ao exemplo da rede windows, esse processo é semelhante ao que é feito quando 

um usuário tenta se logar, mas localmente, dispensando a autenticação do domínio. Nesse 

caso, a máquina precisa manter o seu próprio cadastro de usuários e ter, nela própria, todas 

as permissões de acesso desses usuários e toma para si essa responsabilidade de identificar, 

autenticar e autorizar os usuários. Esse tipo de gerenciamento de segurança elimina a 

obrigação de se configurar o acesso ao banco de dados por meio do usuário, mas delega a 

segurança do banco de dados aos clientes. Nesse modelo, o fator “usuário” é diferenciado 

em relação ao modelo tradicional. Por causa da diferença entre um usuário e um inquilino, 

este modelo torna-se mais complexo em seu desenvolvimento. 

 
 

 
 

Figura 36 – Conexão a um banco de dados por meio de subsistema confiável (CHONG, 
CARRARO & WOLTER, 2006, p. 11) 
 
 Neste caso, o cliente inquilino utiliza a aplicação para acessar seu próprio ambiente 

isolado e se torna o responsável pela liberação do acesso dos usuários finais. A figura 37 

apresenta o tipo de acesso aos dados, um recurso chamado de modelo híbrido. Esse tipo de 



 98

 

acesso incorpora as características de conexão de banco de dados utilizando personificação 

(figura 35) e conexão a um banco de dados por meio de subsistema confiável (figura 36) 

para aproveitar a estrutura de segurança original que é utilizada em isolamento lógico dos 

dados do inquilino, sem necessidade de se criar outro serviço de segurança mais complexo. 

A figura 37 mostra que a tarefa de identificação é partilhada entre a aplicação e o serviço 

externo de autenticação. Quando o usuário acessa a aplicação, envia suas credencias ao 

servidor externo de autenticação. Se tudo estiver correto, ele terá permitido o acesso à 

aplicação e, a partir daí, todos os acessos que seriam necessários ao banco de dados serão 

feitos por um usuário diferente (na figura o usuário que acessa a aplicação é diferente do 

usuário que acessou o banco), mas com a aplicação implementando um subsistema de 

segurança, controlando aquilo que cada usuário pode ver, alterar, etc. Esse usuário que é 

utilizado para acessar o banco de dados, poderia, por exemplo, ter permissões totais, 

podendo acessar todas as tabelas, consultas e outros. Fica a cargo da aplicação controlar 

quais de seus módulos um usuário pode manipular e quais tabelas e consultas essas áreas 

da aplicação podem manipular quando a aplicação estiver sendo utilizada por determinado 

usuário. Ex.: um usuário que for administrador da aplicação poderá ler, gravar e excluir 

registros numa tabela de folha de pagamento; assim, a área do sistema que manipula essas 

tabelas só deverá oferecer essas funcionalidades para o administrador. Os usuários normais 

podem consultar apenas o seu próprio contracheque, sendo impedidos pela aplicação de 

tentar fazer quaisquer outras operações nessa mesma tabela. 

 
  

 

Figura 37 – Modelo híbrido - conexão a um banco de dados utilizando combinação de 
personificação e do acesso confiável por meio de subsistemas (CHONG, CARRARO & 

WOLTER, 2006, p. 11) 
 



 99

 

 Segundo Chong, Carraro & Wolter (2006, p. 12), “esse tipo de serviço de segurança 

utiliza uma lista de controle de acesso, normalmente chamado de ACLs (Acess Control 

List) e para cada cliente é criada uma conta para acessar o banco de dados”. Esse serviço é 

importante para garantir que essas contas tenham acesso aos objetos do banco de dados à 

disposição do cliente. Quando qualquer usuário faz uma ação na aplicação, acontece uma 

chamada ao banco de dados e todas as associações que a aplicação faz são relacionadas 

com a conta do inquilino, ao invés de utilizar o usuário final para identificação.  

Há várias maneiras de se obter resultado por meio da personalização com o sistema 

de credenciamento kerberos. Pode-se também utilizar um token de segurança que responda 

com um conjunto de logins criptografados e instituído pelo inquilino, para que possa ser 

submetido ao banco de dados pelo processo da aplicação, sendo que o servidor de dados 

não diferencia solicitações de usuários associados a um mesmo cliente, garantindo assim 

acesso a todas as solicitações. Em conjunto com a aplicação, o algoritmo de segurança 

previne que usuários finais tenham acesso a informações que não são permitidas (CHONG, 

CARRARO & WOLTER, 2006, p. 11). Uma funcionalidade da aplicação envia a consulta 

ao banco utilizando o recurso de segurança do inquilino. Então, ao invés de devolver os 

registros que atendem a essa solicitação, a consulta retorna somente os resultados 

associados das tabelas que o inquilino pode acessar. Mas, se a regra para o usuário final 

permitir apenas o acesso a campos de clientes de determinado local, a aplicação necessitará 

capturar os resultados da consulta e somente apresentá-los ao usuário que tenha o direito de 

acesso a essas informações.    

 Para a criptografia dos dados, existem dois tipos: simétrica e assimétrica. Para o 

tipo simétrica, é necessário criar uma chave para criptografar e descriptografar os dados, 

sendo que para descriptografar pode ser utilizada a mesma chave. No tipo assimétrica é 

necessário criar duas chaves, uma pública e outra privada. Essas chaves dependem uma da 

outra para criptografar e descriptografar os dados. Normalmente, no tipo de criptografia 

assimétrica, a chave pública é distribuída para todos os grupos interessados em se 

comunicar com o possuidor da chave, mas a chave privada é mantida sempre em 

segurança. É importante ressaltar que no tipo de criptografia simétrica, o risco de a chave 

ser interceptada é maior, porque a chave tem que ser enviada para descriptografar os dados. 

Porém, embora a criptografia assimétrica seja mais segura para os dados, a mesma 

consome muito mais processamento se comparada com a simétrica.  



 100 

 

No entanto, ao se trabalhar com o modelo SaaS, esse tipo de processamento de 

segurança com criptografia simétrica e assimétrica é pesado e inviável, podendo prejudicar 

a performance da aplicação, porque cada dado armazenado será criptografado. Assim, o 

recurso mais viável é o uso de um sistema de key wrapping. Segundo Chong, Carraro & 

Wolter (2006, p. 13), esse tipo de serviço “utiliza três chaves para cada cliente como parte 

do processo de provisionamento: uma chave simétrica e um par de chaves assimétrico”. A 

chave mais segura é utilizada para a criptografia dos dados do inquilino, e para incluir mais 

uma camada de segurança aos dados, utiliza-se um par de chaves pública/privada para 

criptografar e descriptografar a chave simétrica para evitar que os dados sejam acessados 

por intrusos. A aplicação utiliza a personificação para liberar o acesso aos dados, 

verificando as regras de segurança do inquilino, o que garante o acesso da aplicação à 

chave privada. Desta forma, a aplicação pode utilizar a chave privada do inquilino para 

descriptografar a chave simétrica e, consequentemente, poderá ter acesso aos dados. Esse 

tipo de defesa é muito importante para que dados de um inquilino não sejam vistos por 

usuários de outros inquilinos. Outro fator interessante, é que se o servidor for invadido por 

algum vírus e criar um registro errado para ser entregue ao inquilino, as informações que 

foram criptografadas do registro não seriam úteis porque não têm a chave assimétrica do 

inquilino. 

A criptografia neste modelo é muito importante, pois tratam-se de dados sigilosos 

em um ambiente que compartilha um conjunto de tabelas e registros no mesmo banco de 

dados para vários inquilinos. Como não é possível indexar colunas criptografadas, tem-se 

que escolher quais colunas de determinadas tabelas serão criptografadas. Por isso, antes de 

desenvolver o modelo de dados, é viável saber quais dados são mais importantes para o 

cliente para facilitar quando for implementar o serviço de segurança da aplicação.  A 

seguir serão apresentados os materiais e métodos utilizados para o desenvolvimento do 

trabalho.  

 
 
 
 
 
 
 
 
 
 



 

 101 

 

 
 
 
 
 
 
 
 
 
3 MATERIAIS E MÉTODOS  
 
Nesta seção serão apresentados os materiais e métodos utilizados para o desenvolvimento 

deste trabalho. 
. 

3.1 LOCAL E PERÍODO 
 
Este trabalho teve seu início no mês de março de 2009 e se prolongou até o final de 

novembro de 2009. Parte do desenvolvimento do trabalho foi feito na Fábrica de Software 

do CEULP/ULBRA e outra parte em locais diversos, na cidade de Palmas – Tocantins. 
 
3.2 MATERIAIS 
 
Para atingir o objetivo deste trabalho utilizou-se de ferramentas como: Vision 2003 para a 

modelagem dos diagramas; Erwin 7.1 para o desenvolvimento do modelo ER; SQL Server 

2005 para mostrar como é tratada a escalabilidade utilizando replicação dos dados. 

. 
3.3 MÉTODOS 
 
Para o desenvolvimento do projeto de TCC I foram realizadas pesquisas bibliográficas em 

livros, artigos e publicações, materiais em meios eletrônicos, sites, dicionário, fóruns de 

discussões de assuntos relacionados a SaaS, conversas e trocas de e-mails com 

profissionais especialistas em SaaS. O trabalho foi dividido em etapas. Inicialmente foram 

feitos estudos sobre SaaS para compreender melhor a definição do modelo de distribuição. 

Em seguida foi feita descrição sobre a visão técnica simplificada de SaaS. Depois foi 

explicado sobre os aspectos econômico-financeiros e, por fim, foram apresentados os 

aspectos técnicos de SaaS. Em cada etapa foram redigidas as seções do trabalho baseados 

nos conhecimentos adquiridos.  

 Posteriormente, para desenvolver o TCC II, foram feitas várias entrevistas com 

profissionais da área de SaaS, a fim de buscar informações mais técnicas para definição 

dos atores e requisitos do sistema. Após isto, iniciou-se o desenvolvimento da modelagem 



 102 

 

incluindo, atores, diagrama de casos de uso, casos de uso expandido, diagramas de 

seqüência, diagrama de classes e modelo ER. Além disso, foram feitas várias pesquisas 

sobre escalabilidade e escolheu-se uma delas para exemplificar como é feita a replicação 

de um banco de dados no ambiente SQL Server 2005. Também foram abordadas algumas 

questões de segurança envolvidos em sistemas SaaS.  

A próxima seção apresenta os resultados e a discussão sobre o estudo, descrevendo 

o escopo do projeto, modelagem e conclusões obtidas no trabalho. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



 
 103 

 

 
 
 
 
 
 
 
 
 
4 RESULTADOS E DISCUSSÃO 
 

Na primeira parte deste trabalho foi desenvolvida a revisão de literatura sobre o tema e, 

através de várias pesquisas realizadas, percebe-se que o objetivo maior do modelo de 

negócios SaaS é a distribuição de software em larga escala. Já nesta fase, iniciou-se a etapa 

de desenvolvimento da modelagem de uma aplicação de gerenciamento de aplicações 

SaaS, que terá o objetivo de gerenciar outros sistemas SaaS, além  de oferecer serviços 

diretamente aos fornecedores de aplicações SaaS, tais como: gerenciamento de usuários, 

controle de acesso, bem como gerenciamento de contratos, dentre outros.  

 Para desenvolver a modelagem do gerenciador de aplicações SaaS, foi necessário 

identificar os atores envolvidos nas atividades. Para isto, foram realizadas diversas 

entrevistas com profissionais que estudam e acompanham o crescimento de SaaS. Feitas 

essas entrevistas, foram identificados os principais requisitos, assim como foram 

identificados os atores envolvidos no sistema. Em seguida, foi desenvolvida uma tabela 

descrevendo todos os atores do sistema, bem como um diagrama de casos de uso para 

representar o modelo do negócio e relacionar os atores com os requisitos identificados. 

Posteriormente, foram desenvolvidos os casos de uso expandido para encontrar as 

operações do sistema e descrever a sequência de operações que poderão ser executadas. 

Depois disso, elaborou-se o diagrama de classes para definir o comportamento dos seus 

objetos por meio de métodos e atributos. Na sequência, foi desenvolvido modelo ER para 

representar a estrutura de dados do mundo real dos negócios. Também foi feito um 

exemplo de como implementar a escalabilidade, utilizando o tipo replicação de dados e foi 

comentado sobre a segurança de dados para software como serviço para garantir mais 

segurança nos sistemas. Por fim, foram propostos alguns trabalhos futuros para alunos 

interessados em serviços que envolvem o tema SaaS.   

 



 104 

 

4.1 ESCOPO DO SISTEMA DE GERENCIAMENTO SAAS 
 

O objetivo do gerenciador SaaS é o de administrar os recursos comuns a todas as 

aplicações SaaS no controle de usuários, acesso, contratos, logs, além de controle de 

sistemas e outros. O gerenciamento de usuário será responsável por controlar todos os 

fornecedores, inquilinos e clientes que venham a utilizar os sistemas do gerenciador. O 

gerenciamento de acesso deverá controlar todos os tipos de acesso aos aplicativos 

hospedados no gerenciador SaaS. O controle de contrato gerenciará os acordos feitos entre 

os fornecedores SaaS e os fornecedores das aplicações e entre os fornecedores das 

aplicações e seus inquilinos. Nesta etapa, será cobrada uma taxa de assinatura do contrato, 

de acordo com a regra de negócio associada ao contrato, pois as taxas podem variar de 

acordo com o uso. O controle do uso do sistema servirá para configurar o tipo de log que 

será monitorado no sistema do inquilino. O controle de sistema é uma funcionalidade para 

gerenciar todos os sistemas cadastrados no gerenciador, tais como dados sobre tipo de 

sistema e inquilino, dentre outros.  

Esta modelagem engloba um sistema que gerencia aplicações SaaS, a fim de obter 

uma camada de gerenciamento. Isto porque a empresa fornecedora pode disponibilizar 

vários sistemas e, caso seja necessário incluir outros sistemas no modelo de negócios, a 

estrutura será totalmente aproveitada, sem a necessidade de nenhuma alteração. O objetivo 

é ter uma base de dados genérica, a fim de gerenciar sistemas e fornecedores para qualquer 

aplicativo. Para fazer a comunicação do gerenciador com as aplicações, será necessário 

criar uma camada de serviço responsável pela integração das funcionalidades do sistema de 

gerenciamento SaaS com outros sistemas, o que pode ser desenvolvido utilizando 

WebServices, interfaces REST(Representational State Transfer), SOAP(Simple Object 

Access Protocol), EAI (Enterprise Application Integration) dentre outros. A seguir,  

apresenta-se a arquitetura base do Gerenciador de SaaS. 



 105 

 

 

Figura 38 - Arquitetura do Gerenciador SaaS 

 

 A figura 38 representa o sistema gerenciador de aplicativos SaaS. Como pode ser 

observado, existem os consumidores de softwares que são os inquilinos conectados na 

Internet. Vale ressaltar que é necessário que haja um protocolo de distribuição que, no 

caso, é a própria “Internet”. No sistema, esses inquilinos estão associados a determinado 

fornecedor de software, cujo aplicativo está integrado com o gerenciador por meio de 

WebService ou outro tipo de integração de aplicativos. O fornecedor SaaS oferece aos 

fornecedores da aplicação uma solução para terceirizar a parte de gerenciamento de SaaS.  

A ideia é gerenciar o serviço do software para o fornecedor e cobrar do consumidor 

(inquilino) o seu uso. Os dados dos inquilinos podem estar numa base de dados separada 

ou compartilhada. Assim sendo, dependerá da escolha do cliente na assinatura do contrato. 

Caso o inquilino escolha a base de dados separada, irá pagar mais por que requer maior 

número de recursos tecnológicos, podendo oferecer maior segurança ao inquilino. A 

seguir,  a seção 4.2 apresenta  os profissionais e colegas colaboradores e elementos que 

recursaram a coleta de requisitos. 

 

 

 



 106 

 

4.2 ENTREVISTAS UTILIZADAS PARA IDENTIFICAR OS REQUISITOS  
 

Para a coleta dos requisitos, foram entrevistados profissionais utilizando o skype, chats, e-
mails, entre outros. Abaixo, segue a lista de alguns profissionais entrevistados. 

 

• Seis analistas formados que já tiveram experiência com SaaS: 
 
• Com o profissional Anderson Luna – Engenheiro de Infraestrutura  

(http://www.Webb.com.br>), obteve-se conhecimentos na área de segurança de 
sistemas, onde percebeu-se que para garantir segurança a um sistema SaaS, 
necessita-se conhecimentos em várias áreas, pois é necessário desenvolver 
segurança em cada parte do sistema.  
 

• Com o profissional Denis Courcy  – Administrador de Banco de Dados 
(www.capemi.com.br), obteve-se conhecimentos na área de banco de dados, na parte 
de normalização de tabelas, controle de acesso de usuários, logs de usuários, 
contratos e idiomas etc. 
 

• Com o profissional Luciano Conde – Arquiteto de Soluções da Microsoft 
(http://blogs.msdn.com/conde/), obteve-se conhecimentos na arquitetura geral de SaaS, 
conceitos, novas tecnologias etc. 
 

• Com o profissional Roberto Mayer  - Diretor da MBI (Empresa de Consultoria de 
de recursos de Tecnologia da Informação), http://www.linkedin.com/in/rocmayer, obteve-
se os principais conceitos na área de SaaS, cobrança, segurança em geral, 
particionamento, exemplos de sistemas existentes e tendência de mercado etc. 
 

• Com o profissional Raul Wazlawick –  Professor do Departamento de Informática e 
Estatística da Universidade Federal de Santa Catarina 
(http://www.inf.ufsc.br/~raul/), obteve-se conhecimentos na área de modelagem para 
desenvolver o diagrama de caso de uso, caso de uso expandido, sequência e classes.   

 
• Com o profissional Vitor Ciaramella - Arquiteto de Software 

(www.vitorciaramella.com/Curriculo_Academico_Vitor_Ciaramella.doc),*obteve-se 
conhecimentos de padrões de projeto e modelagem de sistemas SaaS. 

 
 
• Tres alunos com trabalhos concluídos/andamento relacionados à SaaS: 

• Carlos Colangelo – Formando do Centro Universitário FEEVALE - Novo 

Hamburgo – RS. 

Título  de TCC: Framework para comparação de modelos Software as a Service e 

On-Premises Software, ), houve troca de conhecimentos onde pode-se entender 

melhor a diferença de software On-Premises e SaaS. 



 107 

 

• Carla Berlamino – Formanda  da Universidade do Estado de Santa Catarina-

UDESC – Joinvile – Santa Catarina. 

Título de  TCC:  Modelar um sistema de SaaS (Software como um Serviço) para 

atividades de laboratório de ensino de processamento de imagens. A aluna estava 

na fase inicial e não havia obtido nenhum resultado. 

• Marcelo Lins Baia Solari –  Mestre pela Universidade de Brasília Faculdade de 

Tecnologia Departamento de Engenharia Elétrica  - Brasilia – DF. 

Título de Dissertação:  Análise da disponibilização de arquitetura de software como 

serviço (SaaS) - Através de Aliança Estratégica: Um estudo de caso. Obteve-se  

conhecimentos teórico e prático por meio de um estudo de caso para aplicação de 

SaaS em empresas de telefonia. 

 

As entrevistas com estes profissionais foram importantes para a coleta dos 

requisitos, porque são profissionais experientes na área de negócios, arquiteturas de 

sistemas, modelagem de banco de dados, modelagem de sistemas, segurança em serviços 

de sistemas etc. Durante estas entrevistas, houve troca de informações que deram base à 

coleta de requisitos que se apresentam na próxima seção. 

 

4.3 COLETA DE REQUISITOS:   
 

Todos os requisitos coletados foram organizados e agrupados em módulos para facilitar o 

desenvolvimento da modelagem, como mostra a seguir.  

• Gerenciar Controle de Acesso: esse requisito é responsável por gerenciar todos os 

acessos dos usuários no sistema, possibilitando: 

• Inserir permissão de sistema  

• Alterar permissão de sistema  

• Remover permissão de sistema  

• Buscar permissão de sistema   

 

 

 



 108 

 

• Gerenciar Usuário: esse requisito é responsável por gerenciar todos os usuários do 

tipo (fornecedor SaaS, fornecedor aplicação e inquilino) no sistema, possibilitando: 

 
• Inserir usuário  

• Alterar usuário  

• Remover usuário  

• Buscar usuário  

 

• Gerenciar Sistemas: esse requisito é responsável por gerenciar todos os sistemas no 

gerenciador SaaS, possibilitando: 

• Inserir sistema  

• Alterar sistema  

• Remover sistema  

• Buscar sistema  

 

• Gerenciar Uso do sistema (tabela de log): esse requisito é responsável pelo 

gerenciamento do uso do sistema, possibilitando. 

• Configurar Log  

• Visualizar Log  

 

• Gerenciar contratos: esse requisito é responsável pelo gerenciamento dos contratos de 

clientes no sistema, possibilitando. 

• Inserir contrato  

• Alterar contrato  

• Remover contrato   

• Finalizar Contrato  

• Buscar Contrato  

 

• Gerenciar idioma: esse módulo é responsável pelo gerenciamento de idiomas do 

sistema, possibilitando.   

• Inserir idioma  

• Remover idioma  

• Configurar idioma  



 109 

 

• Traduzir interface 

• Cadastrar Termos   

 

• Gerenciar Layout: esse módulo é responsável pelo gerenciamento de interface do 

sistema, possibilitando:   

• Inserir modelo 

• Remover modelo  

• Configurar  modelo 

 

• Gerenciar relatórios: Esse módulo é responsável pelo gerenciamento de relatórios, 

possibilitando: 

• Gerar Relatório por filtro  
 

4.4 ATORES DO SISTEMA 
 

Com base na revisão de literatura, nas entrevistas e na definição dos requisitos, é possível 

definir os atores do sistema. A Tabela 6 lista os tipos de atores que vão interagir com o 

sistema de gerenciamento.    

Tabela 6 – Descrição dos atores do sistema de gerenciamento SaaS 

Atores do sistema 

1 – Fornecedor SaaS Empresa que fornece o ambiente SaaS. 
2 –  Fornecedor da  Aplicação Empresa fornecedora de aplicações que utiliza o 

ambiente SaaS. 
3 – Inquilino Cliente que utiliza aplicações do ambiente SaaS, 

disponibilizadas por determinado fornecedor (2). 
4 – Usuário Final Usuário que acessa as funcionalidades do sistema do 

inquilino. 
Obs: 
Se (1) atua apenas como fornecedor de ambiente SaaS, seu único cliente é (2).  
Se (1) atua, também, como revenda de (2). Seu único cliente é (3).  
Se (1) atua como fornecedor de ambiente SaaS e revenda de 2), seus clientes são (2) e (3) 
de maneira geral, sempre vai ter usuários para (2) e (3). 
Se (1) atua apenas como fornecedor de ambiente SaaS, só gerencia usuários tipo (2), ou 
seja, apenas administra sistemas de terceiros hospedados no gerenciador. Nas outras 
situações, faz o gerenciamento dos usuários do tipo: (2) e (3). 

 
A seção  4.5 apresenta o diagrama de casos de uso do sistema gerenciador SaaS.  

 



 110 

 

4.5 DIAGRAMAS 
 

O diagrama apresentado na figura 39 detalha o processo de negócio necessário para o 

funcionamento do sistema gerenciador SaaS. O diagrama apresenta quatro atores 

(usuários) do mundo real que interagem com o sistema: fornecedor SaaS, fornecedor da 

aplicação, inquilino e usuário final. Cada um possui um papel bem definido no 

gerenciador: O “Fornecedor SaaS” é o responsável  por administrar os cadastros das 

aplicações hospedadas, contratos (SLA), monitoramento do uso de sistema em operação 

(logs), configuração de interface, entre outras funcionalidades. O “Fornecedor aplicação” 

é a empresa que fornece as aplicações a serem hospedados no gerenciador. O “Inquilino” 

é o cliente interessado no uso de uma determinada aplicação. E, por fim, o “Usuário 

Final” são as pessoas que vão acessar as funcionalidades do sistema do inquilino. 

O diagrama também apresenta seis elipses que representam os casos de uso 

referentes a operações de manutenção do sistema gerenciador de SaaS. Estes casos de usos 

são diferenciados dos demais por ter acima do seu nome um estereótipo chamado 

≪CRUD13≫ que significa que a entidade poderá ter funcionalidades do tipo Create 

(Inserção), Retrieve (Consulta), Update (atualização) e Delete (exclusão).  Os casos de uso 

apresentados no diagrama servem para gerenciar usuários, acessos, contratos, uso do 

sistema, idioma, sistemas, layout e relatórios. Esses deverão ser descritos em seções 

posteriores.  

 

                                                           
13

 ≪CRUD≫ – Estereótipo padrão utilizado para a documentação dos requisitos de operações de 
manutenção em sistemas da informação, por meio do uso de modelos e especificações de casos de uso. Os 
requisitos de operações de manutenção são caracterizados por operações de Inclusão, Consulta Alteração e 
Exclusão. (WAZLAWICK, 2009, p. 62). 
 



 111 

 

  

 

Figura 39  - Diagrama de Caso de uso:  Sistema gerenciador SaaS 

 
 

4.5.1 GERENCIAR USUÁRIO  
 

Este módulo permitirá o gerenciamento de usuários que acessarão o sistema, sendo que 

eles podem ser do tipo: fornecedor SaaS, fornecedor da aplicação, inquilino e usuário final. 

A seguir, apresenta-se o diagrama de casos de uso completo para este requisito. 

 

 

 

 

 



 112 

 

4.5.1.1 DIAGRAMA DE CASOS DE USO  
 

 

Figura 40 -  Gerenciar usuário 

 

 A figura 40 apresenta o diagrama de casos de uso para o requisito Gerenciar 

Usuário. Vale ressaltar que os atores do tipo ‘Fornecedor SaaS’, ‘Fornecedor Aplicação’ e 

‘Inquilino’ poderão ter acesso as funcionalidades Inserir Usuário, Remover Usuário, 

Alterar Usuário, Buscar Usuário e Autenticar Usuário. O ator ‘Usuário Final’ terá acesso 

apenas à funcionalidade Autenticar Usuário. Os usuários terão suas permissões de acesso 

de acordo com sua responsabilidade no sistema. O gerenciador SaaS gerencia usuário do 

tipo fornecedor aplicação, Inquilino e usuário final. A seguir, apresenta-se o caso de uso 

expandido deste requisito. 

 

 

 

 

 



 113 

 

4.5.1.2 CASO DE USO EXPANDIDO  
 

Tabela 7 - Gerenciar  Usuário ≪CRUD≫ 

Caso de Uso: Gerenciar Usuário 

1. O usuário escolhe a operação: 
 

1.1 Variante “inserir”. 
1.2 Variante “buscar”. 
1.3 Variante “alterar”. 
1.4 Variante “remover”. 

 
Variante 1.1: Inserir Usuário 

1.1.1 O usuário informa ao sistema os dados para cadastro: nome, senha, login e tipo pessoa, caso o usuário 
for Pessoa Física (endereço, telefone, RG, órgão emissor, profissão); caso o usuário for Pessoa Jurídica  
(Nome Fantasia, CNPJ, Inscrição Estadual). 

Variante 1.2: Buscar Usuário 

1.2.1 O ator acessa o sistema, se identifica, acessa a área Buscar Usuário. Informa os dados do tipo de 
usuário e confirma a ação. 

1.2.1  O sistema apresenta dados do usuário de acordo com o cadastro.  

Variante 1.3: Alterar Usuário 

1.3.1 Inclui Variante 1.2. 

1.3.2 O usuário informa ao sistema novos valores os dados e confirma a ação. 

Variante 1.4: Remoção Usuário 

1.4.1 O sistema apresenta uma lista de usuário separados pelo tipo ordenada pelo nome. 

1.4.2 O usuário seleciona um usuário da lista para exclusão. 

Exceção 1.1.1a Inclusão fere a regra de negócio 

1.1.1a.1 Já existe um usuário cadastrado no sistema com o mesmo login. 

1.1.1a.2 Valor de CPF ou CNPJ está incorreto. 

1.1.1a.3 Retorna ao passo 1.1.1 informando novos dados. 

Exceção 1.3.1a Alteração fere a regra de negócio 

1.3.1a.1 O sistema informa que não existe o usuário no sistema. 

1.3.1a.2 Os dados para alteração estão incorretos. 

1.3.1a.3 Retorna ao passo 1.3.1 informando novos dados. 

Exceção 1.4.1a Remoção fere a regra estrutural ou de negócio 

1.4.2a.1 O sistema informa que existe uma restrição para a remoção, porque o valor do pagamento do 
serviço é obtido pelo número de usuário cadastrado no sistema. O mesmo deve ser removido e movido para 



 114 

 

outra tabela de usuários inativos. 

1.4.2a.2 O caso de uso é abortado.  

Questões em aberto: 

1.1.1a O usuário pode ser um fornecedor de aplicação, um inquilino e um usuário utilizando o mesmo 
cadastro de usuário? 

1.2.1a O fornecedor da aplicação terá acesso para pesquisar um usuário do inquilino da aplicação? 

1.3.1a  Existem outras restrições para a remoção de usuários relacionadas ao contrato? 

 
Tabela 8 – Autenticar Usuário 

Caso de Uso: Autenticar Usuário  

Atores: Fornecedor SaaS, Fornecedor da aplicação, inquilino e usuário final 

Interessados: Inquilino e Usuário final 

Precondições: Os usuários a serem autenticados estão devidamente cadastrados no 
sistema. O usuário informa sua identificação (login) e senha.  

Pós-condições: O usuário se autentica no sistema. 

Responsabilidade: Permite autenticar usuários. 

Descrição: Descreve a maneira pelo qual um usuário tem acesso ao sistema. 

Variações Tecnológicas: A autenticação de login e senha poderão ser feitas por meio de formulários  
utilizando certificação digital (SSL). O mesmo será instalado no servidor e será utilizado pelo protocolo 
HTTPS. Quando o cliente acessar sistema, todos os dados estarão criptografados. 
Questões em Aberto: 
Está previsto o tempo de vida da senha do usuário?  
Fluxo Principal:  O ator acessa a página principal do sistema e  localiza o formulário de login, preenche 
os campos e submete os dados para o sistema. O ator é redirecionado para a página inicial do sistema. 

Fluxo 1 – Autenticar Usuário 

Ações do Ator Respostas do Sistema 

1.  O ator acessa o Sistema 2. O sistema exibe a tela inicial 
3. O ator preenche os dados dos formulários de 4. O sistema processa os dados e redireciona o ator 
login e senha.  para sua página inicial.  
 5. O sistema registra na base de dados a data e 

hora do acesso. 
Tratamento de Exceções: 
1a. O usuário não pode logar no sistema. 
       1a.1 O usuário é informado que o acesso ao sistema foi bloqueado e exibe a mensagem “entrar em 
contato com administrador do sistema”.  O sistema registra a tentativa de acesso ao sistema. 
2a. A identificação de senha ou login está inválida. 
       1a.1 O usuário é informado que o login e senha são inválidos.  
Passo 6. O sistema exibe uma mensagem de erro. Retorna ao passo 3. 



 115 

 

4.5.1.3 DIAGRAMAS DE SEQUÊNCIA 
 

 

Figura 41 – Inserir Usuário 

 

Figura 42 – Alterar Usuário 



 116 

 

Pg Inicial Pg Gerenciamento de Usuario Cl.Serviço Usuário BD Usuario

AtorGerenciarUsuario()

Carregar()

PesqBuuisacarUrUsusuaráiroio(n(onmome,eC)PF)

PBeussqcuairsUasrUuásruioa(rnioo(mnoem)e,CPF)

Select(Usuario)

Resp()

Carregar(Usuario)

ReEmxcolvueirrUUssuuaárrioio((Uussuuaárriioo))

ERxecmluoirvUesrUuasruioá(rUios(usauriáor)io)

Mensagem_Restrição de Contrato Delet(Usuario)

Resp()

Carregar(Mensagem)

 

Figura 43 – Remover Usuário 

 

 
Figura 44 – Autenticar usuário 

 

 

 

 



 117 

 

4.5.2 GERENCIAR CONTROLE DE ACESSO     
 

Este módulo permitirá o gerenciamento de acesso, e é  responsável pelas permissões de 

acesso às propriedades do sistema. Vale ressaltar que o controle de acesso foi baseado em 

papel, assunto e permissão. O objetivo é controlar o acesso ao sistema através das 

permissões atribuídas aos usuários internos e externos, sendo que esses podem ser do tipo: 

‘Fornecedor SaaS’, ‘Fornecedor da Aplicação’ e ‘Inquilino’. Cada  usuário poderá ter um 

ou mais papéis onde indica qual sistema e qual tipo de acesso ele possui. A seguir, 

apresenta-se o diagrama de casos de uso completo para este requisito.  
 

4.5.2.1 DIAGRAMA DE CASOS DE USO    
 

 

Figura 45 - Gerenciar Controle de Acesso 

 

 A figura 45 apresenta o diagrama de casos de uso para o requisito Gerenciar 

Controle de Acesso. Vale  ressaltar que, assim sendo, os atores envolvidos  terão suas 

permissões de acesso de acordo com sua responsabilidade no sistema.  O fornecedor SaaS 

terá acesso à todas as funcionalidades do sistema, o fornecedor aplicação terá acesso ao 

gerenciamento de logs, relatórios, idiomas e layout. O inquilino terá acesso apenas nas 



 118 

 

funcionalidades do sistema hospedado, relatórios, idiomas e layout. O usuário final terá 

acesso apenas nas funcionalidades do sistema hospedado. A seguir, apresenta-se o caso de 

uso expandido deste requisito. 

 

4.5.2.2 CASO DE USO EXPANDIDO  
 

Tabela 9 - Gerenciar  Controle de Acesso ≪CRUD≫ 

Caso de Uso: Gerenciar Controle de Acesso 

1. O usuário escolhe a operação: 
 

1.1 Variante “inserir”. 
1.2 Variante “buscar”. 
1.3 Variante “alterar”. 
1.4 Variante “remover”. 

 
Variante 1.1: Inserir Permissão 

1.1.1 O fornecedor SaaS seleciona no sistema o tipo de permissão que será dada aos usuários. 

Variante 1.2: Buscar Permissão 

1.2.1 O sistema apresenta formulário com nome | CPF para pesquisar dados da permissão.  

1.2.2 O usuário digita o nome | CPF e seleciona a opção Ok.  

1.2.3 O sistema apresenta dados dos tipos de permissão.   

Variante 1.3: Alterar Permissão 

1.3.1 Inclui a Variante 1.2. 

1.3.2 O usuário informa ao sistema novas permissões para o usuário,  pode escolher  um novo papel para o 
usuário ou  um novo módulo do sistema. 

Variante 1.4: Remoção da Permissão 

1.4.1 O sistema apresenta uma lista de permissão ordenada por tipo. 

1.4.2 O usuário seleciona um elemento permissão da lista para exclusão. 

Exceção 1.1.1a Inclusão fere a regra de negócio 

1.1.1a.1 O sistema informa  regra que impede a inclusão. 

1.1.1a.3 Retorna ao passo 1.1.1.  

Exceção 1.3.1a Alteração fere a regra de negócio 

1.3.1a.1 O sistema informa que não existe o usuário no sistema. 

1.3.1a.2 Os dados para alteração estão incorretos. 



 119 

 

1.3.1a.2  Para atribuir esta permissão, devem  ser alteradas as regras do contrato. 

1.3.1a.3 Retorna ao passo 1.3.1 informando novos dados. 

Questões em aberto: 

1.1.1a A permissão do usuário pode ser a mesma para outros tipos de sistemas? 

1.1.1b Pode ocorrer de o inquilino estar cadastrado para acesso a um módulo de um sistema e não ter acesso 
a outro? 
 
1.3.1a Uma permissão pode ser alterada sem nenhuma regra de cobrança? 
 

 

4.5.2.3 DIAGRAMAS DE SEQUÊNCIA  
 

Pg Inicial Pg ServiçoUsuário CLServiçoUsuário Bd_Usuário

Ator

GerenciarControleAcesso()

Carregar()

InserirPermissão(Dados)

Carregar()

InserirPermissão(Dados)

Insert(Dados)

Resposta

Carregar(Mensagem)

 

Figura 46 - Inserir Permissão 

 



 120 

 

Pg Inicial Pg ServiçoUsuário CLServiçoUsuário Bd_Usuário

Ator

GerenciarControleAcesso()

Carregar()

AlterarPermissão()

Carregar()

AlterarPermissão(Dados)

Update(Dados)

Resposta

Carregar(Mensagem)

 

Figura 47 - Alterar Permissão 

Pg Inicial Pg Gerenciamento de Usuario Cl.Serviço Usuário BD Usuario

AtorGGeerernencicaiarUr sCuoanritoro()ledeAcesso()

Carregar()

PeRseqmuiosvaerUrPseuramriios(snãoom(neo,CmPeF) )

PeRsqeumisoavreUrPsuearmriois(snãoom(neo,CmPeF))

Select(Usuario)

Resp()

Carregar(Usuario)

ReEmxocvlueirrPUesrumairsios(ãUos(nuoamrioe))
ERxecmluoirvUesruPaerriom(iUssãuoa(rnioo)me)

Delet(Usuario)
Delet(permissão)

Resp()

Carregar(Mensagem)

 

Figura 48 – Remover Permissão 



 121 

 

4.5.3 GERENCIAR SISTEMAS  
 

Este módulo é responsável pelo gerenciamento de sistemas para identificar o tipo de 

sistema inserido no gerenciador, sendo que o ator responsável pelo gerenciamento do 

sistema é o ‘Fornecedor SaaS’. A seguir, apresenta-se o diagrama de casos de uso 

completo para este requisito. 

 

4.5.3.1 DIAGRAMA DE CASOS DE USO  

 

Remover 
Sistema Buscar

Sistema

Inserir 
Sistema Alterar 

Sistema

Fornecedor
SaaS

 

Figura 49 - Gerenciar Sistemas 

 

 A figura 49 apresenta o diagrama de casos de uso para o requisito Gerenciar 

Sistemas. Vale ressaltar que apenas o ator ‘Fornecedor SaaS’ terá acesso às 

funcionalidades deste módulo. A seguir, apresenta-se o caso de uso expandido deste 

requisito. 

 

 

 

 

 



 122 

 

4.5.3.2 CASO DE USO EXPANDIDO  
 
Tabela 10 -  Gerenciar Sistema ≪CRUD≫ 

Caso de Uso: Gerenciar Sistema 

1. O usuário escolhe a operação: 
 

1.1 Variante “inserir”. 
1.2 Variante “buscar”. 
1.3 Variante “alterar”. 
1.4 Variante “remover”. 

 
Variante 1.1: Inserir Sistema 

1.1.1 O ator  informa ao sistema os dados para cadastro: nome do sistema, descrição, data do cadastro, 
tipo de sistema, entre outros. 

Variante 1.2: Buscar Sistema 

1.2.1 O sistema apresenta formulário para pesquisar o nome do sistema.  

1.2.2 O usuário digita o nome e seleciona a opção Ok.  

1.2.3 O sistema apresenta dados do fornecedor do sistema, data do cadastro, descrição e tipo de sistema.  

Variante 1.3: Alterar Sistema 

1.3.1 Inclui Variante 1.2. 

1.3.2 O usuário informa novos dados ao sistema.  

Variante 1.4: Remoção Usuário 

1.4.1 O sistema apresenta uma lista de softwares cadastrados ordenados pelo nome. 

1.4.2 O usuário seleciona um sistema da lista para exclusão. 

Exceção 1.4.1a Remoção fere a regra estrutural ou de negócio 

1.4.2a.1 O gerenciador SaaS informa que o sistema não pode ser removido do sistema sem finalizar o 
contrato com o fornecedor.  

Questões em aberto: 

1.1.1a O fornecedor SaaS pode inserir sistemas desenvolvido em qualquer linguagem? 

1.1.1a O fornecedor pode inserir sistemas SaaS e não SaaS? 

1.4.1a  O fornecedor da aplicação pode solicitar exclusão do sistema sem terminar o prazo estipulado no 
contrato? 

 

 

 



 123 

 

 

4.5.3.3 DIAGRAMAS DE SEQUÊNCIA  

 

Figura 50 - Inserir Sistema 

 

Pg Inicial Pg Cadastro de Sistema Cl ServiçoSistema Bd Sistema

Ator

GerenciarSistemas()

Carregar()

AlterarSistema(dados)

Carregar()

AlterarSistema(dados)

Update(Dados)

Resposta

Carregar(Mensagem)

 

Figura 51 - Alterar Sistema 

 



 124 

 

 

Figura 52 - Remover Sistema 

 

 

4.5.4 GERENCIAR USO DO SISTEMA 
 

Este módulo é responsável pelo gerenciamento do uso do sistema para permitir que o 

usuário configure, visualize e emita o relatório de log do Sistema. A seguir, apresenta-se o 

diagrama de casos de uso completo para este requisito. 

 

 

 

 



 125 

 

4.5.4.1 DIAGRAMA DE CASOS DE USO  
 

 

Figura 53 - Gerenciar Uso de Sistema 

 

 A figura 53 apresenta o diagrama de casos de uso para o requisito Gerenciar Uso de 

Log. Vale ressaltar que somente o ator ‘Fornecedor SaaS’ terá acesso na configuração do 

Log, sendo que os demais ‘Fornecedor da Aplicação’ e ‘Inquilino’ têm acesso apenas na 

visualização do Log e Emissão de relatório. A seguir será apresentado o caso de uso 

expandido deste requisito. Esses usuários terão suas permissões de acesso de acordo com 

sua responsabilidade no sistema. A seguir, apresenta-se o  caso de uso expandido para este 

requisito. 

 

 

 

 



 126 

 

4.5.4.2 CASO DE USO EXPANDIDO  
 

Tabela 11 - Configurar Log 

Caso de Uso: Configurar Log   

Atores: Fornecedor SaaS 

Interessado: Fornecedor da aplicação e Inquilino.  

Precondições: Deve ser criado um contrato para ativar o Log. 

Pós-condições: O fornecedor SaaS configura o Log para o sistema. 

Responsabilidade: Permite  selecionar ativar e desativar o log do sistema. 

Descrição: Descreve a maneira pelo qual um usuário configura o uso de log sistema. 

Questões em Aberto: 
No mesmo sistema pode configurar Logs diferentes para determinada funcionalidade?  
 
Fluxo Principal:  O ator acessa a página Gerenciar Uso do Sistema do sistema e localiza o a 
funcionalidade Gerenciar Uso do Sistema. O ator é redirecionado para a página inicial da funcionalidade 
para configuração do log. O ator seleciona o tipo de log e inquilino. 

Fluxo 1 – Configurar Log – Fornecedor SaaS 

Ações do Ator Respostas do Sistema 

1.  O ator acessa o Sistema 2. O sistema exibe a tela inicial 
3. O ator escolhe a opção Gerenciar Uso do 4. O sistema exibe a página com os dados da 
Sistema. configuração.  
5. O ator seleciona o botão ativado ou desativado 6. O sistema exibe uma mensagem notificando que 
para o relatório de Log. as configurações foram feitas. 
 

 
Tratamento de Exceções: 
1a. O usuário não tem acesso para configurar o Log. 
       1a.1 O usuário é informado que não existe um contrato do fornecedor da aplicação. 
  
O sistema exibe uma mensagem de erro. Retorna ao passo 3. 

 

 

 

 

 

 



 127 

 

Tabela 12 - Visualizar Log 

Caso de Uso: Visualizar Log   

Atores: Fornecedor SaaS, Fornecedor da aplicação e inquilino  

Interessado: Inquilino e Fornecedor da aplicação 

Precondições: Uma configuração de log deve ter sido feita. 

Pós-condições: O ator visualiza um Log. 

Responsabilidade: Permite  visualizar os logs do sistema 

Descrição: O ator acessa a página Gerenciar Uso do Sistema e localiza a função 
“Visualizar Log”. 

Fluxo Principal:  O ator acessa a página Gerenciar Uso do Sistema do sistema e localiza o sistema e 
inquilino desejado. O sistema mostra todos os Logs cadastrados.  

Fluxo 1 – Visualizar Log - administrador  

Ações do Ator Respostas do Sistema 

1.  O ator acessa o Sistema 2. O sistema exibe a tela inicial 
3. O ator escolhe a opção Gerenciar Uso do 4. O sistema exibe a página com os dados que 
Sistema. deseja visualizar.  
5. O ator seleciona o campo para visualizar o log. 6. O sistema exibe os dados para impressão. 
 

 
Tratamento de Exceções: 
1a. O usuário não tem acesso para visualizar o Log. 
       1a.1 O usuário é informado que o acesso ao sistema foi bloqueado e exibe a mensagem “entrar em 
contato com administrador do sistema”.    
  
O sistema exibe uma mensagem de erro. Retorna ao passo 3. 

 

Tabela 13 - Relatório Log ≪REP≫ 

Caso de Uso: Relatório de Log  

1. O usuário informa os parâmetros sistema, data e hora. 
2. O sistema apresenta os dados do sistema, inquilino, datas, valor total agrupados por usuário e 

ordenados por data. 
 

 



 128 

 

4.5.4.3 DIAGRAMAS DE SEQUÊNCIA  

 

Figura 54 - Configurar Log 

 

 

Figura 55 - Visualizar Log 

 

 

 



 129 

 

4.5.5 GERENCIAR CONTRATOS 
 

Este módulo é responsável pelo gerenciamento de contrato do sistema entre o ‘Fornecedor 

SaaS’ e o ‘Fornecedor da Aplicação‘ ou entre o ‘Fornecedor SaaS’ e o ‘Inquilino’, sendo 

que cada contrato terá suas regras de negócio. A seguir, apresenta-se o diagrama de casos de 

uso completo para este requisito. 

 

4.5.5.1 DIAGRAMA DE CASOS DE USO  
 

Buscar
Contrato Remover

Alterar Contrato
Contrato

Finalizar
Contrato

Inserir
Contrato

Visualizar
Contrato

Usuário

Fornecedor Fornecedor
Aplicação SaaS Inquilino

 

Figura 56 - Gerenciar Contrato 

 

 A figura 56 apresenta o diagrama de casos de uso para o requisito Gerenciar 

Contrato. Vale ressaltar que somente o ator Fornecedor SaaS  terá acesso ao gerenciar o 

contrato, os demais atores ‘Fornecedor Aplicação’ e ‘Inquilino’ apenas terão acesso para 

visualizar o contrato. A seguir,  apresenta-se o caso de uso expandido deste requisito. 



 130 

 

4.5.5.2 CASO DE USO EXPANDIDO  
 

Tabela 14 - Gerenciar Contrato ≪CRUD≫ 

Caso de Uso: Gerenciar Contrato 

1. O usuário escolhe a operação: 
 

1.1 Variante “inserir”. 
1.2 Variante “buscar”. 
1.3 Variante “alterar”. 
1.4 Variante “remover”. 

 
 

Variante 1.1: Inserir Contrato 

1.1.2 O usuário cadastra no sistema dados do contrato e as regras de negócio.  

1.1.3 Variante 1.2: Buscar Contrato 

1.2.1 O sistema apresenta formulário para pesquisar o contrato no sistema.  

1.2.2 O usuário digita o nome do fornecedor e seleciona a opção Ok.  

1.2.3 O sistema apresenta a lista de contratos do fornecedor com dados necessários. 

Variante 1.3: Alterar Contrato 

1.3.1 Inclui Variante 1.2 

1.3.2 O usuário informa dados novos para o contrato. 

 Variante 1.4: Remover Contrato 

1.4.1 O sistema apresenta uma lista de contratos cadastrados ordenado pelo nome de fornecedor. 

1.4.2 O usuário seleciona um contrato da lista para exclusão. 

Exceção 1.4.1a Remoção fere a regra estrutural ou de negócio 

1.4.2a.1 O sistema informa que o contrato não pode ser removido do sistema sem ser finalizado. 

Questões em aberto: 

1.1.1a Pode existir mais de uma regra para determinado contrato? 

 

 
 
 
 
 
 



 131 

 

Tabela 15 - Finalizar Contrato 

Caso de Uso: Finalizar  Contrato  

Atores: Fornecedor SaaS  

Interessado: Fornecedor aplicação e Inquilino 

Precondições: Um contrato foi cadastrado no sistema. 

Pós-condições: O fornecedor SaaS finaliza um contrato cadastrado no sistema. 

Responsabilidade: Permite finalizar contratos cadastrados no sistema de gerenciamento. 

Descrição: O ator acessa a página Gerenciar Contrato e localiza a função “Finalizar 
Contrato”. 

Questões em Aberto: 
O contrato pode ser finalizado sem ter feito o pagamento do serviço? 
 
Fluxo Principal:  O ator acessa a página Gerenciar Contrato, e localiza o inquilino e o contrato 
desejado. O sistema mostra uma lista de contratos cadastrados, o ator seleciona o contrato  desejado para 
finalizar.  

Fluxo 1 – Finalizar Contrato  

Ações do Ator Respostas do Sistema 

1.  O ator acessa o Sistema 2. O sistema exibe a tela inicial 
3. O ator escolhe a opção Gerenciar Contrato 4. O sistema exibe a página com os contratos que 
5. O ator seleciona o tipo de contrato que deseja. deseja visualizar.  
7. O ator escolhe a opção finalizar contrato. 6. O sistema exibe os dados do contrato. 

  
Tratamento de Exceções: 
1a. O contrato não pode ser finalizado. 
       1a.1 O usuário é informado que o contrato não pode ser finalizado porque o pagamento não foi feito 
ao fornecedor SaaS.  
O sistema exibe uma mensagem de erro. Retorna ao passo 3. 

 

 

 

 

 

 

 

 

 



 132 

 

4.5.5.3 DIAGRAMAS DE SEQUÊNCIA  
 

Pg Inicial Pg Cadastro de Contrato Cl. ServiçoContrato Bd Contrato CL. Serviço Regras BD Regras

Ator

GerenciarContrato()

Carregar()

InserirConstrato(Dados)

InserirConstrato(Dados)

Insert(Contrato)

Resp(mensagem)

Carregar(Mensagem)

InserirRegras(Dados)

Insert(Regras)

Resposta

Carregar(mensagem)

 

Figura 57 - Inserir contrato 

 

Figura 58 - Alterar Contrato 



 133 

 

 

Figura 59 - Remover Contrato 

 

 
Figura 60 – Finalizar Contrato 

 



 134 

 

4.5.6 GERENCIAR IDIOMAS 
 

Este módulo é responsável pela internacionalização de idiomas no sistema. Cada idioma 

cadastrado no sistema representa uma personalização possível para os sistemas no 

gerenciador. Inicialmente, o fornecedor SaaS cadastra o termo pela primeira vez no 

sistema. E, posteriormente, é feita a tradução do termo informando o idioma e o 

significado do termo. Logo após, o fornecedor SaaS informa qual idioma é o default para o 

inquilino. Quando o usuário logar, o sistema lê as configurações no BD e na tela principal 

dá a carga no idioma correto para cada termo. O sistema informa que está pronto para o 

uso. Se o usuário quiser, poderá selecionar outro idioma que esteja disponível no sistema. 

A seguir, apresenta-se o diagrama de casos de uso completo para este requisito.  

 

4.5.6.1 DIAGRAMA DE CASOS DE USO  

 

Figura 61 - Gerenciar Idioma 

 



 135 

 

 A figura 61 apresenta o diagrama de casos de uso para o requisito Gerenciar 

Idioma. Vale ressaltar que somente o ator fornecedor SaaS terá acesso para gerenciar as 

principais funcionalidades do idioma. Os atores ‘Fornecedor Aplicação’ e ‘Inquilino’ terão 

acesso para apenas configurar o idioma.  A seguir, apresenta-se o caso de uso expandido 

deste requisito. 

 

4.5.6.2 CASO DE USO EXPANDIDO  
 

Tabela 16 - Gerenciar Idioma  ≪CRUD≫ 

Caso de Uso: Gerenciar Idioma 

71. O usuário escolhe a operação: 
 

1.1 Variante “inserir”. 
1.2 Variante “buscar”. 
1.3 Variante “alterar”. 
1.4 Variante “remover”. 

 
Variante 1.1: Inserir Idioma 

O usuário cadastra no sistema o tipo de idioma. Ex: nome e descrição do idioma. 

Variante 1.2: Buscar Idioma 

1.2.1 O sistema apresenta  um formulário para buscar se existe o tipo de idioma cadastrado no sistema.  

1.2.2 O usuário digita o nome do idioma e seleciona a opção Ok.  

1.2.3 O sistema apresenta a lista de idioma ordenado. 

Variante 1.3: Alterar Idioma 

1.3.1 Inclui Variante 1.2. 

1.3.2 O usuário pode modificar dados do idioma que foi cadastrado. 

 Variante 1.4: Remover Idioma 

1.4.1 O sistema apresenta uma lista de idiomas cadastrados ordenado pelo nome. 

1.4.2 O usuário seleciona um idioma  da lista para exclusão. 

Exceção 1.4.1a Remoção fere a regra estrutural ou de negócio 

1.4.2a.1 O sistema informa que o idioma não pode ser removido, uma vez que existem termos ligados ao 
idioma. 

Questões em aberto: 

1.1.1a Quantos idiomas o sistema vai oferecer inicialmente? 



 136 

 

Tabela 17 – Configurar Idioma 

Caso de Uso: Configurar Idioma  

Atores: Fornecedor SaaS, Fornecedor aplicação e Inquilino 

Interessado: Fornecedor aplicação e Inquilino 

Precondições: Existe um idioma cadastrado no sistema. 

Pós-condições: O usuário configura um idioma para o sistema. 

Responsabilidade: Permite configurar idiomas. 

Descrição: O ator acessa a página Gerenciar Idioma e localiza a função “Configurar 
Idioma”. 

Questões em Aberto: 
Pode configurar idiomas para determinada funcionalidade? 
 
Fluxo Principal:  O ator acessa a página Gerenciar Idioma e localiza a funcionalidade “Configurar 
Idioma”. O sistema mostra uma lista de idiomas cadastrados, o ator seleciona o idioma desejado e salva a 
ação.  

Fluxo 1 – Configurar Idioma  

Ações do Ator Respostas do Sistema 

1.  O ator acessa o Sistema 2. O sistema exibe a tela inicial 
3. O ator escolhe a opção Gerenciar Idioma 4. O sistema exibe a página de configuração de 
5. O ator seleciona o tipo de idioma que deseja. idiomas. 
7. O ator escolhe a opção salvar. 6. O sistema exibe processo os dados e modifica o 

idioma de todas as telas do sistema. 
 

 
 

Tabela 18 – Gerenciar Termos ≪CRUD≫ 

Caso de Uso: Gerenciar Termos ≪CRUD≫ 

1. O usuário escolhe a operação: 
 

1.1 Variante “inserir”. 
1.2 Variante “buscar”. 
1.3 Variante “alterar”. 
1.4 Variante “remover”. 

 
 

Variante 1.1: Inserir Termo 

O usuário cadastra o termo no sistema. Cada termo é um elemento  label do sistema, que podem ser 
textos, expressões ou mensagens.  

 Variante 1.2: Buscar Termo 

1.2.1 O sistema apresenta  um formulário para buscar se existe o tipo de termo cadastrado no sistema. 



 137 

 

1.2.2 O usuário digita o nome do termo e seleciona a opção Ok.  

1.2.3 O sistema apresenta a lista de termos ordenados. 

Variante 1.3: Alterar Termo 

1.3.1 Inclui Variante 1.2 

1.3.2 O usuário pode modificar o tipo de termo que foi cadastrado. 

 Variante 1.4: Remover Termo 

1.4.1 O sistema apresenta uma lista de termos cadastrados ordenado por tabela. 

1.4.2 O usuário seleciona o termo para exclusão. 

 

Tabela 19 – Dicionário  

Caso de Uso: Dicionário   

Atores: Fornecedor SaaS 

Interessado: Fornecedor SaaS 

Precondições: Existe termos cadastrado no sistema. Deve haver um padrão para os nomes 
dos labels para evitar duplicidades no dicionário. 

Pós-condições: O usuário escolhe o termo para tradução. 

Responsabilidade: Permite traduzir termos cadastrados. 

Descrição: O ator acessa a página Gerenciar Idioma e localiza a função “Dicionário”. 

Fluxo Principal:  O ator acessa a página Gerenciar Idioma e localiza a funcionalidade “Dicionário de 
Termos”.   

Fluxo 1 – Dicionário 

Ações do Ator Respostas do Sistema 

1.  O ator acessa o Sistema 2. O sistema exibe a tela inicial 
3. O ator escolhe a opção Gerenciar Idioma 4. O sistema exibe a página de Dicionário de 
5. O ator cadastra o registro para determinado Termos 
termo, carrega o sistema e seleciona o idioma X. 6. O sistema busca o termo e adiciona no registro à 
 O ator seleciona o tipo de idioma que deseja. tradução com o idioma escolhido.  
7. O ator escolhe a opção salvar. 

8. O  sistema carrega os dados e grava no banco. 

 
 

 

 



 138 

 

4.5.6.3 DIAGRAMAS DE SEQUÊNCIA  
 

 

Figura 62 - Inserir Termos 

 

Pg Inicial Pg Pesquisa Dicionário CL. Serviço Idioma Bd Idioma CL. Serviço Tradução BD. Tradução

Ator

Dicionário(dados)

BuscarIdioma(nome) Buscar()

MSG(Idioma não cadastrado no sistema) Erro

{OR}

Sucesso Sucesso
{OR}

InserirIdioma(dados)

Insert(idioma)

Resp()

Carregar(Mensagem)

TraduzirTermos(idioma, termo, tradução)

BuscarTradução()

MSG(Ainda não existe tradução para esse termo) Erro
{OR}

Sucesso

TraduzirTermos(idioma, termo, tradução)

InsertTradução(tradução)

Resposta

CarregarMensagem()

 

Figura 63 - Dicionário de Dados 



 139 

 

Pg Inicial Pg ConfigurarIdioma CL. Serviço Idioma Bd_Idioma

Ator

ConfigurarIdioma(nome)

Carregar()

ConfigurarIdioma(nome)

SelecionarIdioma(nome)

Update(Idioma)

Resposta

Carregar(Mensagem)

 

Figura 64 - Configurar Idioma 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 



 140 

 

4.5.7 GERENCIAR LAYOUT 
 
Este módulo é responsável pelo gerenciamento de layout do sistema. Trata-se de uma 

interface configurável, a qual permite ao usuário alterar o tipo de layout de acordo com a 

sua preferência, como cores, imagens, fontes, e outros recursos. Vale ressaltar que todos os 

usuários terão acesso a essa funcionalidade. A seguir, apresenta-se o diagrama de casos de 

uso completo para este requisito. 

 

4.5.7.1 DIAGRAMA DE CASOS DE USO  
 

 

Figura 65 - Gerenciar Layout 

 
 
 A figura 65 apresenta o diagrama de caso de uso para o requisito Gerenciar Layout. 

Vale ressaltar que todos os atores terão acesso para inserir e configurar modelo de layout. 

Porém, somente o ‘Fornecedor SaaS’ terá acesso para remover um layout.   A seguir, 

apresenta-se o caso de uso expandido deste requisito. 

 



 141 

 

4.5.7.2 CASO DE USO EXPANDIDO  
 
 
Tabela 20 - Caso de uso expandido: Inserir Modelo 

Caso de Uso: Inserir Modelo 

Atores: Fornecedor SaaS e Fornecedor da Aplicação 

Interessado: Fornecedor Aplicação 

Precondições: O ator precisa estar identificado no sistema. 

Pós-condições: Um modelo foi adicionado no sistema para uso. 

Descrição: O ator acessa a opção de “Inserir modelo” para incluir um arquivo CSS no 
sistema. 

Variações Tecnológicas: A inserção do arquivo poderá ser feita utilizando um link do caminho do 
arquivo, ou inseri-lo na própria base de dados. 

Fluxo Principal:  O ator escolhe a opção gerenciar layout, clica em inserir modelo, escolhe o arquivo 
desejado e adiciona o arquivo, ou o caminho do modelo no sistema.  

Fluxo 1 – Inserir Modelo 

Ações do Ator Respostas do Sistema 

1.  O ator acessa o Sistema 2. O sistema exibe a tela inicial 

3. O ator escolhe a opção Gerenciar Layout. 4. É apresentada a opção de Gerenciamento de 
Layout.  

5. O ator escolhe a opção Inserir Modelo. 
6. O sistema exibe a página com os dados do  

7. O ator insere o arquivo CSS no sistema  e modelo para cadastro. 
seleciona a opção Salvar.  

8. O sistema exibe uma mensagem notificando que 
 o arquivo foi inserido com sucesso. 

 
 
Tabela 21 - Caso de uso expandido: Remover modelo 

Caso de Uso: Remover Modelo   

Atores: Fornecedor SaaS e Fornecedor da Aplicação 

Interessado: Fornecedor Aplicação 

Precondições: É necessário ter um modelo cadastrado no sistema. 

Pós-condições: O arquivo do modelo foi removido do sistema. 

Descrição: O ator acessa a opção de “Remover modelo” para excluir um arquivo CSS 
no sistema. 



 142 

 

Fluxo Principal:  O ator escolhe a opção gerenciar layout, clica em excluir modelo, escolhe o arquivo 
desejado e exclui o arquivo ou o caminho do modelo no sistema.  

Fluxo 1 – Excluir Modelo 

Ações do Ator Respostas do Sistema 

1.  O ator acessa o Sistema 2. O sistema exibe a tela inicial 

3. O ator escolhe a opção Gerenciar Layout. 4. É apresentada a opção de Gerenciamento de 
Layout.  

5. O ator escolhe a opção Remover Modelo. 
6. O sistema exibe a página com os dados do  

7. O ator exclui o arquivo CSS no sistema  e modelo para cadastro. 
seleciona a opção Salvar.  

8. O sistema exibe uma mensagem notificando que 
 o arquivo foi removido com sucesso. 

Tratamento de Exceções: 
7a. O usuário não tem acesso para excluir o modelo do sistema. 
       O usuário é informado que o modelo não pode ser excluído porque  o mesmo está sendo usado em 
outros sistemas.  
O sistema exibe uma mensagem de erro. Retorna ao passo 3. 

 

Tabela 22 - Caso de uso expandido: Configurar Modelo 

Caso de Uso: Inserir Modelo 

Atores: Fornecedor Suas, Fornecedor da Aplicação e inquilino 

Interessado: Fornecedor Aplicação 

Precondições: Um modelo foi adicionado no sistema para uso. 

Pós-condições: Um modelo será alterado no sistema. 

Descrição: O ator acessa a opção de “Configurar modelo” para alterar o arquivo CSS 
no sistema. 

Variações Tecnológicas: A configuração do arquivo poderá ser feita utilizando um link do caminho do 
arquivo, ou inseri-lo na própria base de dados. 

Fluxo Principal:  O ator escolhe a opção gerenciar layout, clica em configurar modelo, escolhe o 
arquivo desejado e altera o arquivo, ou o caminho do modelo no sistema.  

Fluxo 1 – Configurar Modelo 

Ações do Ator Respostas do Sistema 



 143 

 

1.  O ator acessa o Sistema 2. O sistema exibe a tela inicial 

3. O ator escolhe a opção Gerenciar Layout. 4. É apresentada a opção de Gerenciamento de 
Layout.  

5. O ator escolhe a opção Configurar  Modelo. 
6. O sistema exibe a página com os dados do  

7. O ator insere o arquivo CSS no sistema  e modelo para alteração. 
seleciona a opção “Modificar”.  

8. O sistema exibe uma mensagem notificando que 
 o arquivo do modelo foi alterado com sucesso. 

 

4.5.7.3 DIAGRAMA DE SEQUENCIA  

Pg Inicial Pg ConfigurarLayout ClasseServiçoLayout Bd_Layout

Ator

InserirModelo(id, Arquivomodelo)

Carregar()

InserirModelo(id, Arquivomodelo)

InserirModelo(id, Arquivomodelo)

InserirModelo(id, Arquivomodelo)

RespRoesstap ()

Carregar(Mensagem)

 

Figura 66 - Inserir Modelo 

 

 



 144 

 

 

Figura 67 - Configurar Modelo 

 

4.5.8 GERENCIAR RELATÓRIOS 
 

Permite ao administrador gerar relatórios de uso do sistema de cada inquilino, de acordo, 

com o contrato firmado entre o cliente e fornecedor. A seguir, apresenta-se o diagrama de 

casos de uso completo para este requisito. 

 

 

 

 

 

 

 

 



 145 

 

4.5.8.1 DIAGRAMAS DE CASO DE USO  
 

 

Figura 68 – Diagrama de caso de uso: Gerenciar relatório por filtro 

 

 A figura 68 apresenta o diagrama de casos de uso para o requisito Gerenciar 

Relatório. Vale ressaltar que todos os atores terão acesso aos dados de seus relatórios. 

Porém, somente o ‘Fornecedor SaaS’ terá acesso a todos os relatórios. A seguir, apresenta-

se o caso de uso expandido deste requisito. 

 

4.5.8.2 CASO DE USO EXPANDIDO  
 

Tabela 23 - Caso de uso expandido: 14
≪REP≫ Relatório por Filtro 

Caso de Uso: Relatório por Filtro  

1. O usuário escolhe o filtro: 
2. O usuário marca os tipos de filtro desejado  ex: por inquilino, período e a ordem de impressão | 

por fornecedor, data do contrato, tipo de serviço | entre outros. 
 

                                                           
14 ≪REP≫ – Estereótipo indica que o caso de uso consiste em um único relatório com totalizações ou filtros. 
(WAZLAWICK, 2009, p. 60). 



 146 

 

4.6 DIAGRAMA DE CLASSES  
 

A modelagem apresentada neste trabalho trata-se de um sistema que expõe serviços e, 

assim sendo, o diagrama de classes foi separado em agrupamentos lógicos de componentes 

de software. Esses agrupamentos são chamados de camadas. Essas camadas ajudam a 

diferenciar os tipos de tarefas executadas pelos componentes. A abordagem mais comum 

em aplicações de negócios consiste na utilização das seguintes camadas: apresentação, 

serviços, negócios e funcionalidade de acesso a dados. 

Uma solução baseada em serviço pode ser vista como sendo composta de vários 

serviços, comunicando-se cada um com os outros, passando mensagens. Porém, 

internamente, cada serviço é composto por componentes de software, assim como qualquer 

outra aplicação, e esses componentes podem ser agrupados logicamente em apresentação, 

negócios e camadas de dados.   

Quando uma aplicação tem que prestar serviços a outras aplicações, uma 

abordagem comum é usar uma camada de serviços que expõe a funcionalidade do negócio 

da aplicação.  Neste cenário, os usuários podem acessar o aplicativo através da camada de 

apresentação, que se comunica diretamente com os componentes da camada de negócio, ou 

através de uma camada de serviços (chamada de fachada). Essa camada (serviços) tem as 

principais funções do sistema. É uma classe genérica da qual todas as classes de serviços 

da camada de serviço (fachada) usam como pai.  Enquanto isso, os clientes externos e 

outros sistemas podem acessar o aplicativo e fazer uso da sua funcionalidade, 

comunicando com a camada de negócios através de interfaces de serviços.  Isto permite à 

aplicação disponibilizar o serviço para vários tipos de clientes, e promove a reutilização e 

composição de alto nível de funcionalidade através das aplicações. 

Em alguns casos, a camada de apresentação pode se comunicar com a camada de 

negócios através da camada de serviços.  No entanto, este não é um requisito absoluto.  Se 

a implantação física da aplicação localiza a camada de apresentação e a camada de negócio 

no mesmo nível, eles podem se comunicar diretamente.  

Para desenvolver o diagrama de classes, o desenvolvimento de alguns diagramas de 

sequência ajudou a identificar as classes e métodos da mesma. A figura 69 apresenta o 

diagrama de classes do sistema e, desta forma, percebe-se que os atributos das classes estão 

separados dos métodos: a classe “Entity” é responsável na armazenagem de valores que 



 147 

 

representa um registro da tabela do banco de dados. E a classe "Service Object" é 

responsável pela  lógica de negócios, e os métodos ficam numa classe separada.  

O propósito de separar métodos e atributos é pelo fato de que, assim procedendo, 

dividem-se as camadas e orientação a serviço, sendo que a classe “Entity” atravessa todas 

as camadas. Isto porque ela é instanciada na camada de acesso a dados. Depois passa pelos 

serviços e, daí, vai para a camada de apresentação (interface gráfica). Afinal, somente os 

dados devem ser trafegados, pois os métodos estão em cada serviço na respectiva camada.  

Desta forma, é obtida a coesão entre as camadas, pois não é lógico que uma 

“Entity” que vai ser usada também na camada de apresentação possua métodos que 

acessam diretamente o banco de dados, quebrando o conceito de camadas. Assim, a classe 

“Entity” não conhece o “Service Object” e, por sua vez, não o usa nem o possui. Apenas 

um “Service Object” usa uma “Entity”, e essa não conhece o “Service Object”,  não o usa e 

nem o possui. As classes “Entity” não fazem nada e não se relacionam com outras, e 

apenas com entidades (ERICH GAMMA et al, 1995). 

 

  

 



 148 

 

 

Figura 69 – Diagrama de Classes 



149 

 

A seção  4.7  apresenta o modelo Entidade Relacionamento do Sistema. 

 

4.7 MODELO ENTIDADE RELACIONAMENTO  
 

O modelo Entidade Relacionamento é único, porém, para facilitar o entendimento, foi 

dividido em modelos, os quais serão apresentados nas seções seguintes. Foi utilizada a 

notação IE15 (Information Engineering) para descrever as multiplicidades entre tabelas, 

onde os símbolos (  se tiver linha com um traço significa cardinalidade 1,   se tiver 

bolinha é 0 ou 1 ou 0 e muitos e se tiver   pé de galinha significa muitos) (JAMES, 1989). 

 

4.7.1 MODELO PESSOAS 
 

A figura 70 apresenta a entidade “Pessoa” que pode ser um inquilino, provedor, 

inquilino/usuário, fornecedor e fornecedor/usuário. As pessoas estão especializadas em 

pessoas físicas e jurídicas. Uma pessoa pode ser um inquino pessoa física e não ser um 

usuário. Ele terá empregados que serão os usuários e que farão o serviço que ele contratou. 

O mesmo serve para fornecedores. Todo usuário é uma pessoa, mas nem toda pessoa será 

um usuário (por definição só são usuários as pessoas físicas).  

O atributo “Tipo Pessoa” na entidade “Pessoa” serve apenas como um marcador 

para representar se a pessoa ali representada é uma generalização de Pessoa Física ou 

Jurídica. A existência de outros papéis facilita para o sistema saber que ação tomar com 

aquela pessoa física em questão. Porque o provedor SaaS pode ter uma opção de cobrança 

com usuários nominados. Assim, qualquer usuário pode ter um tipo de papel no sistema. O 

atributo “data de cadastro” na entidade “Pessoa” serve para controlar o acesso ao sistema 

SaaS. Outras entidades existentes no modelo, tais como endereço, estado, cidade, bairro, 

email, telefone e profissão, são dados suficientemente capazes de identificar o usuário. O 

tipo papel é uma variável para controlar a especialização de pessoa física. Apenas para 

diferenciar o que o usuário está representando no sistema. Se inquilino, fornecedor 

aplicação ou SaaS.  

                                                           
15

 IE (Information Engineering) – Também conhecida como “pé-de-galinha” é uma notação utilizada para 
modelar modelos de dados lógicos. 



150 

 

 
Estado
Identificador Do Estado Cidade

Identificador da Cidade
Nome Estado
Sigla do Estado Nome Cidade Bairro

Identificador do Bairro

Nome do Bairro

Relacionamento Cidade Estado
Identificador do Relacionamento Cidade Estado

Identificador Do Estado (FK)
Identificador da Cidade (FK)

Relacionamento Bairro Cidade Estado
Identificador Relacionamento bairro cidade Estado

Identificador do Relacionamento Cidade Estado (FK)
Identificador do Bairro (FK)

Endereco
Identificador Endereco

Tipo Endereco
Logradouro
Bairro
Complemento
CEP
Identificador Relacionamento bairro cidade Estado (FK)

Relacionamento Enderecos Pessoas
Identificador Endereco (FK)
Identificador Pessoa (FK)

Indicador Tipo Endereco

Relacionamento Pessoas Telefones Pessoa

Identificador Pessoa (FK) Identificador Pessoa
Identificador Telefone (FK) Nome Pessoa

Tipo Pessoa Emails da Pessoa
Data Cadastro Identificador Pessoa (FK)

Identificador do Email da Pessoa

Descrição Emails da Pessoa
Tipo Pessoa

Pessoa Jurídica Pessoa Física
Identificador Pessoa (FK)

Telefone Identificador Pessoa (FK)
Profissao

Identificador Telefone Tipo Pessoa Fisica Registro Geral
Nome Fantasia Identificador Profissão

Orgão Emissor
Identificador Tipo Telefone (FK) CNPJ CPF Nome Profissao
DDD Telefone Inscricao Estadual Identificador Profissão (FK)
Numero Telefone Tipo Papel (FK)

Tipo Papel
Tipo Telefone Tipo Papel
Identificador Tipo Telefone Tipo Papel
Descrição Tipo Telefone Descrição Tipo Papel

Usuário
Identificador Pessoa (FK)  
Senha

Figura 70 - Modelo Pessoas 

 



151 

 

4.7.2 MODELO CONTRATO   
 

As figuras 71 e 72 apresentam os modelos de contratos entre Fornecedor SaaS e 

Fornecedor da Aplicação e entre Fornecedor SaaS e Inquilino. O provedor SaaS oferece 

aos inquilinos um contrato no qual se estabelecem regras de negócio que serão permitidas 

para utilizar os serviços SaaS relacionado à acessos, sistemas e número de usuários 

simultâneos em operação. Por isso, antes da geração da tabela contrato, foi criada a tabela 

“Regras de Cobrança”, e essa tem ligação com a entidade “Contrato Locação Sistema” e 

“Contrato Fornecimento Sistema” que serão tabelas ternárias de ligação muitos para 

muitos entre pessoa, sistema e cobrança. Os dados dessas tabelas referem-se, basicamente, 

aos dados do contrato e, neste caso, o identificador do tipo de cobrança, percentual de 

acréscimo ou desconto com base no preço original.  

Vale ressaltar que a cobrança será feita conforme as regras estabelecidas nas 

cláusulas do contrato. Essas regras não são padronizadas e depende do cliente. Desta 

forma, nada impede que cada inquilino possa ter um tipo de cobrança diferente. Assim, 

caso o inquilino faça um acordo com o fornecedor por número de usuários, e se ele quiser 

excluir um usuário antes do pagamento, este usuário será marcado como excluído ou 

removido para outra tabela. Porém, como o acordo do contrato é para “x” usuários, não 

importando se ele tem “x – y” usuários, e o valor deverá ser cobrado por “x” usuários, e 

será considerado acesso a “x” usuários simultaneamente. O preço original ficará em uma 

tabela chamada “Tabela de Preços” com atributos do tipo “data inicial e final de vigência” 

e “valor básico da cobrança” (o preço para determinado tipo de cobrança).  

Uma regra tem um ou mais preços conforme a vigência. Por exemplo: um contrato 

foi feito com a regra 1 com o preço 1 e, após determinado tempo, ainda durante a vigência 

do contrato, houve uma variação no preço apara a regra 1. Daí, cria-se o preço 2 para a 

regra 1. Os novos contratos que usarem a regra 1 terão o preço 2, mas o contrato que ainda 

está em vigor continua com o preço 1. A data de inicio de vigência na “tabela preço” está 

em azul, por ser uma chave única descendente com o tipo de cobrança.  

 

 



152 

 

Sistema

Identificador do Sistema
Pessoa

Nome do Sistema
Identificador Pessoa

Descricao Sistema
Identificador do Fornecedor do Sistema (FK) Pertence a Nome Pessoa
Data Cadastro Tipo Pessoa
Identificador do tipo do sistema (FK) Data Cadastro
Identificador do Idioma (FK)
Identificador do tipo de CSS (FK) Locatario

É contratado por

Contrato Locacao Sistema

Identificador Contrato Locacao Sistema

Identificador do Sistema (FK)
Identificador Locatario (FK)
Identificador Tipo de Cobrança (FK)
Identificador do Preço (FK)
Data Contrato
Identificador do Idioma (FK)
Data Inicio de Vigência
Data Final de Vigência
Percentual Acrecimo ou Desconto
Indicador de Acrecimo ou Desconto

Tabela de preços

Identificador Tipo de Cobrança (FK)
Identificador do Preço

Data Inicio de Vigência
Data Final de Vigência
Valor Básico de Cobrança

Regras de Cobrança

Identificador Tipo de Cobrança

Nome do Tipo de Cobrança
Descrição do Tipo de Cobrança

 

Figura 71 – Modelo Inquilino 
 

O usuário (Provedor de um sistema SaaS) deverá se cadastrar como usuário do 

gerenciador SaaS que controlará os sistemas por ele colocados para aluguel. Com isto, ele 

também se torna um inquilino. Mesmo que ele (o inquilino do fornecedor) não pague pelo 

serviço do gerenciador, deverá usar os sistemas de controle do SaaS. Porém, se ele desejar 



153 

 

contratar outro serviço SaaS, tal como um sistema de contabilidade, por exemplo, estará a 

usar a mesma senha para acesso, mas só verá os módulos de contabilidade por ele 

contratados. Em suma, até o provedor do SaaS é um inquilino para efeito de uso dos 

sistemas do SaaS. Por isso, a tabela usuário tem um relacionamento de muitos para muitos 

com a tabela sistema.  

 

Sistema

Identificador do Sistema

Nome do Sistema Pessoa
Descricao Sistema Identificador Pessoa
Identificador do Fornecedor do Sistema (FK) Pertence a
Data Cadastro Nome Pessoa
Identificador do tipo do sistema (FK) Tipo Pessoa
Identificador do Idioma (FK) Data Cadastro
Identificador do tipo de CSS (FK)

Fornece para Contrato
É contratado

Contrato Fornecimento Sistema

Identificador Contrato Fornceimento Sistema

Identificador do Fornecedor do Sistema (FK)
Possui Identificador do Sistema (FK)

Tipo do Sistema Identificador Tipo de Cobrança (FK)
Identificador do Preço (FK)

Identificador do tipo do sistema Data Inicio de Vigência

Descricao do Tipo do Sistema Data Final de Vigência
Indicador de Acrecimo ou Desconto
Percentual Acrecimo ou Desconto

Tabela de preços

Identificador Tipo de Cobrança (FK)
Identificador do Preço

Data Inicio de Vigência
Data Final de Vigência
Valor Básico de Cobrança

Regras de Cobrança

Identificador Tipo de Cobrança

Nome do Tipo de Cobrança
Descrição do Tipo de Cobrança

 

Figura 72 – Modelo Contrato Fornecedor 

 

 

 

 

 

 



154 

 

4.7.3 ACESSO USUÁRIO 

  

O modelo de acesso do sistema foi baseado no padrão Role-Based Access Control - RBAC, 

que é um modelo de controle de acesso para a segurança das informações e recursos em 

ambientes informatizados. Para utilização do modelo é necessário utilizar algumas 

convenções (Ferraiolo & Kuhn, 1992).  A figura 73 apresenta a estrutura de um RBAC, 

sendo o modelo baseado em:  

• Assunto = agente de uma pessoa ou automatizado;  

• Papel = função de trabalho ou o título que define um nível de autoridade; 

• Permissões = aprovação de um modo de acesso a um recurso;  

• Sessão = um mapeamento envolvendo assunto e papel / ou permissão;  

• RH = parcialmente ordenado papel hierarquia que também pode ser escrito:   

 Um sujeito pode ter múltiplas funções; 

 Um papel pode ter múltiplos sujeitos;  

 Um papel pode ter permissões de muitos;  

 A permissão pode ser atribuída a vários papéis. 

 

 

Figura 73 - Estrutura do RBAC 

 

A figura 74 mostra o modelo de Acesso do sistema gerenciador de sistemas SaaS. 

A tabela “Acessos” indica o acesso (os assunto no modelo RBAC), ou seja, a parte do 

sistema que está disponível para o usuário (um item de menu, ou um módulo, por 

exemplo). A tabela “Grupos de Acessos” (que seria o papel no modelo RBAC) contém os 



155 

 

papéis que cada usuário poderá representar. Já na tabela de “Relacionamento Grupo de 

Acesso” é a parte que informa que assuntos estarão disponíveis para cada papel (que no 

modelo RBAC seriam as permissões). 

Sistema
IDSistema

NMSistema
DSSistema
IDFornecSistema (FK)
DTCadastro
IDTPSistema (FK)
IDIdioma (FK)
IDTPCSS (FK)

Grupos_de_Acesso
IDGrupoAcesso

NMGrupoAcesso
IDSistema (FK) Contr_LocacaoSistema

IDContr_LocacaoSistema
Acessos
IDNivelAcesso IDTPCobranca (FK)

IDPrecoBasico (FK)
IDSistema (FK) IDLocatario (FK)
DSAcesso IDSistema (FK)

DTContrato
IDIdioma (FK)
DTInicioVigencia
DTFimVigencia
PCAcrecimoDesconto

RLGruposAcessos NDAcrecimoDesconto

IDRLGruposAcessos

IDNivelAcesso (FK)
IDGrupoAcesso (FK)
IDTPHabilitacao (FK)

TPHabilitacao
IDTPHabilitacao

DSTPHabilitacao

NVAcessoUsuario
IDRLUsuarioSistema (FK)
IDRLGruposAcessos (FK) RLUsuarioSisatema

IDRLUsuarioSistema

IDContr_LocacaoSistema (FK)
IDIdioma (FK)
IDPessoa (FK)

 

Figura 74 - Acesso Usuário  

 

É importante lembrar que a tabela “Acessos” deve possibilitar diferentes tipos de 

permissões. A permissão é dada na tabela “NVacesso Usuário”, ou seja, o usuário 

fornecedor de SaaS poderá ser um inquilino que utilize a mesma senha, basta dar 

habilitação a ele. 

 

 

 



156 

 

4.7.4 MODELO DICIONÁRIO_IDIOMAS  
 

A figura 75 apresenta a modelagem do gerenciamento de idiomas do sistema que contém 

três tabelas “Dicionário”, “Termos”  e “Idioma”. Cada nome é cadastrado na tabela 

dicionário e suas diversas traduções serão colocadas em uma segunda tabela chamada 

“Termos”. Inicialmente, o provedor SaaS cadastra o termo no sistema e verifica se o termo 

não existe. Caso não exista, cadastra-o e, do contrário, rejeita-o, e envia uma mensagem 

que dá a informação do processamento. A tabela “Termos” é o local onde se armazenam os 

nomes dos labels existentes na tela de cada sistema, a qual vai conter os textos e 

expressões para a tradução. Por exemplo, lblNome (nome do termo) e na semântica 

informa que é um label (nome). A  tabela “Idioma” vai conter os nomes dos idiomas que 

serão usados nos sistemas. Exemplo: Inglês, Frances, Japonês, Alemão, dentre outros 

idiomas. Em seguida, o usuário cadastra as traduções e informa o idioma, o termo e a 

tradução. Essa tradução localiza-se na tabela ‘Dicionário de Idiomas’. Como exemplo, 

pode-se dizer que para o idioma 1 “português” estará o valor ‘nome’, e para o idioma 2 

"inglês" estará o valor ‘name’, e assim por diante. 

Sistema

Identificador do Sistema
Idioma

Nome do Sistema
Identificador do Idioma

Default Descricao Sistema

Nome do Idioma Identificador do Fornecedor do Sistema (FK)
Data Cadastro

Possui Termos Identificador do tipo do sistema (FK)
Identificador do Idioma (FK)

Identificador de Termos Identificador do tipo de CSS (FK)

Nome do Termo
Descricao Semantica do Termo Contém

Contém Está contido em
Dicionário de Idiomas

Termos do Sistema
Identificador de Termos (FK)
Identificador do Idioma (FK) Identificador de Termos (FK)

Identificador do Sistema (FK)
Descricao da Traducao

 
 

Figura 75 – Modelo Dicionário Idiomas 

 
 

 

 

 



157 

 

4.7.5 MODELO LOG    
 
A figura 76 apresenta o modelo de gerenciamento de log de conexão, e informa que 

‘Inquilino’ ligado a que ‘Fornecedor’ entrou e saiu do sistema, fazendo o armazenamento 

da data e hora de entrada e saída, possibilitando verificar o  tempo de conexão em que cada 

usuário teve no sistema do fornecedor. O log principal e o de acesso a módulos podem ser 

ativados ou não para qualquer tipo de regra. Os logs devem ser ativados se a regra de 

negócio exigir esta ativação. Por exemplo, se a regra quer controlar quem acessa o sistema, 

mas não diz o que acessa então só o log principal é ativado. Se a regra quer controlar o 

módulo, então o log de conexão de módulo será ativado. 

Sistema
Identificador do Sistema

Nome do Sistema
Descricao Sistema

Possui Identificador do Fornecedor do Sistema (FK)
Possui Data Cadastro

Identificador do tipo do sistema (FK)
Identificador do Idioma (FK)
Identificador do tipo de CSS (FK)

Grupos de Acesso
Identificador do Grupo de Acesso

Identificador do Sistema (FK)
Nome Grupo Acesso É contratado por

Possui Contrato Locacao Sistema
Identificador Contrato Locacao Sistema

Identificador do Sistema (FK)
Identificador Locatario (FK)
Identificador Tipo de Cobrança (FK)
Identificador do Preço (FK)
Data Contrato
Identificador do Idioma (FK)
Data Inicio de Vigência
Data Final de Vigência
Percentual Acrecimo ou Desconto

Relacionamento Grupos e Acessos Indicador de Acrecimo ou Desconto

Identificador Rwelacionamento Grupos e Acessos

Identificador do Grupo de Acesso (FK)
Identificador de Acesso (FK) Acessa
Identificador Tipo Habilitação (FK)

Default

Idioma
Identificador do IdiomaDefault

Possui Nome do Idioma
Tipo Habilitação

LOG de Conexções Principais
Identificador Tipo Habilitação

Preferência Identificador Contrato Locacao Sistema (FK)
Descrição Tipo Habilitacao Identificador Usuário (FK)

Data Hora de LOG IN

Data Hora de LOG OUT

Níveis de Acesso do Usuário
Usuário

Identificador Relacionamento Usuario Sistemas (FK) Está habilitado Renlacionamento Usuarios Sistemas
Identificador Rwelacionamento Grupos e Acessos (FK) a acessar Identificador Relacionamento Usuario Sistemas Identificador Pessoa (FK)

Está Habilitado 
Identificador Contrato Locacao Sistema (FK) Senha
Identificador do Idioma (FK) a Acessar Nome Login
Identificador Usuário (FK) Indicador Usuário Master

LOG de Conexão de Módulos
Data Hora de LOG IN
Identificador de Acesso (FK)
Identificador Relacionamento Usuario Sistemas (FK)

Data Hora de LOG OUT
 

Figura 76 - Modelo Gerenciamento de Log 



158 

 

4.7.6 MODELO ENTIDADE RELACIONAMENTO UNIFICADO  
 

 A figura 77  apresenta o modelo entidade relacionamento unificado com os 
submodelos Pessoas, Contrato (Inquilino/Fornecedor), Acesso Usuário, 
Dicionário_Idiomas, Layout e Log.   

SUBMODELO 01: PESSOAS 

Tabela : Cidade 
É uma tabela de domínio que armazena os nomes dos municípios brasileiros. Possui um 
relacionamento muitos x muitos com a tabela “Estado”. Um nome de cidade (município) 
pertence a um ou a vários estados brasileiros. 
 
Tabela: Estado 
É uma tabela de domínio que armazena os nomes dos estados brasileiros. Possui um 
relacionamento muitos x muitos com a tabela “Cidade”. Um estado possui uma ou mais 
cidades (municípios). 
 
Tabela: Relacionamento Cidade Estado 
É a tabela que proporciona, fisicamente, o relacionamento entre os estados e seus 
municípios. 
 
Tabela: Bairro 
É uma tabela de domínio que armazena os nomes dos bairros dos diversos municípios 
brasileiros. Possui um relacionamento muitos x muitos com a tabela “Relacionamento 
Cidade Estado”. Um nome de bairro pertence a um ou a muitos municípios e um município 
possui um ou muitos bairros. 
 
Tabela: Relacionamento Bairro Cidade Estado 
É a tabela que proporciona, fisicamente, o relacionamento entre os bairros e suas cidades. 
 
Tabela: Endereço 
É uma Tabela de cadastro para manter dados dos usuários cadastrados no sistema. 
 
Tabela: Pessoa  
É uma tabela de generalização (física e juridica) essas são especialização de pessoa Pessoa 
Fisica que são generalizações de usuários e usuários são especializações de pessoa fisica. 
Os demais campos são dados para manter o nome da pessoa, CPF etc. Possui um 
relacionamento 1 obrigatório com as tabelas email, 1 para muitos com as tabelas (sistema, 
contrato).  
 
Tabela: Profissão 
É uma tabela de domínio com os nomes das profissões existentes. O tipo de ligação entre 
uma tabela e outra é chamada de integridade referencial (linha continua) onde tabela pai e 
filha. A chave primária da tabela pai é parte integrante da chave primária da tabela filha. 
No caso da linha pontilhada, indica uma relação fraca entre tabelas. A chave primária da 
tabela pai não está contida na chave primária da tabela filha. A referência entre elas se dá 



159 

 

através de chaves estrangeiras. Possui um relacionamento de 1 para muitos com a tabela 
pessoa física.  
 
SUBMODELO 02:  CONTRATO INQUILINO E FORNECEDOR 

Tabela : Sistema 
É uma tabela de domínio dos sistemas fornecidos ao SaaS e disponibilizados para locação. 
Possui um relacionamento de 1 para muitos com a tabela termos do sistema e contrata 
muitos sistemas para 1 tipo de sistema. Todo sistema possui um idioma. Todo sistema 
possui um relacionamento para muitos tipos de acessos. Todo sistema possui vários  
modelo de layout. Todo sistema possui um contrato ou mais contratos (1 para n).   
  
Tabela : Tipo Sistema 
É uma tabela de domínio para manter dados de áreas de atuação do tipo do sistema 
cadastrado, saúde, contábil, informática etc. Possui um relacionamento de 1 para muitos 
com a tabela sistemas. 
 
Tabela : Contrato Locação Sistema 
É uma tabela de domínio para manter todos os contratos de locação feita entre inquilino e 
provedor SaaS.  Possui um relacionamento de muitos para 1 com a tabela sistema. Todo 
contrato possui um locatário um relacionamento de (muitos para 1).  
 
Tabela : Contrato Fornecimento Sistema 
É uma tabela de domínio para manter todos os contratos de locação feita entre fornecedor e 
provedor SaaS.  Contem um relacionamento de (1 para muitos) com a tabela pessoa, tabela 
preço e sistema. 
 
Tabela : Preços 
É uma tabela de domínio para cadastrar os preços de cobrança ou pagamento de contratos 
de sistemas administrados pelo administrador SaaS. 
 
Tabela : Regras de Cobrança 
É uma tabela de domínio de regras de cobrança para pagamento de contratos administrados 
pelo fornecedor SaaS. Possui um relacionamento 1 para muitos com a tabela preço. 
 
 
SUBMODELO 03:  ACESSO USUÁRIO 

Tabela : Grupo de Acesso 
É uma tabela de domínio para representar o papel de cada usuário, ou seja, é um conjunto 
predefinido de acessos. Possui um relacionamento de 1 para muitos com a tabela sistema.  
 
Tabela : Acessos 
É uma tabela de domínio que indica o assunto, ou seja, a parte do sistema que está 
disponível para o usuário, ou seja, é o que o sistema oferece ao usuário. 
Tabela : Relacionamento Grupo Acesso 
É a tabela que proporciona, fisicamente, o relacionamento entre os grupo de acesso e 
acesso. 
 



160 

 

Tabela : Tipo Habilitação 
É a tabela de domínio dos tipos de permissões, indica qual direito de acesso o usuário 
possui.    
Tabela : Niveis de Acesso 
É a tabela de domínio que informa que nível que acesso cada usuário poderá acessar.  
 
Tabela : Relacionamento Usuário Sistema 
É a tabela que proporciona, fisicamente, o relacionamento entre sistemas e usuários. 
 

SUBMODELO 04:  ACESSO IDIOMAS 

Tabela : Idioma  
É uma tabela de domínio para manter dados de todos os idiomas para tradução nos 
sistemas fornecidos pelo SaaS.   
 
Tabela : Termos 
É uma tabela de domínio onde se armazenam os nomes dos labels existentes na tela de 
cada sistema, a qual vai conter os textos e expressões para a tradução. 
 
Tabela : Dicionário 
É uma tabela de relacionamento entre termos e idioma, no qual possibilita a tradução de 
cada termo para o idioma escolhido. 
 
 
SUBMODELO 05:  MODELO DE LOG 

Tabela : Log de Conexões Principais  
É uma tabela de log que informa quem acessou o sistema e quando ele foi acessado. Tem a 
função de quantificar os acessos a determinado sistema conforme regra de cobrança 
previamente estabelacida.  
 
Tabela : Log de Conexões de Módulos 
É uma tabela de log que informa que área do sistema foi acesso, por queme quando. Tem a 
função de quantificar acessos e determinar o módulo de sistema conforme regra de 
cobrança previamente estabelacida. 
  
 
SUBMODELO 06:  LAYOUT 

Tabela : Modelo de CSS do Inquilino 
É uma tabela que mantem os modelos CSS do inquilino para configuração de layout. 
 

Tabela : Tipo de CSS  
É uma tabela que disponibiliza os tipos de CSS cadastrados no sistema. 
 

Tabela : Relacionamento Sistema Tipo CSS  
É a tabela que proporciona, fisicamente, o relacionamento entre sistemas e modelos de 
layout utilizados pelos inquilinos.  
 



161 

 

Bairro
rmos Estado Tipo Telefone

Te
Tipo do Sistema Contrato Fornecimento Sistema Bairros dos Municípios Cidade

Unidade Federativa Domínio que indica o tipo do telefone.
Domínio dos Termos Usados pelos 
Sistemas e Disponibilizados para Domínios de áreas de atuação dos Contratos de Sistemas Fornecidos  brasileiros

do Brasil Município do Brasil Celular, Fixo Residencial, Fixo 
a serem Administrados pelo SaPaS

o para diversos Idiomas Sistemas. P Comercial,
Traduçã

Tais como Saúde, Contábil, Informática, Pertence a Possui Pertence a Fax, etc.
P P Relacionamento Cidade Estado

Contém Está contido em etc. Possui
Relacionamento entre cidades e Estados 

Possui Regras de Cobrança
P brasileiros P P

Domínio das Regras de Cobrança ou 
Termos do Sistema Pagamento de Contratos Administrados Possui Telefone

P
Relacionamento entre os termos pelo SaaS Telefones das Pessoas 
disponibilizados e os sistemas Relacionamento Bairro Cidade Estado vinculadas ao SaaS
que os utilizam Relacionamento entre Bairros e

P P Municípios brasileiros Pertence a
P

Tabela de preços
Poss i

P Pu
Preços de cobrança ou Pagamentos de 

Dicionário de Idiomas Contratos de Sistemas Administrados Endereco

Relacionamento entre os termos e os pelo SaaS Relacionamento Pessoas Telefones
Domínio dos Endereços 

Idiomas, possibilitando a tradução de da Pessoa Relacionamento entre pessoas e 

cada termo para o idioma escolhido seus respectivos telefones
Contém É cPontratado É estabelecido em

P Sistema P
Domínio dos Sistemas Fornecidos Relacionamento Enderecos Pessoas

P ao SaaS e disponibilizados para 
Locação P Relacionamento entre os 

Endereços e as Pessoas
Possui PosCsouni tém É coPntratado por

modelos P
Possui

Possui Default Contrato Locacao Sistema Pessoa
Fornece para Contrato

Idioma Contratos de Locação de Sistemas Pessoa Física ou Jurídica que estáPossui Emails da Pessoa
Default P vinculada de alguma maneira ao SaaS

Domínio dos Idiomas usados disponibilizados ao SaaS P Pertence a
Seja como Locador de sistemas, Possui Emails das Pessoas vinculadas

Para tradução nos SistemaPsr 
P

eferência Modelo Acessa como Locatário de sistemas, ao SaaS
fornecidos ao SaaS Default Escolhido Locatario como usuário vinculado ao locatário, Profissao

Tipos de CSS ou alguma outra forma não descrita aqui domínio das Profissões das
pessoas Físicas Vinculadas ao SaaS

Domínios dos tipos de Layout a serem Tipo Pessoa
usados pelos Sistemas disponibilizados Exerce
ao SaaS

Z P
PossuPi tipo Z Tipo Papel

Pessoa Física
Pessoa Jurídica

Relacionamento Sistema Tipo CSS Domínio usado para diferenciar o que o 
Pessoas Físicas Vinculadas ao SaaS

uladas ao SaaS usuário está representando no sistema
Relacionamento entre os Sistemas Pessoas Jurídicas Vinc (Especialização de Pessoas)

P de Pessoas) se inquilino, fornecedor aplicação ou 
e os Layouts utilizados por eles (Especialização P SaaS

Possui LOG de Conexções Principais
ModPelo

Log que informa quem Acessou o Tipo Papel
P Modelos de CSS do Inquilido Sistema e quando ele foi acessado

Grupos de Acesso Disponibiliza os modelos de Layouts (Função principal quantificar os 
utilizados pelos Inquilinos P acessos a determinado sistema conforme 

Em RBAC este é o papel que cada usuário Z
regra de cobrança previamente 

deverá representar estabelecida) Usuário

Possui Acessos / Requisitos funcionais Usuários dos Sistemas Disponibilizados 
indica o acesso (assunto em RBAC) Renlacionamento Usuarios Sistemas no SaaS

e está disponível Está Habilitado (Especialização de Pessoas Física)
Tipo Habilitação a parte do sistema qu

P Relacionamento entre os Sistemas, 
para o usuário (um item de menu, ou um a Acessar

Domínio dos tipos de permissões os Usuários que utilizarão os sistemas 
módulo, por exemplo) P

Indica se a pessoa possui direitos de e os Idiomas que serão usados poPr 
Está habilitado 

leitura, escrita, exclusão, ou Contém estes usuários
a acessar

combinação de qualquer elemento acima P

Possui Níveis de Acesso do Usuário
P P

Relacionamento que informa os Grupos de LOG de Conexão de Módulos
Relacionamento Grupos e Acessos Acesso de cada Usuário. Log que informa que Área do Sistema foi 
esta é a parte que informa que assuntos Ou seja, o que cada usuário irá acessada, por quem e quando.
estarão disponíveis para que papel acessaar no Sistema Contratado por ele. (Tem função de quantificar os acessos a 
em RBAC P

Acessa P determinado módulo de sistema conforme 
São as permissões, propriamente ditas regra de cobrança previamente 

estabelecida)  

Figura 77 - Modelo Entidade Relacionamento Unificado 



162 

 

4.8 SERVIÇOS DE ESCALABILIDADE 
 
Como já foi visto na seção  2.15.5 e  2.15.6, existem várias formas de tratar a 

escalabilidade. Percebe-se que garantir a escalabilidade depende de vários fatores, tais 

como a forma como o sistema foi implementado, o sistema operacional e  o banco de 

dados que serão utilizados. Vai depender também da quantidade de usuários simultâneos, 

do volume de dados etc. Para demonstrar a escalabilidade, foi escolhida a replicação dos 

dados, por ser considerada menos complexa do que o tipo particionamento e possuir vários 

exemplos demonstrativos. Esta demonstração será desenvolvida no Sistema de 

Gerenciamento de Banco de Dados (SGBD) SQL Server 2005. Para tanto,  foi criado um 

banco de dados composto por duas tabelas, o qual será replicado utilizando o tipo Merge 

Replication, assim como será utilizado usando uma base de dados no SQL Server Compact 

Edition. 

Inicialmente, é necessário criar a base de dados com suas respectivas tabelas e seus 

relacionamentos. Foi criado um banco de dados chamado ‘ORIGEM’. Nesta base de 

dados, existem duas tabelas: uma ‘INQUILINO’ e outra ‘SISTEMA’ como mostra a figura 

78 abaixo.   
 

 

Figura 78 – Desenvolvimento do banco para teste  



163 

 

Após criar o banco de dados e inserir dados nas tabelas, é necessário iniciar o 

processo de publicação do banco de dados. Ainda no Explorer do SQL Server, tem uma 

pasta chamada “Replication” e dentro desta pasta tem outra chamada de “Local 

Publications”. Para iniciar a publicação, deve-se clicar com o lado direito do mouse e 

selecionar “New Publication” como mostra a figura 79. 
 

 

Figura 79 – Criação da publicação do banco para replicar 

 
Posteriormente, é necessário escolher qual servidor (local)  será feito a publicação 

para distribuir a replicação conforme mostra a figura 80. 
 

 

Figura 80 – Configuração da replicação 



164 

 

A figura 81 mostra a confirmação  da configuração da distribuição. Vale ressaltar 

que é necessário que o usuário tenha  permissão de administrador na máquina. 

 

Figura 81 – Confirmação da configuração da distribuição 

 

Após fazer todas as configurações para a replicação, é iniciado o processo de 

publicação. Deve-se escolher o banco de dados para replicar os dados, neste caso a base é 

“ORIGEM” como mostra a figura 82. 
 

 

Figura 82 – Escolha do banco a ser replicado 



165 

 

Faz-se  necessário  escolher qual tipo de replicação (Snapshot, Transactional ou 

Merge Replication) será utilizado. Neste exemplo foi escolhido o tipo merge replication 

(figura 83). Cada um  serve para determinado tipo de problema como, por exemplo:  

• O Snapshot Replication:  faz uma fotocópia do banco de dados e compartilha a 

fotocópia com os seus usuários. Esse processo é moroso e consome vários recursos do 

servidor. Não é recomendado para bases de dados que sofrem muitas alterações. 

• O Transactional Replication: é considerada uma replicação maleável em relação a 

Snapshot. Nesse tipo de replicação o agente gerencia a base esperando por alterações e 

transmite apenas essas alterações para as replicas, de maneira otimizada e rápida. 

• Merge Replication: nesta replicação  o usuário e o editor efetuam alterações 

independentes na base de dados. Desta forma, as duas bases podem trabalhar 

desconectadas. No momento que as bases se conectarem novamente o agente merge 

agent verifica as alterações feitas na publicação por cada um dos usuários, mescla as 

alterações de maneira que os dados fiquem consolidados.   
 

 

Figura 83 – Selecionar o  tipo de replicação 

 
Após escolher o tipo de replicação,  deve ser selecionado  o tipo e a versão do 

banco.  Ex: SQL Server, MYSQL, Oracle. Neste caso, foi escolhido o SQL Server versão 

2005 a fim de acessar a publicação, como mostra a figura 84.   
 



166 

 

 

Figura 84 – Escolha do tipo de banco de dados 

 

Na próxima tela são escolhidos os artigos (articles) que serão publicados. Como 

neste exemplo só existem duas tabelas na base, e elas têm um relacionamento, então 

devem-se  selecionar as duas tabelas (Figura 85). 

 

Figura 85 – Escolha das tabelas do banco a serem replicadas 

 
 
 
 



167 

 

A próxima tela é um lembrete, informando que será adicionada aos campos das 

tabelas existentes uma coluna nova do tipo uniqueidentifier (único que garante valores 

globalmente únicos (Figura 86). 

 

Figura 86 – Confirmação de criação de coluna 

A figura 86 mostra que existe a possibilidade de incluir filtros na publicação, essa 

serve para publicar apenas os registros desejados. Neste exemplo, foi escolhida a 

publicação geral do banco. Depois se deve clicar em Creat a Snapshot imediately para 

continuar a configuração da publicação (Figura 87).  

 

 

Figura 87 – Escolha de colunas 

 



168 

 

Depois, é necessário dar um nome para o banco a ser replicado. Neste caso, como é 

a publicação da base de dados ORIGEM, o nome escolhido foi PUB_ORIGEM, tal como é 

apresentado na figura 88.  Ao finalizar esta etapa, será mostrada uma tela demonstrando o 

status da publicação. 

 

Figura 88 – Criação da publicação 

 
A figura 89 mostra o status da publicação criada e pronta para receber assinantes, 

pois, a replicação do banco com suas tabelas, campos, entre outros, foram criadas com 

sucesso. No local das publicações (Local Publications) existe um banco replicado do 

banco [ORIGEM] chamado PUB_ORIGEM. 
 

 

Figura 89 – Banco replicado 



169 

 

Depois da criação da publicação da base, o usuário deve assinar a publicação 

existente. Para isto, será solicitada uma senha  para a segurança do banco de dados. Daí, é 

necessário criar a assinatura na pasta Replication/Subscriptions e clicar em New 

subscrition. Após todas as configurações, criação de publicação e da assinatura, basta 

sincronizar a assinatura, clicando-se com o botão do mouse direito sobre ela e selecionando 

o item “Syncronize”,  e toda a estrutura do banco estará pronta para o uso. 

Um banco replicado é muito útil  para o sistema gerenciador SaaS, principalmente 

para garantir a disponibilidade dos dados, pois ao reproduzir a base da aplicação, ela pode 

ser utilizada se o banco original não estiver disponível, e várias cópias poderão estar 

sincronizadas em diferentes servidores. 

 

4.9 SERVIÇOS DE SEGURANÇA 
 
A segurança em aplicações SaaS, por causa das suas particularidades, é mais cobrada do 

que em outros aplicativos. Por isto, para que o serviço de segurança de um Gerenciador de 

SaaS atenda às expectativas de seus usuários, é necessário envolver vários serviços, tais 

como segurança do sistema operacional, de aplicativos, de autenticação, de comunicação, 

de monitoramento e gerenciamento, certificação digital. Enfim, segurança em vários 

níveis. Percebe-se que existem várias formas de oferecer segurança. O importante é ter 

segurança em cada etapa da aplicação, ou seja, do browser do usuário até o servidor, de 

cada usuário para o servidor de Web, do servidor Web até o banco de dados e de cada 

objeto do banco de dados. Todos esses cuidados são importantes para impedir o 

procedimento não autorizado de aplicativos, proteger os recursos contra uso não 

autorizado, garantir que o usuário seja de fato a pessoa que afirma ser, garantir que as 

informações transmitidas pela rede não sejam modificadas,*monitorar as tentativas de 

violação da segurança, melhorar continuamente as técnicas de segurança de acordo com 

ameaças, gerenciar usuários com vários tipos de controle de acesso e implementar 

certificação de acordo com a norma ISO.  

 Existem várias possibilidades de implementar estes serviços de segurança, tais 

como a utilização do protocolo Kerberos, que adiciona um nível maior de segurança à rede. 

Com a implantação do Kerberos o usuário pode garantir a sua identidade a um servidor (e 

vice-versa) numa conexão de rede não confiável. E logo após a autentificação o cliente e o 

servidor podem criptografar todo o tráfego de comunicação para garantir a privacidade e 



170 

 

integridade dos dados. Existem tutoriais que explicam passo-a-passo como configurar o  

protocolo kerberos em ambientes Linux e Windows e podem ser encontrados em 

(VELOSO, online), (MICROSOFT, online) e (BRITO, 2005). 

 Outra possibilidade seria utilizar uma solução nova de segurança, o Hasp SRM 

SaaS Pass. Segundo Mukul Krishna, diretor global de prática de mídia digital na Frost & 

Sullivan, o sistema de segurança HASP SRM SaaS Pass será bem recebido no mercado de 

software porque permite aos usuários finais e aos fornecedores usarem sistemas SaaS num 

ambiente completamente seguro.  

Este serviço fundamenta-se em uma aplicação cliente instalada no computador do 

usuário final que comunica pela Internet com a aplicação do fornecedor do serviço. A 

aplicação cliente, que foi instalada para o computador específico, coleta e comunica o 

login e senha à aplicação Web para validação. Para garantir uma segurança maior, a senha 

do usuário e uma cadeia de validação gerada pelo servidor e com limite temporal são 

encriptadas usando o motor de encriptação HASP SRM AES 128-bit, antes de serem 

enviadas para a aplicação Web do fornecedor de serviço.  

 Fazer essa integração do SaaS Pass requer alterações mínimas à aplicação Web do 

fornecedor de serviço, e suporta qualquer base de dados de nomes de utilizador existente 

(ALADDIN KNOWLEDGE, 2009, online). Os serviços de login e o módulo de Web 

Service estão disponíveis com o HASP SEM sem qualquer custo adicional para testes e se 

encontra disponível em ALADDIN KNOWLEDGE (2009, online).    

 Outro serviço utilizado para cenários de autenticação, autorização e controle de 

acesso é a Hol da Enterprise Library, que oferece uma variedade de blocos de aplicação e 

bibliotecas para auxiliar nas questões de criptografia, acesso a dados, logging e auditoria, 

segurança de autorização etc BANAGOURO (2009, on-line). 

 Por fim, começam a surgir no mercado plataformas de desenvolvimento na nuvem, 

que são um conjunto integrado de ferramentas e serviços que podem ser usados por 

fornecedores de software e departamentos de TI para criar qualquer aplicativo e executá-lo 

na mesma infra-estrutura que fornece os aplicativos. Essas plataformas funcionam como 

provedores de computação na nuvem e oferecem aos desenvolvedores basicamente tudo o 

que eles precisam para criar e rodar aplicativos no ambiente cloud, como hospedagem da 

aplicação, ambiente de desenvolvimento, serviço de segurança, escalabilidade etc. Dentre 

eles, podem ser citados o Google, Microsoft Azure, Force, Zooho etc.  



171 

 

Segundo Mckendrick (2008, pag. 1), este mercado tem sido mais utilizado entres as 

empresas de menor porte, mas a tendência é que outras organizações adiram cada vez mais 

aos serviços de computação em nuvem por causa da redução do custo dos softwares. De 

acordo com Mckendrick (2008, pag. 8), os gestores de TI estão seguros em relação ao nível 

de segurança de dados oferecido pelas plataformas, e diz ser tão bom ou melhor que muitos 

serviços que outros departamentos de TI poderiam oferecer.   

 Percebe-se que os clientes de SaaS têm uma preocupação maior a respeito da 

segurança dos dados por ficarem em bases de dados externas. Por isso, o fornecedor de 

sistemas SaaS deve ter um conhecimento bem amplo da segurança da informação, 

oferecendo serviços como: cópias de segurança dos dados, implantação de conexão segura 

SSL, entre outros. E os clientes devem procurar obter informações sobre a empresa a ser 

contratada, para analisar a qualidade do serviço antes de contratá-la.  
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



 

172 

 

 
 
 
 
 
 
 
 
 
5 CONSIDERAÇÕES FINAIS 
 
Esse trabalho de conclusão de curso propôs desenvolver uma pesquisa bibliográfica 

abrangente sobre SaaS, oferecer um referencial teórico que inclui diversas áreas ligadas ao 

tema e desenvolver uma modelagem que represente as principais funcionalidades do 

sistema, englobando os principais aspectos de SaaS. 

A revisão de literatura foi feita com base em pesquisas bibliográficas envolvendo 

livros, artigos, publicações, sites, fóruns, etc. A revisão abordou várias teorias referentes ao 

tema, tais como: definição, conceito, desenvolvimento, custos, teoria da cauda longa, 

mecanismo de geração de receita (cobrança do serviço), mercado, comparativo com 

aplicações tradicionais, SLA, vantagens/desvantagens, exemplos existentes, níveis de 

maturidade, ciclo de desenvolvimento, disponibilidade dos dados, portabilidade, 

escalabilidade, customização, arquitetura do modelo, serviço de metadados e serviço de 

segurança.    

Para desenvolver a modelagem foi necessária primeiramente, a instalação de 

ferramentas como o Visio, Erwin e SQL Server.  Paralelamente, foram realizadas 

entrevistas com diversos profissionais a fim de coletar os requisitos necessários para a 

definição de atores e divisão dos módulos. A modelagem inclui diversos tipos de artefatos, 

tais como entrevistas, coleta, diagramas de caso de uso, casos de uso expandido, diagramas 

de sequência, diagrama de classes e modelo ER.  

Para o diagrama de classes foram utilizados alguns conceitos de design patterns e 

boas práticas recomendadas para SaaS, pois não foi encontrada nenhuma ferramenta ou 

padrão de modelagem própria para SaaS. Para o modelo ER foi utilizado o Erwin que 

possui a notação IE (Information Engineering) para representar as multiplicidades. E, para 

desenvolver o gerenciamento de acesso de usuário, foi utilizado o padrão de acesso RBAC 

para representar melhor os papéis-assunto e as permissões. 

O sistema, quando implementado, será uma ferramenta responsável para 

administrar um modelo de entrega de software em larga escala, envolvendo controle de 



173 

 

acesso de usuários, gerenciamento de sistemas, gerenciamento de log, configuração de 

interface e idiomas. Assim, a empresa fornecedora se responsabilizará pela infra-estrutura, 

manutenção e suporte dos produtos (outras aplicações SaaS), disponibilizando-as como um 

serviço, por meio da Web. E para a integração dos sistemas com o gerenciador SaaS será 

necessário utilizar Web services juntamente com tecnologias REST, SOAP, EAI, etc.  

Observou-se que quando se projeta um software para ser comercializado no modelo 

SaaS, deve-se ter a preocupação com uma série de questões novas como, por exemplo, 

planejar a modelagem dos dados de acordo com a arquitetura multitenant (multi-usuários), 

prover mecanismos de migração dos dados, oferecer uma disponibilidade de 99,99% da 

aplicação na Web de acordo com SLA, oferecer um acesso aos usuários baseado em 

papéis/ assuntos, oferecer escalabilidade e a alocação dos recursos, estender o modelo de 

segurança tradicional para garantir a confidencialidade das informações, dentre outros. 

Todas essas áreas devem ser bem entendidas pelo profissional de TI, pois são áreas 

importantes para desenvolver um SaaS de boa qualidade.  

Como trabalhos futuros, são sugeridos os seguintes: 

• Promover a implementação de todas as funcionalidades que são descritas na 

modelagem e, com o desenvolvimento do sistema, o fornecedor terá possibilidades de 

administrar vários sistemas e também ter a possibilidade de comercializar o sistema 

diretamente a fornecedores de SaaS. Com isso, a distribuição de software poderá ser 

feita em larga escala. Após a implementação do sistema, inserir algum tipo de sistema a 

fim de testar a comunicação das funcionalidades do gerenciador. 

• No mercado atual não existem muitas ferramentas para gerenciamento de SLA, e a 

maioria das vezes é necessária a intervenção humana para obter o resultado dos 

relatórios da prestação de serviços (LIGOCKI, 2008, p. 40). Então, sugere-se que seja 

desenvolvido um sistema (SLA) para monitorar o gerenciamento de sistemas na parte 

de escalabilidade, performance, disponibilidade do sistema no ar, desempenho, entre 

outros, a fim de suprir as necessidades do mercado.  

• Promover, também, a possibilidade de ser gerado o desenvolvimento de uma solução 

de segurança referente ao controle de acesso, usuários, autenticação, certificação entre 

outros, que satisfaça as necessidades dos fornecedores, inquilinos e usuários finais. 

• É viável que seja feito um estudo sobre uso de Web Service e demais serviços de 

integração como REST, SOAP, EAI, para integração de aplicações no gerenciador. 



174 

 

• É interessante também fazer um estudo sobre SOA a fim de criar um estilo arquitetural, 

caso os fornecedores da aplicação necessitem. 

• Sugere-se que seja feito um estudo sobre as diversas plataformas de desenvolvimento 

de software na nuvem, tais como plataforma Azure, Zoho, Salesforce, Google, para 

avaliar as vantagens/desvantagens da utilização desses serviços na implementação e 

hospedagem de software como serviço. 

  Enfim, concluo que para o desenvolvimento geral do trabalho foram necessários 

diversos tipos de pesquisa, as quais exigiram considerável demanda de tempo para 

entendimento das diversas áreas ligadas ao trabalho. Houve a preocupação de  buscar 

contatos com diversos profissionais com conhecimentos específicos na área a fim de 

entender as principais funcionalidades de SaaS. Pode-se afirmar que há  poucos trabalhos 

desenvolvidos nesta área, pois é um modelo de negócios que ainda está em 

desenvolvimento. Espera-se que com a publicação deste trabalho, estudantes e 

profissionais da área pederão vir a ter maior cohecimento prático e teórico sobre o  tema 

em questão. 

 
. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



 

175 

 

 
 
 
 
  
 
 
 
 
6  REFERÊNCIAS BIBLIOGRAFICAS 
 
 
 (ANDERSON, 2006) ANDERSON, Chris. The long tail: why the future of 
business is selling less of more. Nova York, EUA: Hyperion, 2006. 238 p. 
 
 (ABNT-SC10, 1999) Associação Brasileira de Normas Técnicas – SC10 – 
Subcomitê de Software*-*Guia Para Utilização das Normas sobre Avaliação de 
Qualidade de Produto de Software – ISO/IEC9126 E ISO/IEC 14598. Disponível em: 
<http://www2.dem.inpe.br/ijar/GuiaUtilNormTec.pdf>. Acesso em: 22 de junho de 2009. 
 (ALMEIDA, 1999) ALMEIDA, Luís Fernando Barbosa. A Metodologia de 
Disseminação da Informação Geográfica*e*os*Metadados.* Tese de Doutorado. 
Centro*de*Ciências*Matemáticas*e*da*Natureza*UFRJ.*Rio*de*Janeiro,*1999.* 
Disponível*em:<www.ibict.br/anexos_secoes/METADADOS.ppt>. Acesso*em:*25 de 
setembro de 2009. 
 
 (AMORIN, 2008) AMORIN, Thiago Luiz. Técnicas e Oportunidades de Negócio 
na Web 2.0.  Trabalho de Conclusão de Curso (TCC) - Universidade Federal de 
Pernambuco – Graduação em Ciência da Computação, Recife. Disponível em: 
<http://www.cin.ufpe.br/~tg/2007-2/tlba.pdf>. Acesso em 9 de julho de 2009. 
 
 (ALADDIN, 2009) ALADDIN, Knowledge. Aladdin Anuncia HASP 
SEM*SaaSPass.*Australia,*2009.*Disponível*em:*<http://www.aladdin.com/PressReleas
es/post/Aladdin-Anuncia-HASP-SRM-SaaS-Pass.aspx?product=hasp>. Acesso em: 25 de 
setembro de 2009. 
 
 (ARAÚJO, 2009) ARAÚJO, Osnaldo. Conceito de Precificação. 
Disponível*em:*<http://www.dearaujo.ecn.br/cgi-bin/asp/precificacao.asp>.*Acesso*em: 
30 de outubro de 2009. 
 
 (BONDI, 2001) BONDI, André B. Characteristics of scalability and their impact on 
performance. Workshop on Software and Performance. Proceedings of the 2nd 
International Workshop on Software and Performance. Ottawa, Ontario, Canada: 
2001. p. 195-203. 
 
 (BRASILINK, 2009, on-line) Acordo de Nível de Serviço - SLA- Service Level 
Agreement. São Paulo, 2009. Disponível em: <http://braslink.com/sla.cfm>. Acesso em: 
05 de março de 2009. 
 
 (BRITO, 2005) BRITO Leonardo Jordão. Uso do protocolo de autenticação 
Kerberos em redes Linux. Curso de Pós-Graduação apresentada ao Departamento de 



 175 

 

Ciência da Computação da Universidade Federal de Lavras, 2005. Disponível em: 
<http://www.ginux.ufla.br/files/mono-LeonardoJordao.pdf>. Acesso em 16 de setembro de 
2009. 
 
  (BROWN, 2006) BROWN, Keith. O guia do desenvolvedor .NET para 
identificação. Disponível*em: <http://msdn.microsoft.com/pt-br/library/aa480245.aspx>. 
Acesso*em 18 de setembro de 2009. 
 
 (BARROS, 2008) BARROS, Diego, NAHUI Hugo, NACISMENTO, Manuela, 
XAVIER Turah. Projeto Firebird:*Sistemas de Reservas de Assentos para Teatro.  
Disponível em: <http://www.cin.ufpe.br/~txa/sgbd/documentoFinal.doc>. Acesso em: 10 
de julho de 2009. 
 
 (BANAGOURO, 2009, online) BANAGOURO, Michel. Hands-On Labs for 
Enterprise*Library*4.1.*Disponível*em:*<http://sharpcode.com.br/blogs/mbanagouro/a
rchive/2009/04/21/hands-on-labs-for-enterprise-library-4-1-march-2009.aspx>. Acesso em: 
26/09/2009. 
 
 (CITRIX, 2009, on-line). Citrix Divulga Resultados para o Primeiro Trimestre. 
(HomePage) Disponível em: <http://www.citrix.com.br/news/news_p.php?id=74>. Acesso 
em: 16 de junho de 2009. 
 
 (CARRARO & CHONG, 2006, on-line), CARRARO, Gianpaolo, CHONG, 
Frederick, WOLTER Wolter. Software as a Service (SaaS): An Enterprise Perspective. 
Microsoft*Corporation.*Disponível*em:* 
<http://msdn.microsoft.com/en-us/library/aa905332(loband).aspx>. Acesso em: 15 de 
março de 2009. 
 
 (CHONG*&*CARRARO,*2006),*CHONG,*Frederick,*CARRARO,*Gianpaolo.
*Architecture Strategies for Catching the Long Tail. 
Disponível*em:*<http://www.cistratech.com/whitepapers/MS_longtailsaas.pdf>.*Acesso 
em: 8 de março de 2009. 
 
 (CHONG,*CARRARO & WOLTER, 2006) CHONG, Frederick, CARRARO, 
Gianpaolo, WOLTER Roger. Multi-Tenant Data Architecture. Disponível em: 
<http://www.wrappedapps.com/files/729.pdf>. Acesso em: 10 de março de 2009. 
 
 (DESISTO, PLUMMER & SMITH, 2008, on-line) DESISTO Roberto. 
PLUMMER,*Darly,*SMITH,*David.*A*Relação*entre*Computação*em*Nuvem*e* 
SaaS.*Garther.*Disponível*em:*<http://info.abril.com.br/corporate/noticias/072008/2807
2008-1.shtml>. Acesso em: 7 de abril de 2009. 
 
 (ERICH GAMMA et al, 1995) Design Patterns: Elements of Reusable Object-
Oriented Software. 1.ed. Estados Unidos da América: Addison-Wesley, 1995.   
 
 (FEBRABAN,*2004)*GRUPO*DE*TRABALHO*ABBI*FEBRABAN.* 
Documento*Consultivo*Função*de*Compliance.*Disponível*em:*<http://www.febrab
an.org.br/Arquivo/Destaques/Funcao_de_Compliance.pdf>.*Acesso em: 03 de junho de 
2009. 



 176 

 

 
 (FERREIRA & QUADROS, 2008) FERREIRA, Helena, QUADROS, Ruy. 
Serviços Produtivos Intensivos em Conhecimento: Caracterização e dinâmica da 
inovação*no*setor*de*Telecomunicações*no*Brasil. VI Ciclo De Debates em Economia 
Industrial, Trabalho e Tecnologia, São Paulo 2008. Disponível em: 
<http://www.pucsp.br/eitt/downloads/vi_ciclo_ruyquadros_alair_2008.pdf>.*Acesso em: 1 
de junho de 2009.  
 
 (FERRAIOLO & KUHN, 1992)* David F. Ferraiolo, Richard Kuhn. Role-Based 
Access Control. National Institute of Standards and Technology Technology 
Administration U.S. Department of Commerce Gaithersburg, Md. 20899 USA. 15th 
National Computer Security Conference. pp. 554–563. Acesso em: 03 de junho de 2009. 
 
 (FIREHUNTER, 2008) FIREHUNTER, Group of executives, Agilent Tecnologia, 
SLA como Estabelecer*e*Garantir Níveis de Qualidade. (on-line). São Paulo, 2008. 
Disponível*em:*<http://www.pucsp.br/labcom/download/Agilent%20Seminar/SLA-
Como_Estabelecer_e_Garantir_Niveis_de_Qualidade.pdf>. Acesso em: 01 de junho de 
2009. 
 
 (GENENA, 2004) GENENA, Samia, Simplementação, Configuração e 
Customização do Sistema PI na Unidade Multipropósito de FCC. Trabalho de 
Conclusão de Curso (TCC) - Universidade Federal de Santa Catarina – Graduação em 
Engenharia de Controle e Automação Industrial, Florianópolis. Disponível em:  
<http://www.wbezerra.com.br/prh34/site/trabahos_finais/graduacao/Samia%20Genena_PR
H34_UFSC_DAS_G.pdf>. Acesso em: 13 de junho de 2009. 
 
 (GARTNER, 2009a, on-line). Gartner says Worldwide SaaS Revenue to Grow 
22 Percent in 2009. Disponível em: <http://www.gartner.com/it/pe.jsp?id=968412/> 
Acesso em 22 de junho de 2009. 
 
 (GARTNER, 2009b, on-line). Gartner Fact Checks the Five Most-Common 
SaaS Assumptions. Disponível em: <http://www.gartner.com/it/pe.jsp?id=889713/> 
Acesso em 22 de junho de 2009. 
 
 (GARTNER, 2009c, on-line). Mercado mundial de SaaS deve crescer 22% em 
2009.*Disponível*em:*<http://www.ethesis.inf.br/index.php?option=com_content&task=v
iew&id=5244&Itemid=135/> Acesso em 12 de julho de 2009. 
 
 (GROSSBARD, 2009, on-line)  GROSSBARD, Mark. Configurar a Autenticação 
Kerberos. Disponível em: <http://technet.microsoft.com/pt-br/library/cc263449.aspx>. 
Acesso em 22 de setembro de 2009. 
 
 (GRUMAN, 2008, on-line) GRUMAN, Galen. SaaS: What’s the real deal?. (on-
line).*Disponível*em:*<http://cio.co.nz/cio.nsf/specials/F006885AD1989184CC25732900
07E973>.*Acesso em: 10 de março de 2009. 
 
 (HIRSCHMAN,*2008)*HIRSCHMAN,*Shaun.*Arquiteturas*de*alta*disponibi
lidade*e*hospedagem*em*massa.*(on-line).*São*Paulo,*2007.*Disponível*em: 
<http://msdn.microsoft.com/pt-br/library/bb491120.aspx>. 



 177 

 

 
 (HOFFMAN, 2009, on-line) HOFFMAN, Reid. How I Did It: Reid Hoffman of 
LinkedIn.*Disponível*em:*<http://www.putneyschool.org/post/pdf/winter2009/reid_hoff
man.pdf>. Acesso em 10 de junho de 2009. 
 
 (IDC, on-line) Internacional Data Corporations (on-line). São Paulo, 2009. 
Disponível em <www.idc.com>. Acesso em: 05 de março de 2009. Dados republicados na 
revista Microsoft. 
 
 (INFOCORPORATE, 2008) A TI define os processos. Como Usar o Saas? São 
Paulo, edição 53, p. 35-38, Fevereiro 2008. 
 
 (JAMES, 1989). JAMES, Martin, Information Engineering. Prentice Hall: 
Cidade, 1990),. 
 
 (JOSUTTIS, 2008) JOSUTTIS, Nicolai. SOA na Prática. A arte da Modelagem de 
Sistemas Distribuídos. Editora? Rio de Janeiro, 2008, p. 259. 
 
 (LEAL, 2009) LEAL, Igor. Requisitos de Metodologias de Teste de Software 
pra Processos Ágeis. Curso de Pós-Graduação - Departamento de Ciência da 
Computação*–*Universidade*Federal de Minas*Gerais.*Belo*Horizonte*-*MG*–
Brasil.*Disponível*em:*<http://homepages.dcc.ufmg.br/~rodolfo/dcc823-1-
09/Entrega2Pos/igor2.pdf>.*Acesso em: 5 de julho de 2009. 
 
 (LIGOCKI, 2008) LIGOCKI, Natascha Petry. Uma Ferramenta de 
Monitoramento de Redes usando Sistema de Gerenciadores de Streams de dados. 
Dissertação de de Mestrado – Universidade Federal do Paraná, 2008. Disponível em: 
<http://backstreamdb.arauc.br/dissNatascha.pdf>. Acesso em: 25 de maio de 2009. 
 
 (LIPNER & HOWARD, 2005) LIPNER, Steve. HOWARD, Michael. O ciclo de 
vida do*desenvolvimento*da*segurança*de*computação*confiável.*Disponível*em: 
<http://msdn.microsoft.com/pt-br/library/ms995349.aspx>. Acesso em: 05 de junho de 
2009. 
 

 (MACAGNANI, 2009, on-line) MACAGNANI, Bruno (2009). Virtualização de 
Desktops, uma solução econômica. <http://www.vivaolinux.com.br/artigo/Virtualizacao-
de-desktops-uma-solucao-economica?pina=4> Acesso em: 15 de maio 2009. 
 
 (MELO et al, 2007a) MELO, Cássio A., ARCOVERDE, Eduardo F., MORAES, 
Éfrem A., PIMENTEL, João H., FREITAS, Rodrigo. Software como Serviço: Um 
Modelo de Negócio Emergente.  Centro de Informática – Universidade Federal de 
Pernambuco (UFPE). Publicado em 2007. Disponível em: 
<http://www.cin.ufpe.br/~jhcp/publica/jhcp-saas.pdf>. Acesso em: 19 de março de 2009. 
 
 (MELO et al, 2007b) MELO, Cássio A., ARCOVERDE, Eduardo F., MORAES, 
Éfrem A., PIMENTEL, João H., FREITAS, Rodrigo.  Serviços convergentes na Web 2.0.  
Centro de Informática – Universidade Federal de Pernambuco (UFPE). Publicado em 
2007. Disponível em: <http://www.cin.ufpe.br/~dfa/NOL2/SaaS.pdf>. Acesso em: 19 de 
março de 2009. 
 



 178 

 

 (MICROSOFT, 2008) Software as a Service: ima nova forma de disponibilizar e 
utilizar software. Revista Microsoft Magazine, São Paulo, v. 8, n. 62, p. 46, maio/julho 
2008. 
 
 (MICROSOFT, 2004) Como Implementar a delegação Kerberos para Windows 
2000.*Acesso*em:*29/09/2009. Disponível*em: <http://www.microsoft.com/brasil/ 
security/guidance/topics/devsec/secmod19.mspx>.  

 
 (MIGLIORINI,*2003)*MIGLIORINI*Antonio. Análise de Soluções à Segurança 
de*Horspots. Artigo publicado no Terceiro Encontro de Engenharia e Tecnologia dos 
Campos Gerais.Disponível*em: 

<http://www.aeapg.org.br/3eetcg/Anais/ARTIGOS/PDFS/Engenharia%20de%20Computa
%E7%E3o%20e%20Inform%E1tica%20-%2004.pdf>. Acesso em: 22 de maio 2009. 
 
 (MCKENDRICK, 2008, online) MCKENDRICK, Joe. The 10 Paradoxes of 
Today's Data Centers.*Disponível*em:*<http://dbta.onlineinc.com/ 
downloads/pdf/54617/Cover%20Story%20v3%20w%20page%20number%20removed.pdf
>. Acesso em: 25 de setembro de /2009. 
 
 (NAMOUR, 2009) NAMOUR, Roberta. O Orkut do emprego: O desemprego 
transforma a LinkedIn, rede social profissional usada pelos principais CEOs do mundo, no 
novo fenômeno do universo digital. Revista IstoÉ Dinheiro, São Paulo, edição 605,  maio 
2009. 
 
 (OLIVEIRA, 2006) OLIVEIRA, Alexandre Pereira. Modelo de Replicação de 
Dados*entre*SGBD*Heterogêneos. Trabalho de Conclusão do Curso de Ciência de 
Computação da Universidade. Disponível*em:*<http://gravatai.ulbra.tche.br/~roland/tcc-
gr/monografias/2006-2-tc2-Alexandre_Pereira_de_Oliveira.pdf>. Acesso em: 12 de junho 
de 2009. 
 
 (PAUL, 2007, on-line) PAUL, Gibbons Lauren, Adaptando-se ao modelo 
“software*como*um*serviço”.*Microsoft*Corporation.*Disponível*em: 
<http://www.microsoft.com/business/smb/pt-br/businessvalue/adapting.mspx>.*Acesso 
em: 15 de março de 2009. 
 
 (PECEGO, 2007) PECEGO, Otávio Coelho, Técnicas para customização de 
software.*Microsoft*Corporation.*Disponível:*em:*<http://www.microsoft.com/brasil/m
sdn/tecnologias/arquitetura/Customizacao_Software.mspx>. Acesso em: 05 de junho de 2009. 
 
 (POMERANZ,*online,*2008),*Ricardo.*Manifesto*do*Marketing*de*Relacion
amento.*Disponível*em: 

<http://www.ricardopomeranz.com.br/Manifesto_do_Marketing_de_Relacionamento.pdf> 

Acesso em: 05 set. 2009. 
 
 (PRIMO, 2007) PRIMO, Alex . Digital trash e lixo midiático: A cauda longa da 
micromídia digital. In: Vinicius Andrade Pereira. (Org.). Cultura Digital Trash: 
Linguagens, Comportamentos, Entretenimento e Consumo. Rio de Janeiro: e-Papers, 2007, 
v. , p. 77-93. 
 



 179 

 

 SALESFORCE, Estrutura de Vendas. (on-line). São Paulo, 2009. Disponível em: 
<http://www.salesforce.com>. Acesso em: 03 de março de 2009. 
 
 (SANGWELL, 2008, on-line) SANGWELL, Kevin. Implicações do Consumo de 
Software*+*Serviços*do*TI*Corporativo.*Microsoft*Corporation.*Disponível*em:* 
<http://msdn.microsoft.com/pt-br/library/bb906061.aspx>. 
 
 (SERRANO, 2008) SERRANO, Paulo Henrique. Cognição e interacionalidade 
através*do*youtube.*Biblioteca on-line de Ciências da Comunicação. 
Disponível*em:*<http://www.bocc.ubi.pt/pag/serrano-paulo-cognicao-interacionalidade-
youtube.pdf>. Acesso em: 6 de junho de 2009. 
 
 (SPOSITO, 2008) SPOSITO, Rosa. Como usar bem o SaaS:  o software como 
serviço virou*realidade*nas*empresas.*Info*Corporate,*São*Paulo,*edição.53,*p.35-
38, Fevereiro/2008.  
 
 (SOUZA, online) SOUZA, Gabriela T. Padrões de Requisitos para Especificação 
de Casos de Uso em Sistemas de Informação. Pós-Graduação – Universidade Federal do 
Ceará.*Disponível*em:*<http://www.lia.ufc.br/~eti2005/menu/modulos/PS/Padr_es_de_Requisi
tos.pdf>. Acesso em: 29 de setembro de 2009. 
 
 (TROLESI, 2003) TROLESI, Domingos Daniela, Marketing Jurídico: influências 
das normas da ordem dos advogados do Brasil (OAB) na estruturação de estratégias de 
fidelização mercadológica para escritórios de advocacia. Disponível*em: 
<http://encipecom.metodista.br/mediawiki/images/9/97/GT4_-_015.pdf>. Acesso em: 10 de 
agosto de 2009. 
 
 (TAYLOR, 2009) TAYLOR, Chris. An Introduction to Metadata. University of 
Queensland*Library.*Australia,*1999.*Disponível*em:*<ww.library.uq.edu.au/iad/cteta4.
html>. Acesso em: 27/09/2009. 
 
 (VELOSO, on-line)  VELOSO, Mateus. Utilização de Kerberos para cenários de 
delegação em.Net. Disponível em: <http://mateus.info/tecnologia/artigo4.html>. Acesso em 
22/09/2009. 
 
 (VESSALI, 2008) VESSALI, Kaven, Software as a Service in the Public Sector. 
Public*Sector*Solutions*Salesforce.*Disponível*em:*<http://media.govtech.net/GOVTE
CH_WEBSITE/EVENTS/PRESENTATION_DOCS/2008/Best_of_NY/What_Software_a
s_a_Service_Really_Means_to_You_-_Salesforce.pdf>. Acesso em: 7 de março de 2009. 
 
 (VIEIRA, 2000) Paulo. Redes de Fibra Óptica em meio urbano. Pós-Graduação 
em Informática Pública – Prodabel/PUC– Áreas de concentração de redes de 
computadores.Belo*Horizonte/MG.*Disponível*em:<http://www.inforede.net/Technical/L
ayer_1/Cabling/Fiber_Optic_5_(POR).pdf>. Acesso em: 9 de março de 2009. 
 
 (VIEIRA, 2007) VIEIRA, Eduardo. Ele é o dono do Universo. Second Life, um 
mundo virtual que abriga mais de 4 milhões de pessoas na Internet. Revista Época, edição 
459,  março 2007. 
 



 180 

 

 (WADA et al, 2003) WALDA, Eduardo Yuji Wada, ARAÚJO, Everson Santos, 
SARAIVA, Matheus Santos, AGUIAR, Teylo Laundos. Banco de Dados Paralelo. 
Trabalho apresentado à disciplina de Banco de Dados II, para obtenção de conhecimentos, 
Imperatriz, MA. Disponível em: 
<http://nobios.por.com.br/trabalhos/Bancos%20de%20Dados%20Paralelos.pdf>.*Acesso 
em: 10 de julho de 2009.  
 
 (WAZLAWICK, 2009) WAZLAWICK, Raul Sidney. Análise e Projeto de 
Sistemas de Informação Orientados a Objetos. 3ª Edição 2010 (imprenta).